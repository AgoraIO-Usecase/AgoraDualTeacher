/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sei_info_TYPES_H
#define sei_info_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace agora { namespace rtc { namespace sei {

class Canvas;

class Region;

class VideoCompositingLayout;

typedef struct _Canvas__isset {
  _Canvas__isset() : width(false), height(false), bgColor(false) {}
  bool width :1;
  bool height :1;
  bool bgColor :1;
} _Canvas__isset;

class Canvas {
 public:

  static const char* ascii_fingerprint; // = "E6DDC8C79F3E7066F913E669329FD5DF";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0xDD,0xC8,0xC7,0x9F,0x3E,0x70,0x66,0xF9,0x13,0xE6,0x69,0x32,0x9F,0xD5,0xDF};

  Canvas(const Canvas&);
  Canvas& operator=(const Canvas&);
  Canvas() : width(0), height(0), bgColor(0) {
  }

  virtual ~Canvas() throw();
  int32_t width;
  int32_t height;
  int32_t bgColor;

  _Canvas__isset __isset;

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  void __set_bgColor(const int32_t val);

  bool operator == (const Canvas & rhs) const
  {
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (__isset.bgColor != rhs.__isset.bgColor)
      return false;
    else if (__isset.bgColor && !(bgColor == rhs.bgColor))
      return false;
    return true;
  }
  bool operator != (const Canvas &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Canvas & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Canvas& obj);
};

void swap(Canvas &a, Canvas &b);

typedef struct _Region__isset {
  _Region__isset() : uid(false), x(false), y(false), width(false), height(false), renderMode(false), zOrder(false), alpha(false) {}
  bool uid :1;
  bool x :1;
  bool y :1;
  bool width :1;
  bool height :1;
  bool renderMode :1;
  bool zOrder :1;
  bool alpha :1;
} _Region__isset;

class Region {
 public:

  static const char* ascii_fingerprint; // = "09AA06EF16769839BF5183E35F41B7DF";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0xAA,0x06,0xEF,0x16,0x76,0x98,0x39,0xBF,0x51,0x83,0xE3,0x5F,0x41,0xB7,0xDF};

  Region(const Region&);
  Region& operator=(const Region&);
  Region() : uid(0), x(0), y(0), width(0), height(0), renderMode(0), zOrder(0), alpha(0) {
  }

  virtual ~Region() throw();
  int32_t uid;
  int32_t x;
  int32_t y;
  int32_t width;
  int32_t height;
  int32_t renderMode;
  int32_t zOrder;
  int32_t alpha;

  _Region__isset __isset;

  void __set_uid(const int32_t val);

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  void __set_renderMode(const int32_t val);

  void __set_zOrder(const int32_t val);

  void __set_alpha(const int32_t val);

  bool operator == (const Region & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(renderMode == rhs.renderMode))
      return false;
    if (__isset.zOrder != rhs.__isset.zOrder)
      return false;
    else if (__isset.zOrder && !(zOrder == rhs.zOrder))
      return false;
    if (__isset.alpha != rhs.__isset.alpha)
      return false;
    else if (__isset.alpha && !(alpha == rhs.alpha))
      return false;
    return true;
  }
  bool operator != (const Region &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Region & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Region& obj);
};

void swap(Region &a, Region &b);

typedef struct _VideoCompositingLayout__isset {
  _VideoCompositingLayout__isset() : canvas(false), regions(false), ts(false), appData(false) {}
  bool canvas :1;
  bool regions :1;
  bool ts :1;
  bool appData :1;
} _VideoCompositingLayout__isset;

class VideoCompositingLayout {
 public:

  static const char* ascii_fingerprint; // = "1EAD17DDD77E06D096FB99605D3ADDEC";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0xAD,0x17,0xDD,0xD7,0x7E,0x06,0xD0,0x96,0xFB,0x99,0x60,0x5D,0x3A,0xDD,0xEC};

  VideoCompositingLayout(const VideoCompositingLayout&);
  VideoCompositingLayout& operator=(const VideoCompositingLayout&);
  VideoCompositingLayout() : ts(0), appData() {
  }

  virtual ~VideoCompositingLayout() throw();
  Canvas canvas;
  std::vector<Region>  regions;
  int64_t ts;
  std::string appData;

  _VideoCompositingLayout__isset __isset;

  void __set_canvas(const Canvas& val);

  void __set_regions(const std::vector<Region> & val);

  void __set_ts(const int64_t val);

  void __set_appData(const std::string& val);

  bool operator == (const VideoCompositingLayout & rhs) const
  {
    if (__isset.canvas != rhs.__isset.canvas)
      return false;
    else if (__isset.canvas && !(canvas == rhs.canvas))
      return false;
    if (!(regions == rhs.regions))
      return false;
    if (!(ts == rhs.ts))
      return false;
    if (__isset.appData != rhs.__isset.appData)
      return false;
    else if (__isset.appData && !(appData == rhs.appData))
      return false;
    return true;
  }
  bool operator != (const VideoCompositingLayout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VideoCompositingLayout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VideoCompositingLayout& obj);
};

void swap(VideoCompositingLayout &a, VideoCompositingLayout &b);

}}} // namespace

#endif
