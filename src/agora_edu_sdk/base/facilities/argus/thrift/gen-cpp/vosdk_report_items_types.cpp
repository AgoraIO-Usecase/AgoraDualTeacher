/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "vosdk_report_items_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace agora { namespace argus {


EncryptedItem::~EncryptedItem() throw() {
}


void EncryptedItem::__set_encType(const int32_t val) {
  this->encType = val;
__isset.encType = true;
}

void EncryptedItem::__set_key1(const std::string& val) {
  this->key1 = val;
__isset.key1 = true;
}

void EncryptedItem::__set_key2(const std::string& val) {
  this->key2 = val;
__isset.key2 = true;
}

void EncryptedItem::__set_key3(const std::string& val) {
  this->key3 = val;
__isset.key3 = true;
}

void EncryptedItem::__set_key4(const std::string& val) {
  this->key4 = val;
__isset.key4 = true;
}

void EncryptedItem::__set_payload(const std::string& val) {
  this->payload = val;
__isset.payload = true;
}

const char* EncryptedItem::ascii_fingerprint = "E63460C7200B1019E702905930F39D30";
const uint8_t EncryptedItem::binary_fingerprint[16] = {0xE6,0x34,0x60,0xC7,0x20,0x0B,0x10,0x19,0xE7,0x02,0x90,0x59,0x30,0xF3,0x9D,0x30};

uint32_t EncryptedItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->encType);
          this->__isset.encType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key1);
          this->__isset.key1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key2);
          this->__isset.key2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key3);
          this->__isset.key3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key4);
          this->__isset.key4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EncryptedItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("EncryptedItem");

  if (this->__isset.encType) {
    xfer += oprot->writeFieldBegin("encType", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->encType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key1) {
    xfer += oprot->writeFieldBegin("key1", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->key1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key2) {
    xfer += oprot->writeFieldBegin("key2", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeBinary(this->key2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key3) {
    xfer += oprot->writeFieldBegin("key3", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->key3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key4) {
    xfer += oprot->writeFieldBegin("key4", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->key4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.payload) {
    xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeBinary(this->payload);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(EncryptedItem &a, EncryptedItem &b) {
  using ::std::swap;
  swap(a.encType, b.encType);
  swap(a.key1, b.key1);
  swap(a.key2, b.key2);
  swap(a.key3, b.key3);
  swap(a.key4, b.key4);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

EncryptedItem::EncryptedItem(const EncryptedItem& other0) {
  encType = other0.encType;
  key1 = other0.key1;
  key2 = other0.key2;
  key3 = other0.key3;
  key4 = other0.key4;
  payload = other0.payload;
  __isset = other0.__isset;
}
EncryptedItem& EncryptedItem::operator=(const EncryptedItem& other1) {
  encType = other1.encType;
  key1 = other1.key1;
  key2 = other1.key2;
  key3 = other1.key3;
  key4 = other1.key4;
  payload = other1.payload;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const EncryptedItem& obj) {
  using apache::thrift::to_string;
  out << "EncryptedItem(";
  out << "encType="; (obj.__isset.encType ? (out << to_string(obj.encType)) : (out << "<null>"));
  out << ", " << "key1="; (obj.__isset.key1 ? (out << to_string(obj.key1)) : (out << "<null>"));
  out << ", " << "key2="; (obj.__isset.key2 ? (out << to_string(obj.key2)) : (out << "<null>"));
  out << ", " << "key3="; (obj.__isset.key3 ? (out << to_string(obj.key3)) : (out << "<null>"));
  out << ", " << "key4="; (obj.__isset.key4 ? (out << to_string(obj.key4)) : (out << "<null>"));
  out << ", " << "payload="; (obj.__isset.payload ? (out << to_string(obj.payload)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkHeader::~VosdkHeader() throw() {
}


void VosdkHeader::__set_sid(const std::string& val) {
  this->sid = val;
__isset.sid = true;
}

void VosdkHeader::__set_cname(const std::string& val) {
  this->cname = val;
__isset.cname = true;
}

void VosdkHeader::__set_cid(const int64_t val) {
  this->cid = val;
__isset.cid = true;
}

void VosdkHeader::__set_lts(const int64_t val) {
  this->lts = val;
__isset.lts = true;
}

void VosdkHeader::__set_ip(const std::string& val) {
  this->ip = val;
__isset.ip = true;
}

void VosdkHeader::__set_uid(const int64_t val) {
  this->uid = val;
__isset.uid = true;
}

void VosdkHeader::__set_success(const bool val) {
  this->success = val;
__isset.success = true;
}

void VosdkHeader::__set_elapse(const int64_t val) {
  this->elapse = val;
__isset.elapse = true;
}

void VosdkHeader::__set_peer(const int64_t val) {
  this->peer = val;
__isset.peer = true;
}

const char* VosdkHeader::ascii_fingerprint = "3C6FBB1DBFDAB67A445B617A09875A7F";
const uint8_t VosdkHeader::binary_fingerprint[16] = {0x3C,0x6F,0xBB,0x1D,0xBF,0xDA,0xB6,0x7A,0x44,0x5B,0x61,0x7A,0x09,0x87,0x5A,0x7F};

uint32_t VosdkHeader::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sid);
          this->__isset.sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cname);
          this->__isset.cname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cid);
          this->__isset.cid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lts);
          this->__isset.lts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->elapse);
          this->__isset.elapse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peer);
          this->__isset.peer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkHeader::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkHeader");

  if (this->__isset.sid) {
    xfer += oprot->writeFieldBegin("sid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->sid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cname) {
    xfer += oprot->writeFieldBegin("cname", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->cname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cid) {
    xfer += oprot->writeFieldBegin("cid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->cid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lts) {
    xfer += oprot->writeFieldBegin("lts", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->lts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip) {
    xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.elapse) {
    xfer += oprot->writeFieldBegin("elapse", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->elapse);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peer) {
    xfer += oprot->writeFieldBegin("peer", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->peer);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkHeader &a, VosdkHeader &b) {
  using ::std::swap;
  swap(a.sid, b.sid);
  swap(a.cname, b.cname);
  swap(a.cid, b.cid);
  swap(a.lts, b.lts);
  swap(a.ip, b.ip);
  swap(a.uid, b.uid);
  swap(a.success, b.success);
  swap(a.elapse, b.elapse);
  swap(a.peer, b.peer);
  swap(a.__isset, b.__isset);
}

VosdkHeader::VosdkHeader(const VosdkHeader& other2) {
  sid = other2.sid;
  cname = other2.cname;
  cid = other2.cid;
  lts = other2.lts;
  ip = other2.ip;
  uid = other2.uid;
  success = other2.success;
  elapse = other2.elapse;
  peer = other2.peer;
  __isset = other2.__isset;
}
VosdkHeader& VosdkHeader::operator=(const VosdkHeader& other3) {
  sid = other3.sid;
  cname = other3.cname;
  cid = other3.cid;
  lts = other3.lts;
  ip = other3.ip;
  uid = other3.uid;
  success = other3.success;
  elapse = other3.elapse;
  peer = other3.peer;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkHeader& obj) {
  using apache::thrift::to_string;
  out << "VosdkHeader(";
  out << "sid="; (obj.__isset.sid ? (out << to_string(obj.sid)) : (out << "<null>"));
  out << ", " << "cname="; (obj.__isset.cname ? (out << to_string(obj.cname)) : (out << "<null>"));
  out << ", " << "cid="; (obj.__isset.cid ? (out << to_string(obj.cid)) : (out << "<null>"));
  out << ", " << "lts="; (obj.__isset.lts ? (out << to_string(obj.lts)) : (out << "<null>"));
  out << ", " << "ip="; (obj.__isset.ip ? (out << to_string(obj.ip)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "success="; (obj.__isset.success ? (out << to_string(obj.success)) : (out << "<null>"));
  out << ", " << "elapse="; (obj.__isset.elapse ? (out << to_string(obj.elapse)) : (out << "<null>"));
  out << ", " << "peer="; (obj.__isset.peer ? (out << to_string(obj.peer)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkCounterItem::~VosdkCounterItem() throw() {
}


void VosdkCounterItem::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void VosdkCounterItem::__set_lts(const int64_t val) {
  this->lts = val;
__isset.lts = true;
}

void VosdkCounterItem::__set_value(const int32_t val) {
  this->value = val;
__isset.value = true;
}

void VosdkCounterItem::__set_id(const int32_t val) {
  this->id = val;
__isset.id = true;
}

void VosdkCounterItem::__set_tagErrorCode(const int32_t val) {
  this->tagErrorCode = val;
__isset.tagErrorCode = true;
}

const char* VosdkCounterItem::ascii_fingerprint = "C019BD9C5C74062EF1B7E51D59FB3E2B";
const uint8_t VosdkCounterItem::binary_fingerprint[16] = {0xC0,0x19,0xBD,0x9C,0x5C,0x74,0x06,0x2E,0xF1,0xB7,0xE5,0x1D,0x59,0xFB,0x3E,0x2B};

uint32_t VosdkCounterItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lts);
          this->__isset.lts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tagErrorCode);
          this->__isset.tagErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkCounterItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkCounterItem");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lts) {
    xfer += oprot->writeFieldBegin("lts", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->lts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagErrorCode) {
    xfer += oprot->writeFieldBegin("tagErrorCode", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->tagErrorCode);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkCounterItem &a, VosdkCounterItem &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.lts, b.lts);
  swap(a.value, b.value);
  swap(a.id, b.id);
  swap(a.tagErrorCode, b.tagErrorCode);
  swap(a.__isset, b.__isset);
}

VosdkCounterItem::VosdkCounterItem(const VosdkCounterItem& other4) {
  name = other4.name;
  lts = other4.lts;
  value = other4.value;
  id = other4.id;
  tagErrorCode = other4.tagErrorCode;
  __isset = other4.__isset;
}
VosdkCounterItem& VosdkCounterItem::operator=(const VosdkCounterItem& other5) {
  name = other5.name;
  lts = other5.lts;
  value = other5.value;
  id = other5.id;
  tagErrorCode = other5.tagErrorCode;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkCounterItem& obj) {
  using apache::thrift::to_string;
  out << "VosdkCounterItem(";
  out << "name="; (obj.__isset.name ? (out << to_string(obj.name)) : (out << "<null>"));
  out << ", " << "lts="; (obj.__isset.lts ? (out << to_string(obj.lts)) : (out << "<null>"));
  out << ", " << "value="; (obj.__isset.value ? (out << to_string(obj.value)) : (out << "<null>"));
  out << ", " << "id="; (obj.__isset.id ? (out << to_string(obj.id)) : (out << "<null>"));
  out << ", " << "tagErrorCode="; (obj.__isset.tagErrorCode ? (out << to_string(obj.tagErrorCode)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkCounter::~VosdkCounter() throw() {
}


void VosdkCounter::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkCounter::__set_items(const std::vector<VosdkCounterItem> & val) {
  this->items = val;
__isset.items = true;
}

const char* VosdkCounter::ascii_fingerprint = "E5A7E3E543C757C392DAAD0A8C4AC992";
const uint8_t VosdkCounter::binary_fingerprint[16] = {0xE5,0xA7,0xE3,0xE5,0x43,0xC7,0x57,0xC3,0x92,0xDA,0xAD,0x0A,0x8C,0x4A,0xC9,0x92};

uint32_t VosdkCounter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->items.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->items[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkCounter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkCounter");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.items) {
    xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
      std::vector<VosdkCounterItem> ::const_iterator _iter11;
      for (_iter11 = this->items.begin(); _iter11 != this->items.end(); ++_iter11)
      {
        xfer += (*_iter11).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkCounter &a, VosdkCounter &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.items, b.items);
  swap(a.__isset, b.__isset);
}

VosdkCounter::VosdkCounter(const VosdkCounter& other12) {
  header = other12.header;
  items = other12.items;
  __isset = other12.__isset;
}
VosdkCounter& VosdkCounter::operator=(const VosdkCounter& other13) {
  header = other13.header;
  items = other13.items;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkCounter& obj) {
  using apache::thrift::to_string;
  out << "VosdkCounter(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "items="; (obj.__isset.items ? (out << to_string(obj.items)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkSession::~VosdkSession() throw() {
}


void VosdkSession::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkSession::__set_vk(const std::string& val) {
  this->vk = val;
__isset.vk = true;
}

void VosdkSession::__set_ver(const std::string& val) {
  this->ver = val;
__isset.ver = true;
}

void VosdkSession::__set_net1(const int32_t val) {
  this->net1 = val;
__isset.net1 = true;
}

void VosdkSession::__set_net2(const int32_t val) {
  this->net2 = val;
__isset.net2 = true;
}

void VosdkSession::__set_localIp(const std::string& val) {
  this->localIp = val;
__isset.localIp = true;
}

void VosdkSession::__set_ssid(const std::string& val) {
  this->ssid = val;
__isset.ssid = true;
}

void VosdkSession::__set_bssid(const std::string& val) {
  this->bssid = val;
__isset.bssid = true;
}

void VosdkSession::__set_siglevel(const int32_t val) {
  this->siglevel = val;
__isset.siglevel = true;
}

void VosdkSession::__set_rssi(const int32_t val) {
  this->rssi = val;
__isset.rssi = true;
}

void VosdkSession::__set_os1(const int32_t val) {
  this->os1 = val;
__isset.os1 = true;
}

void VosdkSession::__set_did(const std::string& val) {
  this->did = val;
__isset.did = true;
}

void VosdkSession::__set_pnq(const int32_t val) {
  this->pnq = val;
__isset.pnq = true;
}

void VosdkSession::__set_lost(const int32_t val) {
  this->lost = val;
__isset.lost = true;
}

void VosdkSession::__set_info(const std::string& val) {
  this->info = val;
__isset.info = true;
}

void VosdkSession::__set_lsid(const std::string& val) {
  this->lsid = val;
__isset.lsid = true;
}

void VosdkSession::__set_channelMode(const int32_t val) {
  this->channelMode = val;
__isset.channelMode = true;
}

void VosdkSession::__set_cheVer(const std::string& val) {
  this->cheVer = val;
__isset.cheVer = true;
}

void VosdkSession::__set_sdkBuildNumber(const int32_t val) {
  this->sdkBuildNumber = val;
__isset.sdkBuildNumber = true;
}

void VosdkSession::__set_cheBuildNumber(const int32_t val) {
  this->cheBuildNumber = val;
__isset.cheBuildNumber = true;
}

void VosdkSession::__set_fsid(const std::string& val) {
  this->fsid = val;
__isset.fsid = true;
}

void VosdkSession::__set_channelProfile(const int32_t val) {
  this->channelProfile = val;
__isset.channelProfile = true;
}

void VosdkSession::__set_netSubType(const int32_t val) {
  this->netSubType = val;
__isset.netSubType = true;
}

void VosdkSession::__set_clientType(const int32_t val) {
  this->clientType = val;
__isset.clientType = true;
}

void VosdkSession::__set_appCategory(const int32_t val) {
  this->appCategory = val;
__isset.appCategory = true;
}

void VosdkSession::__set_clientRole(const int32_t val) {
  this->clientRole = val;
__isset.clientRole = true;
}

void VosdkSession::__set_installId(const std::string& val) {
  this->installId = val;
__isset.installId = true;
}

void VosdkSession::__set_stringUid(const std::string& val) {
  this->stringUid = val;
__isset.stringUid = true;
}

void VosdkSession::__set_jitter(const int32_t val) {
  this->jitter = val;
__isset.jitter = true;
}

void VosdkSession::__set_verExtraInfo(const std::string& val) {
  this->verExtraInfo = val;
__isset.verExtraInfo = true;
}

void VosdkSession::__set_cpuid(const std::string& val) {
  this->cpuid = val;
__isset.cpuid = true;
}

void VosdkSession::__set_configServiceVersion(const std::string& val) {
  this->configServiceVersion = val;
__isset.configServiceVersion = true;
}

void VosdkSession::__set_serviceId(const std::string& val) {
  this->serviceId = val;
__isset.serviceId = true;
}

void VosdkSession::__set_configElapsed(const int32_t val) {
  this->configElapsed = val;
__isset.configElapsed = true;
}

void VosdkSession::__set_isABTestSuccess(const bool val) {
  this->isABTestSuccess = val;
__isset.isABTestSuccess = true;
}

const char* VosdkSession::ascii_fingerprint = "8D9C694E9FC7BC54DBA7BA8A91E493B8";
const uint8_t VosdkSession::binary_fingerprint[16] = {0x8D,0x9C,0x69,0x4E,0x9F,0xC7,0xBC,0x54,0xDB,0xA7,0xBA,0x8A,0x91,0xE4,0x93,0xB8};

uint32_t VosdkSession::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vk);
          this->__isset.vk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ver);
          this->__isset.ver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->net1);
          this->__isset.net1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->net2);
          this->__isset.net2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localIp);
          this->__isset.localIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ssid);
          this->__isset.ssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bssid);
          this->__isset.bssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->siglevel);
          this->__isset.siglevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rssi);
          this->__isset.rssi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->os1);
          this->__isset.os1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->did);
          this->__isset.did = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pnq);
          this->__isset.pnq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lost);
          this->__isset.lost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lsid);
          this->__isset.lsid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->channelMode);
          this->__isset.channelMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cheVer);
          this->__isset.cheVer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sdkBuildNumber);
          this->__isset.sdkBuildNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cheBuildNumber);
          this->__isset.cheBuildNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fsid);
          this->__isset.fsid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->channelProfile);
          this->__isset.channelProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->netSubType);
          this->__isset.netSubType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clientType);
          this->__isset.clientType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->appCategory);
          this->__isset.appCategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clientRole);
          this->__isset.clientRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->installId);
          this->__isset.installId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringUid);
          this->__isset.stringUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->jitter);
          this->__isset.jitter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->verExtraInfo);
          this->__isset.verExtraInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cpuid);
          this->__isset.cpuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->configServiceVersion);
          this->__isset.configServiceVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceId);
          this->__isset.serviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->configElapsed);
          this->__isset.configElapsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isABTestSuccess);
          this->__isset.isABTestSuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkSession::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkSession");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vk) {
    xfer += oprot->writeFieldBegin("vk", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->vk);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ver) {
    xfer += oprot->writeFieldBegin("ver", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->ver);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.net1) {
    xfer += oprot->writeFieldBegin("net1", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->net1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.net2) {
    xfer += oprot->writeFieldBegin("net2", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->net2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.localIp) {
    xfer += oprot->writeFieldBegin("localIp", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->localIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ssid) {
    xfer += oprot->writeFieldBegin("ssid", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->ssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bssid) {
    xfer += oprot->writeFieldBegin("bssid", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->bssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.siglevel) {
    xfer += oprot->writeFieldBegin("siglevel", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->siglevel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rssi) {
    xfer += oprot->writeFieldBegin("rssi", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->rssi);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.os1) {
    xfer += oprot->writeFieldBegin("os1", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->os1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.did) {
    xfer += oprot->writeFieldBegin("did", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->did);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pnq) {
    xfer += oprot->writeFieldBegin("pnq", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->pnq);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost) {
    xfer += oprot->writeFieldBegin("lost", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->lost);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.info) {
    xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->info);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lsid) {
    xfer += oprot->writeFieldBegin("lsid", ::apache::thrift::protocol::T_STRING, 19);
    xfer += oprot->writeString(this->lsid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channelMode) {
    xfer += oprot->writeFieldBegin("channelMode", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32(this->channelMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cheVer) {
    xfer += oprot->writeFieldBegin("cheVer", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->cheVer);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sdkBuildNumber) {
    xfer += oprot->writeFieldBegin("sdkBuildNumber", ::apache::thrift::protocol::T_I32, 22);
    xfer += oprot->writeI32(this->sdkBuildNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cheBuildNumber) {
    xfer += oprot->writeFieldBegin("cheBuildNumber", ::apache::thrift::protocol::T_I32, 23);
    xfer += oprot->writeI32(this->cheBuildNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fsid) {
    xfer += oprot->writeFieldBegin("fsid", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->fsid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channelProfile) {
    xfer += oprot->writeFieldBegin("channelProfile", ::apache::thrift::protocol::T_I32, 25);
    xfer += oprot->writeI32(this->channelProfile);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.netSubType) {
    xfer += oprot->writeFieldBegin("netSubType", ::apache::thrift::protocol::T_I32, 26);
    xfer += oprot->writeI32(this->netSubType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clientType) {
    xfer += oprot->writeFieldBegin("clientType", ::apache::thrift::protocol::T_I32, 27);
    xfer += oprot->writeI32(this->clientType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.appCategory) {
    xfer += oprot->writeFieldBegin("appCategory", ::apache::thrift::protocol::T_I32, 28);
    xfer += oprot->writeI32(this->appCategory);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clientRole) {
    xfer += oprot->writeFieldBegin("clientRole", ::apache::thrift::protocol::T_I32, 29);
    xfer += oprot->writeI32(this->clientRole);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.installId) {
    xfer += oprot->writeFieldBegin("installId", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->installId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stringUid) {
    xfer += oprot->writeFieldBegin("stringUid", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->stringUid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter) {
    xfer += oprot->writeFieldBegin("jitter", ::apache::thrift::protocol::T_I32, 32);
    xfer += oprot->writeI32(this->jitter);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.verExtraInfo) {
    xfer += oprot->writeFieldBegin("verExtraInfo", ::apache::thrift::protocol::T_STRING, 33);
    xfer += oprot->writeString(this->verExtraInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cpuid) {
    xfer += oprot->writeFieldBegin("cpuid", ::apache::thrift::protocol::T_STRING, 34);
    xfer += oprot->writeString(this->cpuid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.configServiceVersion) {
    xfer += oprot->writeFieldBegin("configServiceVersion", ::apache::thrift::protocol::T_STRING, 35);
    xfer += oprot->writeString(this->configServiceVersion);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceId) {
    xfer += oprot->writeFieldBegin("serviceId", ::apache::thrift::protocol::T_STRING, 36);
    xfer += oprot->writeString(this->serviceId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.configElapsed) {
    xfer += oprot->writeFieldBegin("configElapsed", ::apache::thrift::protocol::T_I32, 37);
    xfer += oprot->writeI32(this->configElapsed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isABTestSuccess) {
    xfer += oprot->writeFieldBegin("isABTestSuccess", ::apache::thrift::protocol::T_BOOL, 38);
    xfer += oprot->writeBool(this->isABTestSuccess);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkSession &a, VosdkSession &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.vk, b.vk);
  swap(a.ver, b.ver);
  swap(a.net1, b.net1);
  swap(a.net2, b.net2);
  swap(a.localIp, b.localIp);
  swap(a.ssid, b.ssid);
  swap(a.bssid, b.bssid);
  swap(a.siglevel, b.siglevel);
  swap(a.rssi, b.rssi);
  swap(a.os1, b.os1);
  swap(a.did, b.did);
  swap(a.pnq, b.pnq);
  swap(a.lost, b.lost);
  swap(a.info, b.info);
  swap(a.lsid, b.lsid);
  swap(a.channelMode, b.channelMode);
  swap(a.cheVer, b.cheVer);
  swap(a.sdkBuildNumber, b.sdkBuildNumber);
  swap(a.cheBuildNumber, b.cheBuildNumber);
  swap(a.fsid, b.fsid);
  swap(a.channelProfile, b.channelProfile);
  swap(a.netSubType, b.netSubType);
  swap(a.clientType, b.clientType);
  swap(a.appCategory, b.appCategory);
  swap(a.clientRole, b.clientRole);
  swap(a.installId, b.installId);
  swap(a.stringUid, b.stringUid);
  swap(a.jitter, b.jitter);
  swap(a.verExtraInfo, b.verExtraInfo);
  swap(a.cpuid, b.cpuid);
  swap(a.configServiceVersion, b.configServiceVersion);
  swap(a.serviceId, b.serviceId);
  swap(a.configElapsed, b.configElapsed);
  swap(a.isABTestSuccess, b.isABTestSuccess);
  swap(a.__isset, b.__isset);
}

VosdkSession::VosdkSession(const VosdkSession& other14) {
  header = other14.header;
  vk = other14.vk;
  ver = other14.ver;
  net1 = other14.net1;
  net2 = other14.net2;
  localIp = other14.localIp;
  ssid = other14.ssid;
  bssid = other14.bssid;
  siglevel = other14.siglevel;
  rssi = other14.rssi;
  os1 = other14.os1;
  did = other14.did;
  pnq = other14.pnq;
  lost = other14.lost;
  info = other14.info;
  lsid = other14.lsid;
  channelMode = other14.channelMode;
  cheVer = other14.cheVer;
  sdkBuildNumber = other14.sdkBuildNumber;
  cheBuildNumber = other14.cheBuildNumber;
  fsid = other14.fsid;
  channelProfile = other14.channelProfile;
  netSubType = other14.netSubType;
  clientType = other14.clientType;
  appCategory = other14.appCategory;
  clientRole = other14.clientRole;
  installId = other14.installId;
  stringUid = other14.stringUid;
  jitter = other14.jitter;
  verExtraInfo = other14.verExtraInfo;
  cpuid = other14.cpuid;
  configServiceVersion = other14.configServiceVersion;
  serviceId = other14.serviceId;
  configElapsed = other14.configElapsed;
  isABTestSuccess = other14.isABTestSuccess;
  __isset = other14.__isset;
}
VosdkSession& VosdkSession::operator=(const VosdkSession& other15) {
  header = other15.header;
  vk = other15.vk;
  ver = other15.ver;
  net1 = other15.net1;
  net2 = other15.net2;
  localIp = other15.localIp;
  ssid = other15.ssid;
  bssid = other15.bssid;
  siglevel = other15.siglevel;
  rssi = other15.rssi;
  os1 = other15.os1;
  did = other15.did;
  pnq = other15.pnq;
  lost = other15.lost;
  info = other15.info;
  lsid = other15.lsid;
  channelMode = other15.channelMode;
  cheVer = other15.cheVer;
  sdkBuildNumber = other15.sdkBuildNumber;
  cheBuildNumber = other15.cheBuildNumber;
  fsid = other15.fsid;
  channelProfile = other15.channelProfile;
  netSubType = other15.netSubType;
  clientType = other15.clientType;
  appCategory = other15.appCategory;
  clientRole = other15.clientRole;
  installId = other15.installId;
  stringUid = other15.stringUid;
  jitter = other15.jitter;
  verExtraInfo = other15.verExtraInfo;
  cpuid = other15.cpuid;
  configServiceVersion = other15.configServiceVersion;
  serviceId = other15.serviceId;
  configElapsed = other15.configElapsed;
  isABTestSuccess = other15.isABTestSuccess;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkSession& obj) {
  using apache::thrift::to_string;
  out << "VosdkSession(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "vk="; (obj.__isset.vk ? (out << to_string(obj.vk)) : (out << "<null>"));
  out << ", " << "ver="; (obj.__isset.ver ? (out << to_string(obj.ver)) : (out << "<null>"));
  out << ", " << "net1="; (obj.__isset.net1 ? (out << to_string(obj.net1)) : (out << "<null>"));
  out << ", " << "net2="; (obj.__isset.net2 ? (out << to_string(obj.net2)) : (out << "<null>"));
  out << ", " << "localIp="; (obj.__isset.localIp ? (out << to_string(obj.localIp)) : (out << "<null>"));
  out << ", " << "ssid="; (obj.__isset.ssid ? (out << to_string(obj.ssid)) : (out << "<null>"));
  out << ", " << "bssid="; (obj.__isset.bssid ? (out << to_string(obj.bssid)) : (out << "<null>"));
  out << ", " << "siglevel="; (obj.__isset.siglevel ? (out << to_string(obj.siglevel)) : (out << "<null>"));
  out << ", " << "rssi="; (obj.__isset.rssi ? (out << to_string(obj.rssi)) : (out << "<null>"));
  out << ", " << "os1="; (obj.__isset.os1 ? (out << to_string(obj.os1)) : (out << "<null>"));
  out << ", " << "did="; (obj.__isset.did ? (out << to_string(obj.did)) : (out << "<null>"));
  out << ", " << "pnq="; (obj.__isset.pnq ? (out << to_string(obj.pnq)) : (out << "<null>"));
  out << ", " << "lost="; (obj.__isset.lost ? (out << to_string(obj.lost)) : (out << "<null>"));
  out << ", " << "info="; (obj.__isset.info ? (out << to_string(obj.info)) : (out << "<null>"));
  out << ", " << "lsid="; (obj.__isset.lsid ? (out << to_string(obj.lsid)) : (out << "<null>"));
  out << ", " << "channelMode="; (obj.__isset.channelMode ? (out << to_string(obj.channelMode)) : (out << "<null>"));
  out << ", " << "cheVer="; (obj.__isset.cheVer ? (out << to_string(obj.cheVer)) : (out << "<null>"));
  out << ", " << "sdkBuildNumber="; (obj.__isset.sdkBuildNumber ? (out << to_string(obj.sdkBuildNumber)) : (out << "<null>"));
  out << ", " << "cheBuildNumber="; (obj.__isset.cheBuildNumber ? (out << to_string(obj.cheBuildNumber)) : (out << "<null>"));
  out << ", " << "fsid="; (obj.__isset.fsid ? (out << to_string(obj.fsid)) : (out << "<null>"));
  out << ", " << "channelProfile="; (obj.__isset.channelProfile ? (out << to_string(obj.channelProfile)) : (out << "<null>"));
  out << ", " << "netSubType="; (obj.__isset.netSubType ? (out << to_string(obj.netSubType)) : (out << "<null>"));
  out << ", " << "clientType="; (obj.__isset.clientType ? (out << to_string(obj.clientType)) : (out << "<null>"));
  out << ", " << "appCategory="; (obj.__isset.appCategory ? (out << to_string(obj.appCategory)) : (out << "<null>"));
  out << ", " << "clientRole="; (obj.__isset.clientRole ? (out << to_string(obj.clientRole)) : (out << "<null>"));
  out << ", " << "installId="; (obj.__isset.installId ? (out << to_string(obj.installId)) : (out << "<null>"));
  out << ", " << "stringUid="; (obj.__isset.stringUid ? (out << to_string(obj.stringUid)) : (out << "<null>"));
  out << ", " << "jitter="; (obj.__isset.jitter ? (out << to_string(obj.jitter)) : (out << "<null>"));
  out << ", " << "verExtraInfo="; (obj.__isset.verExtraInfo ? (out << to_string(obj.verExtraInfo)) : (out << "<null>"));
  out << ", " << "cpuid="; (obj.__isset.cpuid ? (out << to_string(obj.cpuid)) : (out << "<null>"));
  out << ", " << "configServiceVersion="; (obj.__isset.configServiceVersion ? (out << to_string(obj.configServiceVersion)) : (out << "<null>"));
  out << ", " << "serviceId="; (obj.__isset.serviceId ? (out << to_string(obj.serviceId)) : (out << "<null>"));
  out << ", " << "configElapsed="; (obj.__isset.configElapsed ? (out << to_string(obj.configElapsed)) : (out << "<null>"));
  out << ", " << "isABTestSuccess="; (obj.__isset.isABTestSuccess ? (out << to_string(obj.isABTestSuccess)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVocs::~VosdkVocs() throw() {
}


void VosdkVocs::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVocs::__set_ec(const int32_t val) {
  this->ec = val;
__isset.ec = true;
}

void VosdkVocs::__set_sc(const int32_t val) {
  this->sc = val;
__isset.sc = true;
}

void VosdkVocs::__set_serverIp(const std::string& val) {
  this->serverIp = val;
__isset.serverIp = true;
}

void VosdkVocs::__set_firstSuccess(const bool val) {
  this->firstSuccess = val;
__isset.firstSuccess = true;
}

void VosdkVocs::__set_responseTime(const int32_t val) {
  this->responseTime = val;
__isset.responseTime = true;
}

void VosdkVocs::__set_serverIpList(const std::vector<std::string> & val) {
  this->serverIpList = val;
__isset.serverIpList = true;
}

void VosdkVocs::__set_ssid(const std::string& val) {
  this->ssid = val;
__isset.ssid = true;
}

void VosdkVocs::__set_bssid(const std::string& val) {
  this->bssid = val;
__isset.bssid = true;
}

void VosdkVocs::__set_localWanIp(const std::string& val) {
  this->localWanIp = val;
__isset.localWanIp = true;
}

void VosdkVocs::__set_ispName(const std::string& val) {
  this->ispName = val;
__isset.ispName = true;
}

void VosdkVocs::__set_minorIsp(const bool val) {
  this->minorIsp = val;
__isset.minorIsp = true;
}

const char* VosdkVocs::ascii_fingerprint = "AB2655934AC948A3AF53F439E3B96741";
const uint8_t VosdkVocs::binary_fingerprint[16] = {0xAB,0x26,0x55,0x93,0x4A,0xC9,0x48,0xA3,0xAF,0x53,0xF4,0x39,0xE3,0xB9,0x67,0x41};

uint32_t VosdkVocs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ec);
          this->__isset.ec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sc);
          this->__isset.sc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverIp);
          this->__isset.serverIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->firstSuccess);
          this->__isset.firstSuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->responseTime);
          this->__isset.responseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serverIpList.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->serverIpList.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += iprot->readString(this->serverIpList[_i20]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serverIpList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ssid);
          this->__isset.ssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bssid);
          this->__isset.bssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localWanIp);
          this->__isset.localWanIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ispName);
          this->__isset.ispName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->minorIsp);
          this->__isset.minorIsp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVocs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVocs");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ec) {
    xfer += oprot->writeFieldBegin("ec", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->ec);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sc) {
    xfer += oprot->writeFieldBegin("sc", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->sc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverIp) {
    xfer += oprot->writeFieldBegin("serverIp", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->serverIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstSuccess) {
    xfer += oprot->writeFieldBegin("firstSuccess", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->firstSuccess);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.responseTime) {
    xfer += oprot->writeFieldBegin("responseTime", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->responseTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverIpList) {
    xfer += oprot->writeFieldBegin("serverIpList", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->serverIpList.size()));
      std::vector<std::string> ::const_iterator _iter21;
      for (_iter21 = this->serverIpList.begin(); _iter21 != this->serverIpList.end(); ++_iter21)
      {
        xfer += oprot->writeString((*_iter21));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ssid) {
    xfer += oprot->writeFieldBegin("ssid", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->ssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bssid) {
    xfer += oprot->writeFieldBegin("bssid", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->bssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.localWanIp) {
    xfer += oprot->writeFieldBegin("localWanIp", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->localWanIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ispName) {
    xfer += oprot->writeFieldBegin("ispName", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->ispName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minorIsp) {
    xfer += oprot->writeFieldBegin("minorIsp", ::apache::thrift::protocol::T_BOOL, 15);
    xfer += oprot->writeBool(this->minorIsp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVocs &a, VosdkVocs &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.ec, b.ec);
  swap(a.sc, b.sc);
  swap(a.serverIp, b.serverIp);
  swap(a.firstSuccess, b.firstSuccess);
  swap(a.responseTime, b.responseTime);
  swap(a.serverIpList, b.serverIpList);
  swap(a.ssid, b.ssid);
  swap(a.bssid, b.bssid);
  swap(a.localWanIp, b.localWanIp);
  swap(a.ispName, b.ispName);
  swap(a.minorIsp, b.minorIsp);
  swap(a.__isset, b.__isset);
}

VosdkVocs::VosdkVocs(const VosdkVocs& other22) {
  header = other22.header;
  ec = other22.ec;
  sc = other22.sc;
  serverIp = other22.serverIp;
  firstSuccess = other22.firstSuccess;
  responseTime = other22.responseTime;
  serverIpList = other22.serverIpList;
  ssid = other22.ssid;
  bssid = other22.bssid;
  localWanIp = other22.localWanIp;
  ispName = other22.ispName;
  minorIsp = other22.minorIsp;
  __isset = other22.__isset;
}
VosdkVocs& VosdkVocs::operator=(const VosdkVocs& other23) {
  header = other23.header;
  ec = other23.ec;
  sc = other23.sc;
  serverIp = other23.serverIp;
  firstSuccess = other23.firstSuccess;
  responseTime = other23.responseTime;
  serverIpList = other23.serverIpList;
  ssid = other23.ssid;
  bssid = other23.bssid;
  localWanIp = other23.localWanIp;
  ispName = other23.ispName;
  minorIsp = other23.minorIsp;
  __isset = other23.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVocs& obj) {
  using apache::thrift::to_string;
  out << "VosdkVocs(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "ec="; (obj.__isset.ec ? (out << to_string(obj.ec)) : (out << "<null>"));
  out << ", " << "sc="; (obj.__isset.sc ? (out << to_string(obj.sc)) : (out << "<null>"));
  out << ", " << "serverIp="; (obj.__isset.serverIp ? (out << to_string(obj.serverIp)) : (out << "<null>"));
  out << ", " << "firstSuccess="; (obj.__isset.firstSuccess ? (out << to_string(obj.firstSuccess)) : (out << "<null>"));
  out << ", " << "responseTime="; (obj.__isset.responseTime ? (out << to_string(obj.responseTime)) : (out << "<null>"));
  out << ", " << "serverIpList="; (obj.__isset.serverIpList ? (out << to_string(obj.serverIpList)) : (out << "<null>"));
  out << ", " << "ssid="; (obj.__isset.ssid ? (out << to_string(obj.ssid)) : (out << "<null>"));
  out << ", " << "bssid="; (obj.__isset.bssid ? (out << to_string(obj.bssid)) : (out << "<null>"));
  out << ", " << "localWanIp="; (obj.__isset.localWanIp ? (out << to_string(obj.localWanIp)) : (out << "<null>"));
  out << ", " << "ispName="; (obj.__isset.ispName ? (out << to_string(obj.ispName)) : (out << "<null>"));
  out << ", " << "minorIsp="; (obj.__isset.minorIsp ? (out << to_string(obj.minorIsp)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVos::~VosdkVos() throw() {
}


void VosdkVos::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVos::__set_ec(const int32_t val) {
  this->ec = val;
__isset.ec = true;
}

void VosdkVos::__set_sc(const int32_t val) {
  this->sc = val;
__isset.sc = true;
}

void VosdkVos::__set_serverIp(const std::string& val) {
  this->serverIp = val;
__isset.serverIp = true;
}

void VosdkVos::__set_vosList(const std::vector<std::string> & val) {
  this->vosList = val;
__isset.vosList = true;
}

void VosdkVos::__set_firstSuccess(const bool val) {
  this->firstSuccess = val;
__isset.firstSuccess = true;
}

void VosdkVos::__set_channelCount(const int32_t val) {
  this->channelCount = val;
__isset.channelCount = true;
}

void VosdkVos::__set_responseTime(const int32_t val) {
  this->responseTime = val;
__isset.responseTime = true;
}

void VosdkVos::__set_ackedLoginServerIp(const std::string& val) {
  this->ackedLoginServerIp = val;
__isset.ackedLoginServerIp = true;
}

const char* VosdkVos::ascii_fingerprint = "E7AFFB9DAA27990C978A83997A826375";
const uint8_t VosdkVos::binary_fingerprint[16] = {0xE7,0xAF,0xFB,0x9D,0xAA,0x27,0x99,0x0C,0x97,0x8A,0x83,0x99,0x7A,0x82,0x63,0x75};

uint32_t VosdkVos::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ec);
          this->__isset.ec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sc);
          this->__isset.sc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverIp);
          this->__isset.serverIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vosList.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->vosList.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += iprot->readString(this->vosList[_i28]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vosList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->firstSuccess);
          this->__isset.firstSuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->channelCount);
          this->__isset.channelCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->responseTime);
          this->__isset.responseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ackedLoginServerIp);
          this->__isset.ackedLoginServerIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVos::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVos");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ec) {
    xfer += oprot->writeFieldBegin("ec", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->ec);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sc) {
    xfer += oprot->writeFieldBegin("sc", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->sc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverIp) {
    xfer += oprot->writeFieldBegin("serverIp", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->serverIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosList) {
    xfer += oprot->writeFieldBegin("vosList", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->vosList.size()));
      std::vector<std::string> ::const_iterator _iter29;
      for (_iter29 = this->vosList.begin(); _iter29 != this->vosList.end(); ++_iter29)
      {
        xfer += oprot->writeString((*_iter29));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstSuccess) {
    xfer += oprot->writeFieldBegin("firstSuccess", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->firstSuccess);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channelCount) {
    xfer += oprot->writeFieldBegin("channelCount", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->channelCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.responseTime) {
    xfer += oprot->writeFieldBegin("responseTime", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->responseTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ackedLoginServerIp) {
    xfer += oprot->writeFieldBegin("ackedLoginServerIp", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->ackedLoginServerIp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVos &a, VosdkVos &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.ec, b.ec);
  swap(a.sc, b.sc);
  swap(a.serverIp, b.serverIp);
  swap(a.vosList, b.vosList);
  swap(a.firstSuccess, b.firstSuccess);
  swap(a.channelCount, b.channelCount);
  swap(a.responseTime, b.responseTime);
  swap(a.ackedLoginServerIp, b.ackedLoginServerIp);
  swap(a.__isset, b.__isset);
}

VosdkVos::VosdkVos(const VosdkVos& other30) {
  header = other30.header;
  ec = other30.ec;
  sc = other30.sc;
  serverIp = other30.serverIp;
  vosList = other30.vosList;
  firstSuccess = other30.firstSuccess;
  channelCount = other30.channelCount;
  responseTime = other30.responseTime;
  ackedLoginServerIp = other30.ackedLoginServerIp;
  __isset = other30.__isset;
}
VosdkVos& VosdkVos::operator=(const VosdkVos& other31) {
  header = other31.header;
  ec = other31.ec;
  sc = other31.sc;
  serverIp = other31.serverIp;
  vosList = other31.vosList;
  firstSuccess = other31.firstSuccess;
  channelCount = other31.channelCount;
  responseTime = other31.responseTime;
  ackedLoginServerIp = other31.ackedLoginServerIp;
  __isset = other31.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVos& obj) {
  using apache::thrift::to_string;
  out << "VosdkVos(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "ec="; (obj.__isset.ec ? (out << to_string(obj.ec)) : (out << "<null>"));
  out << ", " << "sc="; (obj.__isset.sc ? (out << to_string(obj.sc)) : (out << "<null>"));
  out << ", " << "serverIp="; (obj.__isset.serverIp ? (out << to_string(obj.serverIp)) : (out << "<null>"));
  out << ", " << "vosList="; (obj.__isset.vosList ? (out << to_string(obj.vosList)) : (out << "<null>"));
  out << ", " << "firstSuccess="; (obj.__isset.firstSuccess ? (out << to_string(obj.firstSuccess)) : (out << "<null>"));
  out << ", " << "channelCount="; (obj.__isset.channelCount ? (out << to_string(obj.channelCount)) : (out << "<null>"));
  out << ", " << "responseTime="; (obj.__isset.responseTime ? (out << to_string(obj.responseTime)) : (out << "<null>"));
  out << ", " << "ackedLoginServerIp="; (obj.__isset.ackedLoginServerIp ? (out << to_string(obj.ackedLoginServerIp)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkChan::~VosdkChan() throw() {
}


void VosdkChan::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkChan::__set_chm(const int32_t val) {
  this->chm = val;
__isset.chm = true;
}

const char* VosdkChan::ascii_fingerprint = "A3C125E9D4C2CE588E8B4FA1A55E8113";
const uint8_t VosdkChan::binary_fingerprint[16] = {0xA3,0xC1,0x25,0xE9,0xD4,0xC2,0xCE,0x58,0x8E,0x8B,0x4F,0xA1,0xA5,0x5E,0x81,0x13};

uint32_t VosdkChan::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->chm);
          this->__isset.chm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkChan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkChan");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.chm) {
    xfer += oprot->writeFieldBegin("chm", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->chm);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkChan &a, VosdkChan &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.chm, b.chm);
  swap(a.__isset, b.__isset);
}

VosdkChan::VosdkChan(const VosdkChan& other32) {
  header = other32.header;
  chm = other32.chm;
  __isset = other32.__isset;
}
VosdkChan& VosdkChan::operator=(const VosdkChan& other33) {
  header = other33.header;
  chm = other33.chm;
  __isset = other33.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkChan& obj) {
  using apache::thrift::to_string;
  out << "VosdkChan(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "chm="; (obj.__isset.chm ? (out << to_string(obj.chm)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkQuit::~VosdkQuit() throw() {
}


void VosdkQuit::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkQuit::__set_dnsParsedTime(const int32_t val) {
  this->dnsParsedTime = val;
__isset.dnsParsedTime = true;
}

const char* VosdkQuit::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkQuit::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkQuit::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dnsParsedTime);
          this->__isset.dnsParsedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkQuit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkQuit");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dnsParsedTime) {
    xfer += oprot->writeFieldBegin("dnsParsedTime", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->dnsParsedTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkQuit &a, VosdkQuit &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.dnsParsedTime, b.dnsParsedTime);
  swap(a.__isset, b.__isset);
}

VosdkQuit::VosdkQuit(const VosdkQuit& other34) {
  header = other34.header;
  dnsParsedTime = other34.dnsParsedTime;
  __isset = other34.__isset;
}
VosdkQuit& VosdkQuit::operator=(const VosdkQuit& other35) {
  header = other35.header;
  dnsParsedTime = other35.dnsParsedTime;
  __isset = other35.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkQuit& obj) {
  using apache::thrift::to_string;
  out << "VosdkQuit(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "dnsParsedTime="; (obj.__isset.dnsParsedTime ? (out << to_string(obj.dnsParsedTime)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkPeer::~VosdkPeer() throw() {
}


void VosdkPeer::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkPeer::__set_peerUid(const int64_t val) {
  this->peerUid = val;
__isset.peerUid = true;
}

const char* VosdkPeer::ascii_fingerprint = "1DDE93193DBC99C1A6290B4A983847BB";
const uint8_t VosdkPeer::binary_fingerprint[16] = {0x1D,0xDE,0x93,0x19,0x3D,0xBC,0x99,0xC1,0xA6,0x29,0x0B,0x4A,0x98,0x38,0x47,0xBB};

uint32_t VosdkPeer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peerUid);
          this->__isset.peerUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkPeer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkPeer");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerUid) {
    xfer += oprot->writeFieldBegin("peerUid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->peerUid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkPeer &a, VosdkPeer &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerUid, b.peerUid);
  swap(a.__isset, b.__isset);
}

VosdkPeer::VosdkPeer(const VosdkPeer& other36) {
  header = other36.header;
  peerUid = other36.peerUid;
  __isset = other36.__isset;
}
VosdkPeer& VosdkPeer::operator=(const VosdkPeer& other37) {
  header = other37.header;
  peerUid = other37.peerUid;
  __isset = other37.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkPeer& obj) {
  using apache::thrift::to_string;
  out << "VosdkPeer(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerUid="; (obj.__isset.peerUid ? (out << to_string(obj.peerUid)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkViLocalFrame::~VosdkViLocalFrame() throw() {
}


void VosdkViLocalFrame::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkViLocalFrame::__set_height(const int32_t val) {
  this->height = val;
__isset.height = true;
}

void VosdkViLocalFrame::__set_width(const int32_t val) {
  this->width = val;
__isset.width = true;
}

const char* VosdkViLocalFrame::ascii_fingerprint = "C2AA7695D2D8E54277BD0F7525CE4E28";
const uint8_t VosdkViLocalFrame::binary_fingerprint[16] = {0xC2,0xAA,0x76,0x95,0xD2,0xD8,0xE5,0x42,0x77,0xBD,0x0F,0x75,0x25,0xCE,0x4E,0x28};

uint32_t VosdkViLocalFrame::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkViLocalFrame::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkViLocalFrame");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->height);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->width);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkViLocalFrame &a, VosdkViLocalFrame &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.height, b.height);
  swap(a.width, b.width);
  swap(a.__isset, b.__isset);
}

VosdkViLocalFrame::VosdkViLocalFrame(const VosdkViLocalFrame& other38) {
  header = other38.header;
  height = other38.height;
  width = other38.width;
  __isset = other38.__isset;
}
VosdkViLocalFrame& VosdkViLocalFrame::operator=(const VosdkViLocalFrame& other39) {
  header = other39.header;
  height = other39.height;
  width = other39.width;
  __isset = other39.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkViLocalFrame& obj) {
  using apache::thrift::to_string;
  out << "VosdkViLocalFrame(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "height="; (obj.__isset.height ? (out << to_string(obj.height)) : (out << "<null>"));
  out << ", " << "width="; (obj.__isset.width ? (out << to_string(obj.width)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkViRemoteFrame::~VosdkViRemoteFrame() throw() {
}


void VosdkViRemoteFrame::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkViRemoteFrame::__set_peerUid(const int64_t val) {
  this->peerUid = val;
__isset.peerUid = true;
}

void VosdkViRemoteFrame::__set_height(const int32_t val) {
  this->height = val;
__isset.height = true;
}

void VosdkViRemoteFrame::__set_width(const int32_t val) {
  this->width = val;
__isset.width = true;
}

void VosdkViRemoteFrame::__set_codec(const std::string& val) {
  this->codec = val;
__isset.codec = true;
}

const char* VosdkViRemoteFrame::ascii_fingerprint = "6CB918F11F86611AC4009DCEDDFFD419";
const uint8_t VosdkViRemoteFrame::binary_fingerprint[16] = {0x6C,0xB9,0x18,0xF1,0x1F,0x86,0x61,0x1A,0xC4,0x00,0x9D,0xCE,0xDD,0xFF,0xD4,0x19};

uint32_t VosdkViRemoteFrame::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peerUid);
          this->__isset.peerUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->codec);
          this->__isset.codec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkViRemoteFrame::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkViRemoteFrame");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerUid) {
    xfer += oprot->writeFieldBegin("peerUid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->peerUid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->height);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->width);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.codec) {
    xfer += oprot->writeFieldBegin("codec", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->codec);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkViRemoteFrame &a, VosdkViRemoteFrame &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerUid, b.peerUid);
  swap(a.height, b.height);
  swap(a.width, b.width);
  swap(a.codec, b.codec);
  swap(a.__isset, b.__isset);
}

VosdkViRemoteFrame::VosdkViRemoteFrame(const VosdkViRemoteFrame& other40) {
  header = other40.header;
  peerUid = other40.peerUid;
  height = other40.height;
  width = other40.width;
  codec = other40.codec;
  __isset = other40.__isset;
}
VosdkViRemoteFrame& VosdkViRemoteFrame::operator=(const VosdkViRemoteFrame& other41) {
  header = other41.header;
  peerUid = other41.peerUid;
  height = other41.height;
  width = other41.width;
  codec = other41.codec;
  __isset = other41.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkViRemoteFrame& obj) {
  using apache::thrift::to_string;
  out << "VosdkViRemoteFrame(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerUid="; (obj.__isset.peerUid ? (out << to_string(obj.peerUid)) : (out << "<null>"));
  out << ", " << "height="; (obj.__isset.height ? (out << to_string(obj.height)) : (out << "<null>"));
  out << ", " << "width="; (obj.__isset.width ? (out << to_string(obj.width)) : (out << "<null>"));
  out << ", " << "codec="; (obj.__isset.codec ? (out << to_string(obj.codec)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkRating::~VosdkRating() throw() {
}


void VosdkRating::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkRating::__set_vk(const std::string& val) {
  this->vk = val;
__isset.vk = true;
}

void VosdkRating::__set_rating(const int32_t val) {
  this->rating = val;
__isset.rating = true;
}

void VosdkRating::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

const char* VosdkRating::ascii_fingerprint = "9AE436FBDA836057ED20FAC6F6DFD029";
const uint8_t VosdkRating::binary_fingerprint[16] = {0x9A,0xE4,0x36,0xFB,0xDA,0x83,0x60,0x57,0xED,0x20,0xFA,0xC6,0xF6,0xDF,0xD0,0x29};

uint32_t VosdkRating::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vk);
          this->__isset.vk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rating);
          this->__isset.rating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkRating::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkRating");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vk) {
    xfer += oprot->writeFieldBegin("vk", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->vk);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rating) {
    xfer += oprot->writeFieldBegin("rating", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->rating);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkRating &a, VosdkRating &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.vk, b.vk);
  swap(a.rating, b.rating);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

VosdkRating::VosdkRating(const VosdkRating& other42) {
  header = other42.header;
  vk = other42.vk;
  rating = other42.rating;
  description = other42.description;
  __isset = other42.__isset;
}
VosdkRating& VosdkRating::operator=(const VosdkRating& other43) {
  header = other43.header;
  vk = other43.vk;
  rating = other43.rating;
  description = other43.description;
  __isset = other43.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkRating& obj) {
  using apache::thrift::to_string;
  out << "VosdkRating(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "vk="; (obj.__isset.vk ? (out << to_string(obj.vk)) : (out << "<null>"));
  out << ", " << "rating="; (obj.__isset.rating ? (out << to_string(obj.rating)) : (out << "<null>"));
  out << ", " << "description="; (obj.__isset.description ? (out << to_string(obj.description)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkACodec::~VosdkACodec() throw() {
}


void VosdkACodec::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkACodec::__set_codec(const std::string& val) {
  this->codec = val;
__isset.codec = true;
}

void VosdkACodec::__set_frames(const int32_t val) {
  this->frames = val;
__isset.frames = true;
}

void VosdkACodec::__set_interleaves(const int32_t val) {
  this->interleaves = val;
__isset.interleaves = true;
}

const char* VosdkACodec::ascii_fingerprint = "3539E5156CD68721059FAFADBFC753F2";
const uint8_t VosdkACodec::binary_fingerprint[16] = {0x35,0x39,0xE5,0x15,0x6C,0xD6,0x87,0x21,0x05,0x9F,0xAF,0xAD,0xBF,0xC7,0x53,0xF2};

uint32_t VosdkACodec::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->codec);
          this->__isset.codec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->frames);
          this->__isset.frames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->interleaves);
          this->__isset.interleaves = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkACodec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkACodec");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.codec) {
    xfer += oprot->writeFieldBegin("codec", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->codec);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.frames) {
    xfer += oprot->writeFieldBegin("frames", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->frames);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.interleaves) {
    xfer += oprot->writeFieldBegin("interleaves", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->interleaves);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkACodec &a, VosdkACodec &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.codec, b.codec);
  swap(a.frames, b.frames);
  swap(a.interleaves, b.interleaves);
  swap(a.__isset, b.__isset);
}

VosdkACodec::VosdkACodec(const VosdkACodec& other44) {
  header = other44.header;
  codec = other44.codec;
  frames = other44.frames;
  interleaves = other44.interleaves;
  __isset = other44.__isset;
}
VosdkACodec& VosdkACodec::operator=(const VosdkACodec& other45) {
  header = other45.header;
  codec = other45.codec;
  frames = other45.frames;
  interleaves = other45.interleaves;
  __isset = other45.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkACodec& obj) {
  using apache::thrift::to_string;
  out << "VosdkACodec(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "codec="; (obj.__isset.codec ? (out << to_string(obj.codec)) : (out << "<null>"));
  out << ", " << "frames="; (obj.__isset.frames ? (out << to_string(obj.frames)) : (out << "<null>"));
  out << ", " << "interleaves="; (obj.__isset.interleaves ? (out << to_string(obj.interleaves)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkNetOb::~VosdkNetOb() throw() {
}


void VosdkNetOb::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkNetOb::__set_payload(const std::string& val) {
  this->payload = val;
__isset.payload = true;
}

const char* VosdkNetOb::ascii_fingerprint = "7643AB8C86D47EFC29C9DADBFB748150";
const uint8_t VosdkNetOb::binary_fingerprint[16] = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

uint32_t VosdkNetOb::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkNetOb::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkNetOb");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.payload) {
    xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->payload);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkNetOb &a, VosdkNetOb &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

VosdkNetOb::VosdkNetOb(const VosdkNetOb& other46) {
  header = other46.header;
  payload = other46.payload;
  __isset = other46.__isset;
}
VosdkNetOb& VosdkNetOb::operator=(const VosdkNetOb& other47) {
  header = other47.header;
  payload = other47.payload;
  __isset = other47.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkNetOb& obj) {
  using apache::thrift::to_string;
  out << "VosdkNetOb(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "payload="; (obj.__isset.payload ? (out << to_string(obj.payload)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkDeviceStatChange::~VosdkDeviceStatChange() throw() {
}


void VosdkDeviceStatChange::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkDeviceStatChange::__set_deviceType(const int32_t val) {
  this->deviceType = val;
__isset.deviceType = true;
}

void VosdkDeviceStatChange::__set_StateType(const int32_t val) {
  this->StateType = val;
__isset.StateType = true;
}

void VosdkDeviceStatChange::__set_deviceId(const std::string& val) {
  this->deviceId = val;
__isset.deviceId = true;
}

void VosdkDeviceStatChange::__set_deviceName(const std::string& val) {
  this->deviceName = val;
__isset.deviceName = true;
}

const char* VosdkDeviceStatChange::ascii_fingerprint = "6D7C0B2CCDC035DA6FB336A2E7D6CDE2";
const uint8_t VosdkDeviceStatChange::binary_fingerprint[16] = {0x6D,0x7C,0x0B,0x2C,0xCD,0xC0,0x35,0xDA,0x6F,0xB3,0x36,0xA2,0xE7,0xD6,0xCD,0xE2};

uint32_t VosdkDeviceStatChange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deviceType);
          this->__isset.deviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->StateType);
          this->__isset.StateType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceName);
          this->__isset.deviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkDeviceStatChange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkDeviceStatChange");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deviceType) {
    xfer += oprot->writeFieldBegin("deviceType", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->deviceType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.StateType) {
    xfer += oprot->writeFieldBegin("StateType", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->StateType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deviceId) {
    xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->deviceId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deviceName) {
    xfer += oprot->writeFieldBegin("deviceName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->deviceName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkDeviceStatChange &a, VosdkDeviceStatChange &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.deviceType, b.deviceType);
  swap(a.StateType, b.StateType);
  swap(a.deviceId, b.deviceId);
  swap(a.deviceName, b.deviceName);
  swap(a.__isset, b.__isset);
}

VosdkDeviceStatChange::VosdkDeviceStatChange(const VosdkDeviceStatChange& other48) {
  header = other48.header;
  deviceType = other48.deviceType;
  StateType = other48.StateType;
  deviceId = other48.deviceId;
  deviceName = other48.deviceName;
  __isset = other48.__isset;
}
VosdkDeviceStatChange& VosdkDeviceStatChange::operator=(const VosdkDeviceStatChange& other49) {
  header = other49.header;
  deviceType = other49.deviceType;
  StateType = other49.StateType;
  deviceId = other49.deviceId;
  deviceName = other49.deviceName;
  __isset = other49.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkDeviceStatChange& obj) {
  using apache::thrift::to_string;
  out << "VosdkDeviceStatChange(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "deviceType="; (obj.__isset.deviceType ? (out << to_string(obj.deviceType)) : (out << "<null>"));
  out << ", " << "StateType="; (obj.__isset.StateType ? (out << to_string(obj.StateType)) : (out << "<null>"));
  out << ", " << "deviceId="; (obj.__isset.deviceId ? (out << to_string(obj.deviceId)) : (out << "<null>"));
  out << ", " << "deviceName="; (obj.__isset.deviceName ? (out << to_string(obj.deviceName)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkCameraInfoItem::~VosdkCameraInfoItem() throw() {
}


void VosdkCameraInfoItem::__set_friendName(const std::string& val) {
  this->friendName = val;
__isset.friendName = true;
}

void VosdkCameraInfoItem::__set_deviceId(const std::string& val) {
  this->deviceId = val;
__isset.deviceId = true;
}

void VosdkCameraInfoItem::__set_bUse(const bool val) {
  this->bUse = val;
__isset.bUse = true;
}

const char* VosdkCameraInfoItem::ascii_fingerprint = "D30446A4EF4CBC44073B8453AED65C54";
const uint8_t VosdkCameraInfoItem::binary_fingerprint[16] = {0xD3,0x04,0x46,0xA4,0xEF,0x4C,0xBC,0x44,0x07,0x3B,0x84,0x53,0xAE,0xD6,0x5C,0x54};

uint32_t VosdkCameraInfoItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->friendName);
          this->__isset.friendName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bUse);
          this->__isset.bUse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkCameraInfoItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkCameraInfoItem");

  if (this->__isset.friendName) {
    xfer += oprot->writeFieldBegin("friendName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->friendName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deviceId) {
    xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->deviceId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bUse) {
    xfer += oprot->writeFieldBegin("bUse", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->bUse);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkCameraInfoItem &a, VosdkCameraInfoItem &b) {
  using ::std::swap;
  swap(a.friendName, b.friendName);
  swap(a.deviceId, b.deviceId);
  swap(a.bUse, b.bUse);
  swap(a.__isset, b.__isset);
}

VosdkCameraInfoItem::VosdkCameraInfoItem(const VosdkCameraInfoItem& other50) {
  friendName = other50.friendName;
  deviceId = other50.deviceId;
  bUse = other50.bUse;
  __isset = other50.__isset;
}
VosdkCameraInfoItem& VosdkCameraInfoItem::operator=(const VosdkCameraInfoItem& other51) {
  friendName = other51.friendName;
  deviceId = other51.deviceId;
  bUse = other51.bUse;
  __isset = other51.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkCameraInfoItem& obj) {
  using apache::thrift::to_string;
  out << "VosdkCameraInfoItem(";
  out << "friendName="; (obj.__isset.friendName ? (out << to_string(obj.friendName)) : (out << "<null>"));
  out << ", " << "deviceId="; (obj.__isset.deviceId ? (out << to_string(obj.deviceId)) : (out << "<null>"));
  out << ", " << "bUse="; (obj.__isset.bUse ? (out << to_string(obj.bUse)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkCameraInfos::~VosdkCameraInfos() throw() {
}


void VosdkCameraInfos::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkCameraInfos::__set_items(const std::vector<VosdkCameraInfoItem> & val) {
  this->items = val;
__isset.items = true;
}

const char* VosdkCameraInfos::ascii_fingerprint = "107C4AB929D6266C3D0B54AC934D0CD9";
const uint8_t VosdkCameraInfos::binary_fingerprint[16] = {0x10,0x7C,0x4A,0xB9,0x29,0xD6,0x26,0x6C,0x3D,0x0B,0x54,0xAC,0x93,0x4D,0x0C,0xD9};

uint32_t VosdkCameraInfos::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size52;
            ::apache::thrift::protocol::TType _etype55;
            xfer += iprot->readListBegin(_etype55, _size52);
            this->items.resize(_size52);
            uint32_t _i56;
            for (_i56 = 0; _i56 < _size52; ++_i56)
            {
              xfer += this->items[_i56].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkCameraInfos::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkCameraInfos");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.items) {
    xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
      std::vector<VosdkCameraInfoItem> ::const_iterator _iter57;
      for (_iter57 = this->items.begin(); _iter57 != this->items.end(); ++_iter57)
      {
        xfer += (*_iter57).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkCameraInfos &a, VosdkCameraInfos &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.items, b.items);
  swap(a.__isset, b.__isset);
}

VosdkCameraInfos::VosdkCameraInfos(const VosdkCameraInfos& other58) {
  header = other58.header;
  items = other58.items;
  __isset = other58.__isset;
}
VosdkCameraInfos& VosdkCameraInfos::operator=(const VosdkCameraInfos& other59) {
  header = other59.header;
  items = other59.items;
  __isset = other59.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkCameraInfos& obj) {
  using apache::thrift::to_string;
  out << "VosdkCameraInfos(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "items="; (obj.__isset.items ? (out << to_string(obj.items)) : (out << "<null>"));
  out << ")";
  return out;
}


Vosb2s::~Vosb2s() throw() {
}


void Vosb2s::__set_vid(const int32_t val) {
  this->vid = val;
__isset.vid = true;
}

void Vosb2s::__set_cid(const int64_t val) {
  this->cid = val;
__isset.cid = true;
}

void Vosb2s::__set_uid(const int64_t val) {
  this->uid = val;
__isset.uid = true;
}

void Vosb2s::__set_vos_id(const int32_t val) {
  this->vos_id = val;
__isset.vos_id = true;
}

void Vosb2s::__set_source_ip(const int32_t val) {
  this->source_ip = val;
__isset.source_ip = true;
}

void Vosb2s::__set_source_port(const int16_t val) {
  this->source_port = val;
__isset.source_port = true;
}

void Vosb2s::__set_dest_ip(const int32_t val) {
  this->dest_ip = val;
__isset.dest_ip = true;
}

void Vosb2s::__set_dest_port(const int16_t val) {
  this->dest_port = val;
__isset.dest_port = true;
}

void Vosb2s::__set_delay(const int16_t val) {
  this->delay = val;
__isset.delay = true;
}

void Vosb2s::__set_jitter100(const int16_t val) {
  this->jitter100 = val;
__isset.jitter100 = true;
}

void Vosb2s::__set_jitter95(const int16_t val) {
  this->jitter95 = val;
__isset.jitter95 = true;
}

void Vosb2s::__set_jitter90(const int16_t val) {
  this->jitter90 = val;
__isset.jitter90 = true;
}

void Vosb2s::__set_lost_ratio(const int16_t val) {
  this->lost_ratio = val;
__isset.lost_ratio = true;
}

void Vosb2s::__set_lost_ratio2(const int16_t val) {
  this->lost_ratio2 = val;
__isset.lost_ratio2 = true;
}

void Vosb2s::__set_lost_ratio3(const int16_t val) {
  this->lost_ratio3 = val;
__isset.lost_ratio3 = true;
}

void Vosb2s::__set_lts(const int64_t val) {
  this->lts = val;
__isset.lts = true;
}

const char* Vosb2s::ascii_fingerprint = "F907E8B0823F6A24D16532680D9FE79E";
const uint8_t Vosb2s::binary_fingerprint[16] = {0xF9,0x07,0xE8,0xB0,0x82,0x3F,0x6A,0x24,0xD1,0x65,0x32,0x68,0x0D,0x9F,0xE7,0x9E};

uint32_t Vosb2s::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cid);
          this->__isset.cid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vos_id);
          this->__isset.vos_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->source_ip);
          this->__isset.source_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->source_port);
          this->__isset.source_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dest_ip);
          this->__isset.dest_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->dest_port);
          this->__isset.dest_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->delay);
          this->__isset.delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter100);
          this->__isset.jitter100 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter95);
          this->__isset.jitter95 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter90);
          this->__isset.jitter90 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio);
          this->__isset.lost_ratio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio2);
          this->__isset.lost_ratio2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio3);
          this->__isset.lost_ratio3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lts);
          this->__isset.lts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Vosb2s::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Vosb2s");

  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cid) {
    xfer += oprot->writeFieldBegin("cid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->cid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vos_id) {
    xfer += oprot->writeFieldBegin("vos_id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->vos_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source_ip) {
    xfer += oprot->writeFieldBegin("source_ip", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->source_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source_port) {
    xfer += oprot->writeFieldBegin("source_port", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->source_port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dest_ip) {
    xfer += oprot->writeFieldBegin("dest_ip", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->dest_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dest_port) {
    xfer += oprot->writeFieldBegin("dest_port", ::apache::thrift::protocol::T_I16, 8);
    xfer += oprot->writeI16(this->dest_port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.delay) {
    xfer += oprot->writeFieldBegin("delay", ::apache::thrift::protocol::T_I16, 9);
    xfer += oprot->writeI16(this->delay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter100) {
    xfer += oprot->writeFieldBegin("jitter100", ::apache::thrift::protocol::T_I16, 10);
    xfer += oprot->writeI16(this->jitter100);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter95) {
    xfer += oprot->writeFieldBegin("jitter95", ::apache::thrift::protocol::T_I16, 11);
    xfer += oprot->writeI16(this->jitter95);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter90) {
    xfer += oprot->writeFieldBegin("jitter90", ::apache::thrift::protocol::T_I16, 12);
    xfer += oprot->writeI16(this->jitter90);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio) {
    xfer += oprot->writeFieldBegin("lost_ratio", ::apache::thrift::protocol::T_I16, 13);
    xfer += oprot->writeI16(this->lost_ratio);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio2) {
    xfer += oprot->writeFieldBegin("lost_ratio2", ::apache::thrift::protocol::T_I16, 14);
    xfer += oprot->writeI16(this->lost_ratio2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio3) {
    xfer += oprot->writeFieldBegin("lost_ratio3", ::apache::thrift::protocol::T_I16, 15);
    xfer += oprot->writeI16(this->lost_ratio3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lts) {
    xfer += oprot->writeFieldBegin("lts", ::apache::thrift::protocol::T_I64, 16);
    xfer += oprot->writeI64(this->lts);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Vosb2s &a, Vosb2s &b) {
  using ::std::swap;
  swap(a.vid, b.vid);
  swap(a.cid, b.cid);
  swap(a.uid, b.uid);
  swap(a.vos_id, b.vos_id);
  swap(a.source_ip, b.source_ip);
  swap(a.source_port, b.source_port);
  swap(a.dest_ip, b.dest_ip);
  swap(a.dest_port, b.dest_port);
  swap(a.delay, b.delay);
  swap(a.jitter100, b.jitter100);
  swap(a.jitter95, b.jitter95);
  swap(a.jitter90, b.jitter90);
  swap(a.lost_ratio, b.lost_ratio);
  swap(a.lost_ratio2, b.lost_ratio2);
  swap(a.lost_ratio3, b.lost_ratio3);
  swap(a.lts, b.lts);
  swap(a.__isset, b.__isset);
}

Vosb2s::Vosb2s(const Vosb2s& other60) {
  vid = other60.vid;
  cid = other60.cid;
  uid = other60.uid;
  vos_id = other60.vos_id;
  source_ip = other60.source_ip;
  source_port = other60.source_port;
  dest_ip = other60.dest_ip;
  dest_port = other60.dest_port;
  delay = other60.delay;
  jitter100 = other60.jitter100;
  jitter95 = other60.jitter95;
  jitter90 = other60.jitter90;
  lost_ratio = other60.lost_ratio;
  lost_ratio2 = other60.lost_ratio2;
  lost_ratio3 = other60.lost_ratio3;
  lts = other60.lts;
  __isset = other60.__isset;
}
Vosb2s& Vosb2s::operator=(const Vosb2s& other61) {
  vid = other61.vid;
  cid = other61.cid;
  uid = other61.uid;
  vos_id = other61.vos_id;
  source_ip = other61.source_ip;
  source_port = other61.source_port;
  dest_ip = other61.dest_ip;
  dest_port = other61.dest_port;
  delay = other61.delay;
  jitter100 = other61.jitter100;
  jitter95 = other61.jitter95;
  jitter90 = other61.jitter90;
  lost_ratio = other61.lost_ratio;
  lost_ratio2 = other61.lost_ratio2;
  lost_ratio3 = other61.lost_ratio3;
  lts = other61.lts;
  __isset = other61.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Vosb2s& obj) {
  using apache::thrift::to_string;
  out << "Vosb2s(";
  out << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ", " << "cid="; (obj.__isset.cid ? (out << to_string(obj.cid)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "vos_id="; (obj.__isset.vos_id ? (out << to_string(obj.vos_id)) : (out << "<null>"));
  out << ", " << "source_ip="; (obj.__isset.source_ip ? (out << to_string(obj.source_ip)) : (out << "<null>"));
  out << ", " << "source_port="; (obj.__isset.source_port ? (out << to_string(obj.source_port)) : (out << "<null>"));
  out << ", " << "dest_ip="; (obj.__isset.dest_ip ? (out << to_string(obj.dest_ip)) : (out << "<null>"));
  out << ", " << "dest_port="; (obj.__isset.dest_port ? (out << to_string(obj.dest_port)) : (out << "<null>"));
  out << ", " << "delay="; (obj.__isset.delay ? (out << to_string(obj.delay)) : (out << "<null>"));
  out << ", " << "jitter100="; (obj.__isset.jitter100 ? (out << to_string(obj.jitter100)) : (out << "<null>"));
  out << ", " << "jitter95="; (obj.__isset.jitter95 ? (out << to_string(obj.jitter95)) : (out << "<null>"));
  out << ", " << "jitter90="; (obj.__isset.jitter90 ? (out << to_string(obj.jitter90)) : (out << "<null>"));
  out << ", " << "lost_ratio="; (obj.__isset.lost_ratio ? (out << to_string(obj.lost_ratio)) : (out << "<null>"));
  out << ", " << "lost_ratio2="; (obj.__isset.lost_ratio2 ? (out << to_string(obj.lost_ratio2)) : (out << "<null>"));
  out << ", " << "lost_ratio3="; (obj.__isset.lost_ratio3 ? (out << to_string(obj.lost_ratio3)) : (out << "<null>"));
  out << ", " << "lts="; (obj.__isset.lts ? (out << to_string(obj.lts)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcBrowser2Gateway::~WrtcBrowser2Gateway() throw() {
}


void WrtcBrowser2Gateway::__set_vid(const int32_t val) {
  this->vid = val;
__isset.vid = true;
}

void WrtcBrowser2Gateway::__set_cid(const int64_t val) {
  this->cid = val;
__isset.cid = true;
}

void WrtcBrowser2Gateway::__set_uid(const int64_t val) {
  this->uid = val;
__isset.uid = true;
}

void WrtcBrowser2Gateway::__set_vos_id(const int32_t val) {
  this->vos_id = val;
__isset.vos_id = true;
}

void WrtcBrowser2Gateway::__set_source_ip(const int32_t val) {
  this->source_ip = val;
__isset.source_ip = true;
}

void WrtcBrowser2Gateway::__set_source_port(const int16_t val) {
  this->source_port = val;
__isset.source_port = true;
}

void WrtcBrowser2Gateway::__set_dest_ip(const int32_t val) {
  this->dest_ip = val;
__isset.dest_ip = true;
}

void WrtcBrowser2Gateway::__set_dest_port(const int16_t val) {
  this->dest_port = val;
__isset.dest_port = true;
}

void WrtcBrowser2Gateway::__set_delay(const int16_t val) {
  this->delay = val;
__isset.delay = true;
}

void WrtcBrowser2Gateway::__set_jitter100(const int16_t val) {
  this->jitter100 = val;
__isset.jitter100 = true;
}

void WrtcBrowser2Gateway::__set_jitter95(const int16_t val) {
  this->jitter95 = val;
__isset.jitter95 = true;
}

void WrtcBrowser2Gateway::__set_jitter90(const int16_t val) {
  this->jitter90 = val;
__isset.jitter90 = true;
}

void WrtcBrowser2Gateway::__set_lost_ratio(const int16_t val) {
  this->lost_ratio = val;
__isset.lost_ratio = true;
}

void WrtcBrowser2Gateway::__set_lost_ratio2(const int16_t val) {
  this->lost_ratio2 = val;
__isset.lost_ratio2 = true;
}

void WrtcBrowser2Gateway::__set_lost_ratio3(const int16_t val) {
  this->lost_ratio3 = val;
__isset.lost_ratio3 = true;
}

void WrtcBrowser2Gateway::__set_lts(const int64_t val) {
  this->lts = val;
__isset.lts = true;
}

const char* WrtcBrowser2Gateway::ascii_fingerprint = "F907E8B0823F6A24D16532680D9FE79E";
const uint8_t WrtcBrowser2Gateway::binary_fingerprint[16] = {0xF9,0x07,0xE8,0xB0,0x82,0x3F,0x6A,0x24,0xD1,0x65,0x32,0x68,0x0D,0x9F,0xE7,0x9E};

uint32_t WrtcBrowser2Gateway::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cid);
          this->__isset.cid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vos_id);
          this->__isset.vos_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->source_ip);
          this->__isset.source_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->source_port);
          this->__isset.source_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dest_ip);
          this->__isset.dest_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->dest_port);
          this->__isset.dest_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->delay);
          this->__isset.delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter100);
          this->__isset.jitter100 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter95);
          this->__isset.jitter95 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->jitter90);
          this->__isset.jitter90 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio);
          this->__isset.lost_ratio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio2);
          this->__isset.lost_ratio2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lost_ratio3);
          this->__isset.lost_ratio3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lts);
          this->__isset.lts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcBrowser2Gateway::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcBrowser2Gateway");

  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cid) {
    xfer += oprot->writeFieldBegin("cid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->cid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vos_id) {
    xfer += oprot->writeFieldBegin("vos_id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->vos_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source_ip) {
    xfer += oprot->writeFieldBegin("source_ip", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->source_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source_port) {
    xfer += oprot->writeFieldBegin("source_port", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->source_port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dest_ip) {
    xfer += oprot->writeFieldBegin("dest_ip", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->dest_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dest_port) {
    xfer += oprot->writeFieldBegin("dest_port", ::apache::thrift::protocol::T_I16, 8);
    xfer += oprot->writeI16(this->dest_port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.delay) {
    xfer += oprot->writeFieldBegin("delay", ::apache::thrift::protocol::T_I16, 9);
    xfer += oprot->writeI16(this->delay);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter100) {
    xfer += oprot->writeFieldBegin("jitter100", ::apache::thrift::protocol::T_I16, 10);
    xfer += oprot->writeI16(this->jitter100);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter95) {
    xfer += oprot->writeFieldBegin("jitter95", ::apache::thrift::protocol::T_I16, 11);
    xfer += oprot->writeI16(this->jitter95);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jitter90) {
    xfer += oprot->writeFieldBegin("jitter90", ::apache::thrift::protocol::T_I16, 12);
    xfer += oprot->writeI16(this->jitter90);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio) {
    xfer += oprot->writeFieldBegin("lost_ratio", ::apache::thrift::protocol::T_I16, 13);
    xfer += oprot->writeI16(this->lost_ratio);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio2) {
    xfer += oprot->writeFieldBegin("lost_ratio2", ::apache::thrift::protocol::T_I16, 14);
    xfer += oprot->writeI16(this->lost_ratio2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lost_ratio3) {
    xfer += oprot->writeFieldBegin("lost_ratio3", ::apache::thrift::protocol::T_I16, 15);
    xfer += oprot->writeI16(this->lost_ratio3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lts) {
    xfer += oprot->writeFieldBegin("lts", ::apache::thrift::protocol::T_I64, 16);
    xfer += oprot->writeI64(this->lts);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcBrowser2Gateway &a, WrtcBrowser2Gateway &b) {
  using ::std::swap;
  swap(a.vid, b.vid);
  swap(a.cid, b.cid);
  swap(a.uid, b.uid);
  swap(a.vos_id, b.vos_id);
  swap(a.source_ip, b.source_ip);
  swap(a.source_port, b.source_port);
  swap(a.dest_ip, b.dest_ip);
  swap(a.dest_port, b.dest_port);
  swap(a.delay, b.delay);
  swap(a.jitter100, b.jitter100);
  swap(a.jitter95, b.jitter95);
  swap(a.jitter90, b.jitter90);
  swap(a.lost_ratio, b.lost_ratio);
  swap(a.lost_ratio2, b.lost_ratio2);
  swap(a.lost_ratio3, b.lost_ratio3);
  swap(a.lts, b.lts);
  swap(a.__isset, b.__isset);
}

WrtcBrowser2Gateway::WrtcBrowser2Gateway(const WrtcBrowser2Gateway& other62) {
  vid = other62.vid;
  cid = other62.cid;
  uid = other62.uid;
  vos_id = other62.vos_id;
  source_ip = other62.source_ip;
  source_port = other62.source_port;
  dest_ip = other62.dest_ip;
  dest_port = other62.dest_port;
  delay = other62.delay;
  jitter100 = other62.jitter100;
  jitter95 = other62.jitter95;
  jitter90 = other62.jitter90;
  lost_ratio = other62.lost_ratio;
  lost_ratio2 = other62.lost_ratio2;
  lost_ratio3 = other62.lost_ratio3;
  lts = other62.lts;
  __isset = other62.__isset;
}
WrtcBrowser2Gateway& WrtcBrowser2Gateway::operator=(const WrtcBrowser2Gateway& other63) {
  vid = other63.vid;
  cid = other63.cid;
  uid = other63.uid;
  vos_id = other63.vos_id;
  source_ip = other63.source_ip;
  source_port = other63.source_port;
  dest_ip = other63.dest_ip;
  dest_port = other63.dest_port;
  delay = other63.delay;
  jitter100 = other63.jitter100;
  jitter95 = other63.jitter95;
  jitter90 = other63.jitter90;
  lost_ratio = other63.lost_ratio;
  lost_ratio2 = other63.lost_ratio2;
  lost_ratio3 = other63.lost_ratio3;
  lts = other63.lts;
  __isset = other63.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcBrowser2Gateway& obj) {
  using apache::thrift::to_string;
  out << "WrtcBrowser2Gateway(";
  out << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ", " << "cid="; (obj.__isset.cid ? (out << to_string(obj.cid)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "vos_id="; (obj.__isset.vos_id ? (out << to_string(obj.vos_id)) : (out << "<null>"));
  out << ", " << "source_ip="; (obj.__isset.source_ip ? (out << to_string(obj.source_ip)) : (out << "<null>"));
  out << ", " << "source_port="; (obj.__isset.source_port ? (out << to_string(obj.source_port)) : (out << "<null>"));
  out << ", " << "dest_ip="; (obj.__isset.dest_ip ? (out << to_string(obj.dest_ip)) : (out << "<null>"));
  out << ", " << "dest_port="; (obj.__isset.dest_port ? (out << to_string(obj.dest_port)) : (out << "<null>"));
  out << ", " << "delay="; (obj.__isset.delay ? (out << to_string(obj.delay)) : (out << "<null>"));
  out << ", " << "jitter100="; (obj.__isset.jitter100 ? (out << to_string(obj.jitter100)) : (out << "<null>"));
  out << ", " << "jitter95="; (obj.__isset.jitter95 ? (out << to_string(obj.jitter95)) : (out << "<null>"));
  out << ", " << "jitter90="; (obj.__isset.jitter90 ? (out << to_string(obj.jitter90)) : (out << "<null>"));
  out << ", " << "lost_ratio="; (obj.__isset.lost_ratio ? (out << to_string(obj.lost_ratio)) : (out << "<null>"));
  out << ", " << "lost_ratio2="; (obj.__isset.lost_ratio2 ? (out << to_string(obj.lost_ratio2)) : (out << "<null>"));
  out << ", " << "lost_ratio3="; (obj.__isset.lost_ratio3 ? (out << to_string(obj.lost_ratio3)) : (out << "<null>"));
  out << ", " << "lts="; (obj.__isset.lts ? (out << to_string(obj.lts)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcProfile::~WrtcProfile() throw() {
}


void WrtcProfile::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WrtcProfile::__set_framerate(const int16_t val) {
  this->framerate = val;
__isset.framerate = true;
}

void WrtcProfile::__set_bitrate(const int32_t val) {
  this->bitrate = val;
__isset.bitrate = true;
}

void WrtcProfile::__set_width(const int32_t val) {
  this->width = val;
__isset.width = true;
}

void WrtcProfile::__set_height(const int32_t val) {
  this->height = val;
__isset.height = true;
}

const char* WrtcProfile::ascii_fingerprint = "18DF9D190D8E9E00A48E0285B6130426";
const uint8_t WrtcProfile::binary_fingerprint[16] = {0x18,0xDF,0x9D,0x19,0x0D,0x8E,0x9E,0x00,0xA4,0x8E,0x02,0x85,0xB6,0x13,0x04,0x26};

uint32_t WrtcProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->framerate);
          this->__isset.framerate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bitrate);
          this->__isset.bitrate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcProfile");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.framerate) {
    xfer += oprot->writeFieldBegin("framerate", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->framerate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bitrate) {
    xfer += oprot->writeFieldBegin("bitrate", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->bitrate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->width);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->height);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcProfile &a, WrtcProfile &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.framerate, b.framerate);
  swap(a.bitrate, b.bitrate);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.__isset, b.__isset);
}

WrtcProfile::WrtcProfile(const WrtcProfile& other64) {
  header = other64.header;
  framerate = other64.framerate;
  bitrate = other64.bitrate;
  width = other64.width;
  height = other64.height;
  __isset = other64.__isset;
}
WrtcProfile& WrtcProfile::operator=(const WrtcProfile& other65) {
  header = other65.header;
  framerate = other65.framerate;
  bitrate = other65.bitrate;
  width = other65.width;
  height = other65.height;
  __isset = other65.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcProfile& obj) {
  using apache::thrift::to_string;
  out << "WrtcProfile(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "framerate="; (obj.__isset.framerate ? (out << to_string(obj.framerate)) : (out << "<null>"));
  out << ", " << "bitrate="; (obj.__isset.bitrate ? (out << to_string(obj.bitrate)) : (out << "<null>"));
  out << ", " << "width="; (obj.__isset.width ? (out << to_string(obj.width)) : (out << "<null>"));
  out << ", " << "height="; (obj.__isset.height ? (out << to_string(obj.height)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcPubStream::~WrtcPubStream() throw() {
}


void WrtcPubStream::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WrtcPubStream::__set_audio(const bool val) {
  this->audio = val;
__isset.audio = true;
}

void WrtcPubStream::__set_video(const bool val) {
  this->video = val;
__isset.video = true;
}

const char* WrtcPubStream::ascii_fingerprint = "D9ACD16268569EC75DBC65313B619291";
const uint8_t WrtcPubStream::binary_fingerprint[16] = {0xD9,0xAC,0xD1,0x62,0x68,0x56,0x9E,0xC7,0x5D,0xBC,0x65,0x31,0x3B,0x61,0x92,0x91};

uint32_t WrtcPubStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->audio);
          this->__isset.audio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->video);
          this->__isset.video = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcPubStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcPubStream");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.audio) {
    xfer += oprot->writeFieldBegin("audio", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->audio);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.video) {
    xfer += oprot->writeFieldBegin("video", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->video);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcPubStream &a, WrtcPubStream &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.audio, b.audio);
  swap(a.video, b.video);
  swap(a.__isset, b.__isset);
}

WrtcPubStream::WrtcPubStream(const WrtcPubStream& other66) {
  header = other66.header;
  audio = other66.audio;
  video = other66.video;
  __isset = other66.__isset;
}
WrtcPubStream& WrtcPubStream::operator=(const WrtcPubStream& other67) {
  header = other67.header;
  audio = other67.audio;
  video = other67.video;
  __isset = other67.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcPubStream& obj) {
  using apache::thrift::to_string;
  out << "WrtcPubStream(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "audio="; (obj.__isset.audio ? (out << to_string(obj.audio)) : (out << "<null>"));
  out << ", " << "video="; (obj.__isset.video ? (out << to_string(obj.video)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcUnpubStream::~WrtcUnpubStream() throw() {
}


void WrtcUnpubStream::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

const char* WrtcUnpubStream::ascii_fingerprint = "C3D41A67DB60E8E4C8D244D93F311688";
const uint8_t WrtcUnpubStream::binary_fingerprint[16] = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

uint32_t WrtcUnpubStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcUnpubStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcUnpubStream");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcUnpubStream &a, WrtcUnpubStream &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

WrtcUnpubStream::WrtcUnpubStream(const WrtcUnpubStream& other68) {
  header = other68.header;
  __isset = other68.__isset;
}
WrtcUnpubStream& WrtcUnpubStream::operator=(const WrtcUnpubStream& other69) {
  header = other69.header;
  __isset = other69.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcUnpubStream& obj) {
  using apache::thrift::to_string;
  out << "WrtcUnpubStream(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcSubStream::~WrtcSubStream() throw() {
}


void WrtcSubStream::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WrtcSubStream::__set_peerUid(const int64_t val) {
  this->peerUid = val;
__isset.peerUid = true;
}

const char* WrtcSubStream::ascii_fingerprint = "1DDE93193DBC99C1A6290B4A983847BB";
const uint8_t WrtcSubStream::binary_fingerprint[16] = {0x1D,0xDE,0x93,0x19,0x3D,0xBC,0x99,0xC1,0xA6,0x29,0x0B,0x4A,0x98,0x38,0x47,0xBB};

uint32_t WrtcSubStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peerUid);
          this->__isset.peerUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcSubStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcSubStream");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerUid) {
    xfer += oprot->writeFieldBegin("peerUid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->peerUid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcSubStream &a, WrtcSubStream &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerUid, b.peerUid);
  swap(a.__isset, b.__isset);
}

WrtcSubStream::WrtcSubStream(const WrtcSubStream& other70) {
  header = other70.header;
  peerUid = other70.peerUid;
  __isset = other70.__isset;
}
WrtcSubStream& WrtcSubStream::operator=(const WrtcSubStream& other71) {
  header = other71.header;
  peerUid = other71.peerUid;
  __isset = other71.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcSubStream& obj) {
  using apache::thrift::to_string;
  out << "WrtcSubStream(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerUid="; (obj.__isset.peerUid ? (out << to_string(obj.peerUid)) : (out << "<null>"));
  out << ")";
  return out;
}


WrtcUnsubStream::~WrtcUnsubStream() throw() {
}


void WrtcUnsubStream::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WrtcUnsubStream::__set_peerUid(const int64_t val) {
  this->peerUid = val;
__isset.peerUid = true;
}

const char* WrtcUnsubStream::ascii_fingerprint = "1DDE93193DBC99C1A6290B4A983847BB";
const uint8_t WrtcUnsubStream::binary_fingerprint[16] = {0x1D,0xDE,0x93,0x19,0x3D,0xBC,0x99,0xC1,0xA6,0x29,0x0B,0x4A,0x98,0x38,0x47,0xBB};

uint32_t WrtcUnsubStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peerUid);
          this->__isset.peerUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WrtcUnsubStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WrtcUnsubStream");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerUid) {
    xfer += oprot->writeFieldBegin("peerUid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->peerUid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WrtcUnsubStream &a, WrtcUnsubStream &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerUid, b.peerUid);
  swap(a.__isset, b.__isset);
}

WrtcUnsubStream::WrtcUnsubStream(const WrtcUnsubStream& other72) {
  header = other72.header;
  peerUid = other72.peerUid;
  __isset = other72.__isset;
}
WrtcUnsubStream& WrtcUnsubStream::operator=(const WrtcUnsubStream& other73) {
  header = other73.header;
  peerUid = other73.peerUid;
  __isset = other73.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WrtcUnsubStream& obj) {
  using apache::thrift::to_string;
  out << "WrtcUnsubStream(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerUid="; (obj.__isset.peerUid ? (out << to_string(obj.peerUid)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PStartStun::~VosdkP2PStartStun() throw() {
}


void VosdkP2PStartStun::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PStartStun::__set_peerUid(const int64_t val) {
  this->peerUid = val;
__isset.peerUid = true;
}

void VosdkP2PStartStun::__set_openTs(const int64_t val) {
  this->openTs = val;
__isset.openTs = true;
}

void VosdkP2PStartStun::__set_joinIceTs(const int64_t val) {
  this->joinIceTs = val;
__isset.joinIceTs = true;
}

const char* VosdkP2PStartStun::ascii_fingerprint = "619018CD0DCDD45F7B45508E3E6F21CA";
const uint8_t VosdkP2PStartStun::binary_fingerprint[16] = {0x61,0x90,0x18,0xCD,0x0D,0xCD,0xD4,0x5F,0x7B,0x45,0x50,0x8E,0x3E,0x6F,0x21,0xCA};

uint32_t VosdkP2PStartStun::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peerUid);
          this->__isset.peerUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->openTs);
          this->__isset.openTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->joinIceTs);
          this->__isset.joinIceTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PStartStun::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PStartStun");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerUid) {
    xfer += oprot->writeFieldBegin("peerUid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->peerUid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openTs) {
    xfer += oprot->writeFieldBegin("openTs", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->openTs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.joinIceTs) {
    xfer += oprot->writeFieldBegin("joinIceTs", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->joinIceTs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PStartStun &a, VosdkP2PStartStun &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerUid, b.peerUid);
  swap(a.openTs, b.openTs);
  swap(a.joinIceTs, b.joinIceTs);
  swap(a.__isset, b.__isset);
}

VosdkP2PStartStun::VosdkP2PStartStun(const VosdkP2PStartStun& other74) {
  header = other74.header;
  peerUid = other74.peerUid;
  openTs = other74.openTs;
  joinIceTs = other74.joinIceTs;
  __isset = other74.__isset;
}
VosdkP2PStartStun& VosdkP2PStartStun::operator=(const VosdkP2PStartStun& other75) {
  header = other75.header;
  peerUid = other75.peerUid;
  openTs = other75.openTs;
  joinIceTs = other75.joinIceTs;
  __isset = other75.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PStartStun& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PStartStun(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerUid="; (obj.__isset.peerUid ? (out << to_string(obj.peerUid)) : (out << "<null>"));
  out << ", " << "openTs="; (obj.__isset.openTs ? (out << to_string(obj.openTs)) : (out << "<null>"));
  out << ", " << "joinIceTs="; (obj.__isset.joinIceTs ? (out << to_string(obj.joinIceTs)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PSendDataBeginning::~VosdkP2PSendDataBeginning() throw() {
}


void VosdkP2PSendDataBeginning::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PSendDataBeginning::__set_peerUid(const int64_t val) {
  this->peerUid = val;
__isset.peerUid = true;
}

void VosdkP2PSendDataBeginning::__set_openTs(const int64_t val) {
  this->openTs = val;
__isset.openTs = true;
}

void VosdkP2PSendDataBeginning::__set_joinIceTs(const int64_t val) {
  this->joinIceTs = val;
__isset.joinIceTs = true;
}

void VosdkP2PSendDataBeginning::__set_startStunTs(const int64_t val) {
  this->startStunTs = val;
__isset.startStunTs = true;
}

void VosdkP2PSendDataBeginning::__set_succStunTs(const int64_t val) {
  this->succStunTs = val;
__isset.succStunTs = true;
}

const char* VosdkP2PSendDataBeginning::ascii_fingerprint = "EE81139DF93BE0BF4A532F267E1F5FA3";
const uint8_t VosdkP2PSendDataBeginning::binary_fingerprint[16] = {0xEE,0x81,0x13,0x9D,0xF9,0x3B,0xE0,0xBF,0x4A,0x53,0x2F,0x26,0x7E,0x1F,0x5F,0xA3};

uint32_t VosdkP2PSendDataBeginning::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peerUid);
          this->__isset.peerUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->openTs);
          this->__isset.openTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->joinIceTs);
          this->__isset.joinIceTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startStunTs);
          this->__isset.startStunTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->succStunTs);
          this->__isset.succStunTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PSendDataBeginning::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PSendDataBeginning");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerUid) {
    xfer += oprot->writeFieldBegin("peerUid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->peerUid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openTs) {
    xfer += oprot->writeFieldBegin("openTs", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->openTs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.joinIceTs) {
    xfer += oprot->writeFieldBegin("joinIceTs", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->joinIceTs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startStunTs) {
    xfer += oprot->writeFieldBegin("startStunTs", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->startStunTs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.succStunTs) {
    xfer += oprot->writeFieldBegin("succStunTs", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->succStunTs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PSendDataBeginning &a, VosdkP2PSendDataBeginning &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerUid, b.peerUid);
  swap(a.openTs, b.openTs);
  swap(a.joinIceTs, b.joinIceTs);
  swap(a.startStunTs, b.startStunTs);
  swap(a.succStunTs, b.succStunTs);
  swap(a.__isset, b.__isset);
}

VosdkP2PSendDataBeginning::VosdkP2PSendDataBeginning(const VosdkP2PSendDataBeginning& other76) {
  header = other76.header;
  peerUid = other76.peerUid;
  openTs = other76.openTs;
  joinIceTs = other76.joinIceTs;
  startStunTs = other76.startStunTs;
  succStunTs = other76.succStunTs;
  __isset = other76.__isset;
}
VosdkP2PSendDataBeginning& VosdkP2PSendDataBeginning::operator=(const VosdkP2PSendDataBeginning& other77) {
  header = other77.header;
  peerUid = other77.peerUid;
  openTs = other77.openTs;
  joinIceTs = other77.joinIceTs;
  startStunTs = other77.startStunTs;
  succStunTs = other77.succStunTs;
  __isset = other77.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PSendDataBeginning& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PSendDataBeginning(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerUid="; (obj.__isset.peerUid ? (out << to_string(obj.peerUid)) : (out << "<null>"));
  out << ", " << "openTs="; (obj.__isset.openTs ? (out << to_string(obj.openTs)) : (out << "<null>"));
  out << ", " << "joinIceTs="; (obj.__isset.joinIceTs ? (out << to_string(obj.joinIceTs)) : (out << "<null>"));
  out << ", " << "startStunTs="; (obj.__isset.startStunTs ? (out << to_string(obj.startStunTs)) : (out << "<null>"));
  out << ", " << "succStunTs="; (obj.__isset.succStunTs ? (out << to_string(obj.succStunTs)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PJoinIce::~VosdkP2PJoinIce() throw() {
}


void VosdkP2PJoinIce::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PJoinIce::__set_peerUid(const int64_t val) {
  this->peerUid = val;
__isset.peerUid = true;
}

void VosdkP2PJoinIce::__set_openTs(const int64_t val) {
  this->openTs = val;
__isset.openTs = true;
}

void VosdkP2PJoinIce::__set_externalAddresses(const std::map<std::string, std::string> & val) {
  this->externalAddresses = val;
__isset.externalAddresses = true;
}

void VosdkP2PJoinIce::__set_localAddress(const std::vector<std::string> & val) {
  this->localAddress = val;
__isset.localAddress = true;
}

const char* VosdkP2PJoinIce::ascii_fingerprint = "41D4FB8E26A3BC4CF6964C6562FDEC13";
const uint8_t VosdkP2PJoinIce::binary_fingerprint[16] = {0x41,0xD4,0xFB,0x8E,0x26,0xA3,0xBC,0x4C,0xF6,0x96,0x4C,0x65,0x62,0xFD,0xEC,0x13};

uint32_t VosdkP2PJoinIce::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peerUid);
          this->__isset.peerUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->openTs);
          this->__isset.openTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->externalAddresses.clear();
            uint32_t _size78;
            ::apache::thrift::protocol::TType _ktype79;
            ::apache::thrift::protocol::TType _vtype80;
            xfer += iprot->readMapBegin(_ktype79, _vtype80, _size78);
            uint32_t _i82;
            for (_i82 = 0; _i82 < _size78; ++_i82)
            {
              std::string _key83;
              xfer += iprot->readString(_key83);
              std::string& _val84 = this->externalAddresses[_key83];
              xfer += iprot->readString(_val84);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.externalAddresses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->localAddress.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _etype88;
            xfer += iprot->readListBegin(_etype88, _size85);
            this->localAddress.resize(_size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              xfer += iprot->readString(this->localAddress[_i89]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.localAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PJoinIce::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PJoinIce");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerUid) {
    xfer += oprot->writeFieldBegin("peerUid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->peerUid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openTs) {
    xfer += oprot->writeFieldBegin("openTs", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->openTs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.externalAddresses) {
    xfer += oprot->writeFieldBegin("externalAddresses", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->externalAddresses.size()));
      std::map<std::string, std::string> ::const_iterator _iter90;
      for (_iter90 = this->externalAddresses.begin(); _iter90 != this->externalAddresses.end(); ++_iter90)
      {
        xfer += oprot->writeString(_iter90->first);
        xfer += oprot->writeString(_iter90->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.localAddress) {
    xfer += oprot->writeFieldBegin("localAddress", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->localAddress.size()));
      std::vector<std::string> ::const_iterator _iter91;
      for (_iter91 = this->localAddress.begin(); _iter91 != this->localAddress.end(); ++_iter91)
      {
        xfer += oprot->writeString((*_iter91));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PJoinIce &a, VosdkP2PJoinIce &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerUid, b.peerUid);
  swap(a.openTs, b.openTs);
  swap(a.externalAddresses, b.externalAddresses);
  swap(a.localAddress, b.localAddress);
  swap(a.__isset, b.__isset);
}

VosdkP2PJoinIce::VosdkP2PJoinIce(const VosdkP2PJoinIce& other92) {
  header = other92.header;
  peerUid = other92.peerUid;
  openTs = other92.openTs;
  externalAddresses = other92.externalAddresses;
  localAddress = other92.localAddress;
  __isset = other92.__isset;
}
VosdkP2PJoinIce& VosdkP2PJoinIce::operator=(const VosdkP2PJoinIce& other93) {
  header = other93.header;
  peerUid = other93.peerUid;
  openTs = other93.openTs;
  externalAddresses = other93.externalAddresses;
  localAddress = other93.localAddress;
  __isset = other93.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PJoinIce& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PJoinIce(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerUid="; (obj.__isset.peerUid ? (out << to_string(obj.peerUid)) : (out << "<null>"));
  out << ", " << "openTs="; (obj.__isset.openTs ? (out << to_string(obj.openTs)) : (out << "<null>"));
  out << ", " << "externalAddresses="; (obj.__isset.externalAddresses ? (out << to_string(obj.externalAddresses)) : (out << "<null>"));
  out << ", " << "localAddress="; (obj.__isset.localAddress ? (out << to_string(obj.localAddress)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PSuccStun::~VosdkP2PSuccStun() throw() {
}


void VosdkP2PSuccStun::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PSuccStun::__set_peerUid(const int64_t val) {
  this->peerUid = val;
__isset.peerUid = true;
}

void VosdkP2PSuccStun::__set_openTs(const int64_t val) {
  this->openTs = val;
__isset.openTs = true;
}

void VosdkP2PSuccStun::__set_joinIceTs(const int64_t val) {
  this->joinIceTs = val;
__isset.joinIceTs = true;
}

void VosdkP2PSuccStun::__set_startStunTs(const int64_t val) {
  this->startStunTs = val;
__isset.startStunTs = true;
}

void VosdkP2PSuccStun::__set_peerIP(const int32_t val) {
  this->peerIP = val;
__isset.peerIP = true;
}

void VosdkP2PSuccStun::__set_peerPort(const int16_t val) {
  this->peerPort = val;
__isset.peerPort = true;
}

void VosdkP2PSuccStun::__set_peerAddr(const std::string& val) {
  this->peerAddr = val;
__isset.peerAddr = true;
}

const char* VosdkP2PSuccStun::ascii_fingerprint = "17169BA2EDE4A993FA6D5B909F5E7F90";
const uint8_t VosdkP2PSuccStun::binary_fingerprint[16] = {0x17,0x16,0x9B,0xA2,0xED,0xE4,0xA9,0x93,0xFA,0x6D,0x5B,0x90,0x9F,0x5E,0x7F,0x90};

uint32_t VosdkP2PSuccStun::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peerUid);
          this->__isset.peerUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->openTs);
          this->__isset.openTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->joinIceTs);
          this->__isset.joinIceTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startStunTs);
          this->__isset.startStunTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->peerIP);
          this->__isset.peerIP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->peerPort);
          this->__isset.peerPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->peerAddr);
          this->__isset.peerAddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PSuccStun::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PSuccStun");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerUid) {
    xfer += oprot->writeFieldBegin("peerUid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->peerUid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openTs) {
    xfer += oprot->writeFieldBegin("openTs", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->openTs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.joinIceTs) {
    xfer += oprot->writeFieldBegin("joinIceTs", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->joinIceTs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startStunTs) {
    xfer += oprot->writeFieldBegin("startStunTs", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->startStunTs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerIP) {
    xfer += oprot->writeFieldBegin("peerIP", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->peerIP);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerPort) {
    xfer += oprot->writeFieldBegin("peerPort", ::apache::thrift::protocol::T_I16, 7);
    xfer += oprot->writeI16(this->peerPort);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerAddr) {
    xfer += oprot->writeFieldBegin("peerAddr", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->peerAddr);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PSuccStun &a, VosdkP2PSuccStun &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerUid, b.peerUid);
  swap(a.openTs, b.openTs);
  swap(a.joinIceTs, b.joinIceTs);
  swap(a.startStunTs, b.startStunTs);
  swap(a.peerIP, b.peerIP);
  swap(a.peerPort, b.peerPort);
  swap(a.peerAddr, b.peerAddr);
  swap(a.__isset, b.__isset);
}

VosdkP2PSuccStun::VosdkP2PSuccStun(const VosdkP2PSuccStun& other94) {
  header = other94.header;
  peerUid = other94.peerUid;
  openTs = other94.openTs;
  joinIceTs = other94.joinIceTs;
  startStunTs = other94.startStunTs;
  peerIP = other94.peerIP;
  peerPort = other94.peerPort;
  peerAddr = other94.peerAddr;
  __isset = other94.__isset;
}
VosdkP2PSuccStun& VosdkP2PSuccStun::operator=(const VosdkP2PSuccStun& other95) {
  header = other95.header;
  peerUid = other95.peerUid;
  openTs = other95.openTs;
  joinIceTs = other95.joinIceTs;
  startStunTs = other95.startStunTs;
  peerIP = other95.peerIP;
  peerPort = other95.peerPort;
  peerAddr = other95.peerAddr;
  __isset = other95.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PSuccStun& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PSuccStun(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerUid="; (obj.__isset.peerUid ? (out << to_string(obj.peerUid)) : (out << "<null>"));
  out << ", " << "openTs="; (obj.__isset.openTs ? (out << to_string(obj.openTs)) : (out << "<null>"));
  out << ", " << "joinIceTs="; (obj.__isset.joinIceTs ? (out << to_string(obj.joinIceTs)) : (out << "<null>"));
  out << ", " << "startStunTs="; (obj.__isset.startStunTs ? (out << to_string(obj.startStunTs)) : (out << "<null>"));
  out << ", " << "peerIP="; (obj.__isset.peerIP ? (out << to_string(obj.peerIP)) : (out << "<null>"));
  out << ", " << "peerPort="; (obj.__isset.peerPort ? (out << to_string(obj.peerPort)) : (out << "<null>"));
  out << ", " << "peerAddr="; (obj.__isset.peerAddr ? (out << to_string(obj.peerAddr)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2POpen::~VosdkP2POpen() throw() {
}


void VosdkP2POpen::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

const char* VosdkP2POpen::ascii_fingerprint = "C3D41A67DB60E8E4C8D244D93F311688";
const uint8_t VosdkP2POpen::binary_fingerprint[16] = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

uint32_t VosdkP2POpen::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2POpen::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2POpen");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2POpen &a, VosdkP2POpen &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

VosdkP2POpen::VosdkP2POpen(const VosdkP2POpen& other96) {
  header = other96.header;
  __isset = other96.__isset;
}
VosdkP2POpen& VosdkP2POpen::operator=(const VosdkP2POpen& other97) {
  header = other97.header;
  __isset = other97.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2POpen& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2POpen(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkErrorCodeItem::~VosdkErrorCodeItem() throw() {
}


void VosdkErrorCodeItem::__set_lts(const int64_t val) {
  this->lts = val;
}

void VosdkErrorCodeItem::__set_error(const int32_t val) {
  this->error = val;
}

const char* VosdkErrorCodeItem::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t VosdkErrorCodeItem::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t VosdkErrorCodeItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lts);
          this->__isset.lts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkErrorCodeItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkErrorCodeItem");

  xfer += oprot->writeFieldBegin("lts", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkErrorCodeItem &a, VosdkErrorCodeItem &b) {
  using ::std::swap;
  swap(a.lts, b.lts);
  swap(a.error, b.error);
  swap(a.__isset, b.__isset);
}

VosdkErrorCodeItem::VosdkErrorCodeItem(const VosdkErrorCodeItem& other98) {
  lts = other98.lts;
  error = other98.error;
  __isset = other98.__isset;
}
VosdkErrorCodeItem& VosdkErrorCodeItem::operator=(const VosdkErrorCodeItem& other99) {
  lts = other99.lts;
  error = other99.error;
  __isset = other99.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkErrorCodeItem& obj) {
  using apache::thrift::to_string;
  out << "VosdkErrorCodeItem(";
  out << "lts=" << to_string(obj.lts);
  out << ", " << "error=" << to_string(obj.error);
  out << ")";
  return out;
}


VosdkErrorCode::~VosdkErrorCode() throw() {
}


void VosdkErrorCode::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkErrorCode::__set_errorList(const std::vector<VosdkErrorCodeItem> & val) {
  this->errorList = val;
__isset.errorList = true;
}

const char* VosdkErrorCode::ascii_fingerprint = "0A567F187B1C5E4769B7A50908559940";
const uint8_t VosdkErrorCode::binary_fingerprint[16] = {0x0A,0x56,0x7F,0x18,0x7B,0x1C,0x5E,0x47,0x69,0xB7,0xA5,0x09,0x08,0x55,0x99,0x40};

uint32_t VosdkErrorCode::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->errorList.clear();
            uint32_t _size100;
            ::apache::thrift::protocol::TType _etype103;
            xfer += iprot->readListBegin(_etype103, _size100);
            this->errorList.resize(_size100);
            uint32_t _i104;
            for (_i104 = 0; _i104 < _size100; ++_i104)
            {
              xfer += this->errorList[_i104].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.errorList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkErrorCode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkErrorCode");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.errorList) {
    xfer += oprot->writeFieldBegin("errorList", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->errorList.size()));
      std::vector<VosdkErrorCodeItem> ::const_iterator _iter105;
      for (_iter105 = this->errorList.begin(); _iter105 != this->errorList.end(); ++_iter105)
      {
        xfer += (*_iter105).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkErrorCode &a, VosdkErrorCode &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.errorList, b.errorList);
  swap(a.__isset, b.__isset);
}

VosdkErrorCode::VosdkErrorCode(const VosdkErrorCode& other106) {
  header = other106.header;
  errorList = other106.errorList;
  __isset = other106.__isset;
}
VosdkErrorCode& VosdkErrorCode::operator=(const VosdkErrorCode& other107) {
  header = other107.header;
  errorList = other107.errorList;
  __isset = other107.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkErrorCode& obj) {
  using apache::thrift::to_string;
  out << "VosdkErrorCode(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "errorList="; (obj.__isset.errorList ? (out << to_string(obj.errorList)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PSwitch::~VosdkP2PSwitch() throw() {
}


void VosdkP2PSwitch::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PSwitch::__set_status(const int16_t val) {
  this->status = val;
__isset.status = true;
}

void VosdkP2PSwitch::__set_reportTs(const int64_t val) {
  this->reportTs = val;
__isset.reportTs = true;
}

const char* VosdkP2PSwitch::ascii_fingerprint = "D229B80A80AEC0825116409206F8CCDD";
const uint8_t VosdkP2PSwitch::binary_fingerprint[16] = {0xD2,0x29,0xB8,0x0A,0x80,0xAE,0xC0,0x82,0x51,0x16,0x40,0x92,0x06,0xF8,0xCC,0xDD};

uint32_t VosdkP2PSwitch::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reportTs);
          this->__isset.reportTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PSwitch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PSwitch");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reportTs) {
    xfer += oprot->writeFieldBegin("reportTs", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->reportTs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PSwitch &a, VosdkP2PSwitch &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.status, b.status);
  swap(a.reportTs, b.reportTs);
  swap(a.__isset, b.__isset);
}

VosdkP2PSwitch::VosdkP2PSwitch(const VosdkP2PSwitch& other108) {
  header = other108.header;
  status = other108.status;
  reportTs = other108.reportTs;
  __isset = other108.__isset;
}
VosdkP2PSwitch& VosdkP2PSwitch::operator=(const VosdkP2PSwitch& other109) {
  header = other109.header;
  status = other109.status;
  reportTs = other109.reportTs;
  __isset = other109.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PSwitch& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PSwitch(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "status="; (obj.__isset.status ? (out << to_string(obj.status)) : (out << "<null>"));
  out << ", " << "reportTs="; (obj.__isset.reportTs ? (out << to_string(obj.reportTs)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PStunStat::~VosdkP2PStunStat() throw() {
}


void VosdkP2PStunStat::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PStunStat::__set_code(const int16_t val) {
  this->code = val;
__isset.code = true;
}

void VosdkP2PStunStat::__set_stunId(const std::string& val) {
  this->stunId = val;
__isset.stunId = true;
}

void VosdkP2PStunStat::__set_resource(const std::string& val) {
  this->resource = val;
__isset.resource = true;
}

void VosdkP2PStunStat::__set_fromId(const std::string& val) {
  this->fromId = val;
__isset.fromId = true;
}

void VosdkP2PStunStat::__set_toId(const std::string& val) {
  this->toId = val;
__isset.toId = true;
}

void VosdkP2PStunStat::__set_sourceIp(const std::string& val) {
  this->sourceIp = val;
__isset.sourceIp = true;
}

void VosdkP2PStunStat::__set_destIp(const std::string& val) {
  this->destIp = val;
__isset.destIp = true;
}

const char* VosdkP2PStunStat::ascii_fingerprint = "6B2B1BCA54513B8C94915386793D1546";
const uint8_t VosdkP2PStunStat::binary_fingerprint[16] = {0x6B,0x2B,0x1B,0xCA,0x54,0x51,0x3B,0x8C,0x94,0x91,0x53,0x86,0x79,0x3D,0x15,0x46};

uint32_t VosdkP2PStunStat::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stunId);
          this->__isset.stunId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resource);
          this->__isset.resource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fromId);
          this->__isset.fromId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->toId);
          this->__isset.toId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceIp);
          this->__isset.sourceIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destIp);
          this->__isset.destIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PStunStat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PStunStat");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stunId) {
    xfer += oprot->writeFieldBegin("stunId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->stunId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resource) {
    xfer += oprot->writeFieldBegin("resource", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->resource);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fromId) {
    xfer += oprot->writeFieldBegin("fromId", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->fromId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.toId) {
    xfer += oprot->writeFieldBegin("toId", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->toId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceIp) {
    xfer += oprot->writeFieldBegin("sourceIp", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->sourceIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.destIp) {
    xfer += oprot->writeFieldBegin("destIp", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->destIp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PStunStat &a, VosdkP2PStunStat &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.code, b.code);
  swap(a.stunId, b.stunId);
  swap(a.resource, b.resource);
  swap(a.fromId, b.fromId);
  swap(a.toId, b.toId);
  swap(a.sourceIp, b.sourceIp);
  swap(a.destIp, b.destIp);
  swap(a.__isset, b.__isset);
}

VosdkP2PStunStat::VosdkP2PStunStat(const VosdkP2PStunStat& other110) {
  header = other110.header;
  code = other110.code;
  stunId = other110.stunId;
  resource = other110.resource;
  fromId = other110.fromId;
  toId = other110.toId;
  sourceIp = other110.sourceIp;
  destIp = other110.destIp;
  __isset = other110.__isset;
}
VosdkP2PStunStat& VosdkP2PStunStat::operator=(const VosdkP2PStunStat& other111) {
  header = other111.header;
  code = other111.code;
  stunId = other111.stunId;
  resource = other111.resource;
  fromId = other111.fromId;
  toId = other111.toId;
  sourceIp = other111.sourceIp;
  destIp = other111.destIp;
  __isset = other111.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PStunStat& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PStunStat(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "code="; (obj.__isset.code ? (out << to_string(obj.code)) : (out << "<null>"));
  out << ", " << "stunId="; (obj.__isset.stunId ? (out << to_string(obj.stunId)) : (out << "<null>"));
  out << ", " << "resource="; (obj.__isset.resource ? (out << to_string(obj.resource)) : (out << "<null>"));
  out << ", " << "fromId="; (obj.__isset.fromId ? (out << to_string(obj.fromId)) : (out << "<null>"));
  out << ", " << "toId="; (obj.__isset.toId ? (out << to_string(obj.toId)) : (out << "<null>"));
  out << ", " << "sourceIp="; (obj.__isset.sourceIp ? (out << to_string(obj.sourceIp)) : (out << "<null>"));
  out << ", " << "destIp="; (obj.__isset.destIp ? (out << to_string(obj.destIp)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkNetworkInformation::~VosdkNetworkInformation() throw() {
}


void VosdkNetworkInformation::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkNetworkInformation::__set_networkType(const int32_t val) {
  this->networkType = val;
__isset.networkType = true;
}

void VosdkNetworkInformation::__set_networkSubType(const int32_t val) {
  this->networkSubType = val;
__isset.networkSubType = true;
}

void VosdkNetworkInformation::__set_localIp(const std::string& val) {
  this->localIp = val;
__isset.localIp = true;
}

void VosdkNetworkInformation::__set_ssid(const std::string& val) {
  this->ssid = val;
__isset.ssid = true;
}

void VosdkNetworkInformation::__set_bssid(const std::string& val) {
  this->bssid = val;
__isset.bssid = true;
}

void VosdkNetworkInformation::__set_siglevel(const int32_t val) {
  this->siglevel = val;
__isset.siglevel = true;
}

void VosdkNetworkInformation::__set_rssi(const int32_t val) {
  this->rssi = val;
__isset.rssi = true;
}

const char* VosdkNetworkInformation::ascii_fingerprint = "AB342F1233CFEA49CAECD6F6A8E30259";
const uint8_t VosdkNetworkInformation::binary_fingerprint[16] = {0xAB,0x34,0x2F,0x12,0x33,0xCF,0xEA,0x49,0xCA,0xEC,0xD6,0xF6,0xA8,0xE3,0x02,0x59};

uint32_t VosdkNetworkInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->networkType);
          this->__isset.networkType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->networkSubType);
          this->__isset.networkSubType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localIp);
          this->__isset.localIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ssid);
          this->__isset.ssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bssid);
          this->__isset.bssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->siglevel);
          this->__isset.siglevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rssi);
          this->__isset.rssi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkNetworkInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkNetworkInformation");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.networkType) {
    xfer += oprot->writeFieldBegin("networkType", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->networkType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.networkSubType) {
    xfer += oprot->writeFieldBegin("networkSubType", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->networkSubType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.localIp) {
    xfer += oprot->writeFieldBegin("localIp", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->localIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ssid) {
    xfer += oprot->writeFieldBegin("ssid", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->ssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bssid) {
    xfer += oprot->writeFieldBegin("bssid", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->bssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.siglevel) {
    xfer += oprot->writeFieldBegin("siglevel", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->siglevel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rssi) {
    xfer += oprot->writeFieldBegin("rssi", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->rssi);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkNetworkInformation &a, VosdkNetworkInformation &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.networkType, b.networkType);
  swap(a.networkSubType, b.networkSubType);
  swap(a.localIp, b.localIp);
  swap(a.ssid, b.ssid);
  swap(a.bssid, b.bssid);
  swap(a.siglevel, b.siglevel);
  swap(a.rssi, b.rssi);
  swap(a.__isset, b.__isset);
}

VosdkNetworkInformation::VosdkNetworkInformation(const VosdkNetworkInformation& other112) {
  header = other112.header;
  networkType = other112.networkType;
  networkSubType = other112.networkSubType;
  localIp = other112.localIp;
  ssid = other112.ssid;
  bssid = other112.bssid;
  siglevel = other112.siglevel;
  rssi = other112.rssi;
  __isset = other112.__isset;
}
VosdkNetworkInformation& VosdkNetworkInformation::operator=(const VosdkNetworkInformation& other113) {
  header = other113.header;
  networkType = other113.networkType;
  networkSubType = other113.networkSubType;
  localIp = other113.localIp;
  ssid = other113.ssid;
  bssid = other113.bssid;
  siglevel = other113.siglevel;
  rssi = other113.rssi;
  __isset = other113.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkNetworkInformation& obj) {
  using apache::thrift::to_string;
  out << "VosdkNetworkInformation(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "networkType="; (obj.__isset.networkType ? (out << to_string(obj.networkType)) : (out << "<null>"));
  out << ", " << "networkSubType="; (obj.__isset.networkSubType ? (out << to_string(obj.networkSubType)) : (out << "<null>"));
  out << ", " << "localIp="; (obj.__isset.localIp ? (out << to_string(obj.localIp)) : (out << "<null>"));
  out << ", " << "ssid="; (obj.__isset.ssid ? (out << to_string(obj.ssid)) : (out << "<null>"));
  out << ", " << "bssid="; (obj.__isset.bssid ? (out << to_string(obj.bssid)) : (out << "<null>"));
  out << ", " << "siglevel="; (obj.__isset.siglevel ? (out << to_string(obj.siglevel)) : (out << "<null>"));
  out << ", " << "rssi="; (obj.__isset.rssi ? (out << to_string(obj.rssi)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkNetOb2::~VosdkNetOb2() throw() {
}


void VosdkNetOb2::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkNetOb2::__set_payload(const std::string& val) {
  this->payload = val;
__isset.payload = true;
}

const char* VosdkNetOb2::ascii_fingerprint = "7643AB8C86D47EFC29C9DADBFB748150";
const uint8_t VosdkNetOb2::binary_fingerprint[16] = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

uint32_t VosdkNetOb2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->payload);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkNetOb2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkNetOb2");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.payload) {
    xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->payload);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkNetOb2 &a, VosdkNetOb2 &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

VosdkNetOb2::VosdkNetOb2(const VosdkNetOb2& other114) {
  header = other114.header;
  payload = other114.payload;
  __isset = other114.__isset;
}
VosdkNetOb2& VosdkNetOb2::operator=(const VosdkNetOb2& other115) {
  header = other115.header;
  payload = other115.payload;
  __isset = other115.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkNetOb2& obj) {
  using apache::thrift::to_string;
  out << "VosdkNetOb2(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "payload="; (obj.__isset.payload ? (out << to_string(obj.payload)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkNetOb3::~VosdkNetOb3() throw() {
}


void VosdkNetOb3::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkNetOb3::__set_payload(const std::vector<int8_t> & val) {
  this->payload = val;
__isset.payload = true;
}

const char* VosdkNetOb3::ascii_fingerprint = "E08CB57DFE00075800F6E9302D24319A";
const uint8_t VosdkNetOb3::binary_fingerprint[16] = {0xE0,0x8C,0xB5,0x7D,0xFE,0x00,0x07,0x58,0x00,0xF6,0xE9,0x30,0x2D,0x24,0x31,0x9A};

uint32_t VosdkNetOb3::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->payload.clear();
            uint32_t _size116;
            ::apache::thrift::protocol::TType _etype119;
            xfer += iprot->readListBegin(_etype119, _size116);
            this->payload.resize(_size116);
            uint32_t _i120;
            for (_i120 = 0; _i120 < _size116; ++_i120)
            {
              xfer += iprot->readByte(this->payload[_i120]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkNetOb3::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkNetOb3");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.payload) {
    xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->payload.size()));
      std::vector<int8_t> ::const_iterator _iter121;
      for (_iter121 = this->payload.begin(); _iter121 != this->payload.end(); ++_iter121)
      {
        xfer += oprot->writeByte((*_iter121));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkNetOb3 &a, VosdkNetOb3 &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

VosdkNetOb3::VosdkNetOb3(const VosdkNetOb3& other122) {
  header = other122.header;
  payload = other122.payload;
  __isset = other122.__isset;
}
VosdkNetOb3& VosdkNetOb3::operator=(const VosdkNetOb3& other123) {
  header = other123.header;
  payload = other123.payload;
  __isset = other123.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkNetOb3& obj) {
  using apache::thrift::to_string;
  out << "VosdkNetOb3(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "payload="; (obj.__isset.payload ? (out << to_string(obj.payload)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkNetOb4::~VosdkNetOb4() throw() {
}


void VosdkNetOb4::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkNetOb4::__set_payload(const std::vector<int8_t> & val) {
  this->payload = val;
__isset.payload = true;
}

const char* VosdkNetOb4::ascii_fingerprint = "E08CB57DFE00075800F6E9302D24319A";
const uint8_t VosdkNetOb4::binary_fingerprint[16] = {0xE0,0x8C,0xB5,0x7D,0xFE,0x00,0x07,0x58,0x00,0xF6,0xE9,0x30,0x2D,0x24,0x31,0x9A};

uint32_t VosdkNetOb4::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->payload.clear();
            uint32_t _size124;
            ::apache::thrift::protocol::TType _etype127;
            xfer += iprot->readListBegin(_etype127, _size124);
            this->payload.resize(_size124);
            uint32_t _i128;
            for (_i128 = 0; _i128 < _size124; ++_i128)
            {
              xfer += iprot->readByte(this->payload[_i128]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkNetOb4::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkNetOb4");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.payload) {
    xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->payload.size()));
      std::vector<int8_t> ::const_iterator _iter129;
      for (_iter129 = this->payload.begin(); _iter129 != this->payload.end(); ++_iter129)
      {
        xfer += oprot->writeByte((*_iter129));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkNetOb4 &a, VosdkNetOb4 &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

VosdkNetOb4::VosdkNetOb4(const VosdkNetOb4& other130) {
  header = other130.header;
  payload = other130.payload;
  __isset = other130.__isset;
}
VosdkNetOb4& VosdkNetOb4::operator=(const VosdkNetOb4& other131) {
  header = other131.header;
  payload = other131.payload;
  __isset = other131.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkNetOb4& obj) {
  using apache::thrift::to_string;
  out << "VosdkNetOb4(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "payload="; (obj.__isset.payload ? (out << to_string(obj.payload)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkViRemoteFrameDecoded::~VosdkViRemoteFrameDecoded() throw() {
}


void VosdkViRemoteFrameDecoded::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkViRemoteFrameDecoded::__set_peerUid(const int64_t val) {
  this->peerUid = val;
__isset.peerUid = true;
}

void VosdkViRemoteFrameDecoded::__set_height(const int32_t val) {
  this->height = val;
__isset.height = true;
}

void VosdkViRemoteFrameDecoded::__set_width(const int32_t val) {
  this->width = val;
__isset.width = true;
}

const char* VosdkViRemoteFrameDecoded::ascii_fingerprint = "14217423B7A9C72C02236E56CE9BB46A";
const uint8_t VosdkViRemoteFrameDecoded::binary_fingerprint[16] = {0x14,0x21,0x74,0x23,0xB7,0xA9,0xC7,0x2C,0x02,0x23,0x6E,0x56,0xCE,0x9B,0xB4,0x6A};

uint32_t VosdkViRemoteFrameDecoded::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->peerUid);
          this->__isset.peerUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkViRemoteFrameDecoded::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkViRemoteFrameDecoded");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerUid) {
    xfer += oprot->writeFieldBegin("peerUid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->peerUid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->height);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->width);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkViRemoteFrameDecoded &a, VosdkViRemoteFrameDecoded &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerUid, b.peerUid);
  swap(a.height, b.height);
  swap(a.width, b.width);
  swap(a.__isset, b.__isset);
}

VosdkViRemoteFrameDecoded::VosdkViRemoteFrameDecoded(const VosdkViRemoteFrameDecoded& other132) {
  header = other132.header;
  peerUid = other132.peerUid;
  height = other132.height;
  width = other132.width;
  __isset = other132.__isset;
}
VosdkViRemoteFrameDecoded& VosdkViRemoteFrameDecoded::operator=(const VosdkViRemoteFrameDecoded& other133) {
  header = other133.header;
  peerUid = other133.peerUid;
  height = other133.height;
  width = other133.width;
  __isset = other133.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkViRemoteFrameDecoded& obj) {
  using apache::thrift::to_string;
  out << "VosdkViRemoteFrameDecoded(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerUid="; (obj.__isset.peerUid ? (out << to_string(obj.peerUid)) : (out << "<null>"));
  out << ", " << "height="; (obj.__isset.height ? (out << to_string(obj.height)) : (out << "<null>"));
  out << ", " << "width="; (obj.__isset.width ? (out << to_string(obj.width)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkSwitchVideoStream::~VosdkSwitchVideoStream() throw() {
}


void VosdkSwitchVideoStream::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkSwitchVideoStream::__set_eventType(const int16_t val) {
  this->eventType = val;
__isset.eventType = true;
}

void VosdkSwitchVideoStream::__set_expectedStream(const int16_t val) {
  this->expectedStream = val;
__isset.expectedStream = true;
}

void VosdkSwitchVideoStream::__set_requestId(const int32_t val) {
  this->requestId = val;
__isset.requestId = true;
}

void VosdkSwitchVideoStream::__set_beginTs(const int64_t val) {
  this->beginTs = val;
__isset.beginTs = true;
}

void VosdkSwitchVideoStream::__set_endTs(const int64_t val) {
  this->endTs = val;
__isset.endTs = true;
}

const char* VosdkSwitchVideoStream::ascii_fingerprint = "CB4E8E1529561BFF497250E470DEA940";
const uint8_t VosdkSwitchVideoStream::binary_fingerprint[16] = {0xCB,0x4E,0x8E,0x15,0x29,0x56,0x1B,0xFF,0x49,0x72,0x50,0xE4,0x70,0xDE,0xA9,0x40};

uint32_t VosdkSwitchVideoStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->eventType);
          this->__isset.eventType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->expectedStream);
          this->__isset.expectedStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->beginTs);
          this->__isset.beginTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTs);
          this->__isset.endTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkSwitchVideoStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkSwitchVideoStream");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventType) {
    xfer += oprot->writeFieldBegin("eventType", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->eventType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expectedStream) {
    xfer += oprot->writeFieldBegin("expectedStream", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->expectedStream);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requestId) {
    xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->requestId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.beginTs) {
    xfer += oprot->writeFieldBegin("beginTs", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->beginTs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.endTs) {
    xfer += oprot->writeFieldBegin("endTs", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->endTs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkSwitchVideoStream &a, VosdkSwitchVideoStream &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.eventType, b.eventType);
  swap(a.expectedStream, b.expectedStream);
  swap(a.requestId, b.requestId);
  swap(a.beginTs, b.beginTs);
  swap(a.endTs, b.endTs);
  swap(a.__isset, b.__isset);
}

VosdkSwitchVideoStream::VosdkSwitchVideoStream(const VosdkSwitchVideoStream& other134) {
  header = other134.header;
  eventType = other134.eventType;
  expectedStream = other134.expectedStream;
  requestId = other134.requestId;
  beginTs = other134.beginTs;
  endTs = other134.endTs;
  __isset = other134.__isset;
}
VosdkSwitchVideoStream& VosdkSwitchVideoStream::operator=(const VosdkSwitchVideoStream& other135) {
  header = other135.header;
  eventType = other135.eventType;
  expectedStream = other135.expectedStream;
  requestId = other135.requestId;
  beginTs = other135.beginTs;
  endTs = other135.endTs;
  __isset = other135.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkSwitchVideoStream& obj) {
  using apache::thrift::to_string;
  out << "VosdkSwitchVideoStream(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "eventType="; (obj.__isset.eventType ? (out << to_string(obj.eventType)) : (out << "<null>"));
  out << ", " << "expectedStream="; (obj.__isset.expectedStream ? (out << to_string(obj.expectedStream)) : (out << "<null>"));
  out << ", " << "requestId="; (obj.__isset.requestId ? (out << to_string(obj.requestId)) : (out << "<null>"));
  out << ", " << "beginTs="; (obj.__isset.beginTs ? (out << to_string(obj.beginTs)) : (out << "<null>"));
  out << ", " << "endTs="; (obj.__isset.endTs ? (out << to_string(obj.endTs)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkLbes::~VosdkLbes() throw() {
}


void VosdkLbes::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkLbes::__set_lbesUri(const int16_t val) {
  this->lbesUri = val;
__isset.lbesUri = true;
}

void VosdkLbes::__set_url(const std::string& val) {
  this->url = val;
__isset.url = true;
}

void VosdkLbes::__set_payload(const std::string& val) {
  this->payload = val;
__isset.payload = true;
}

void VosdkLbes::__set_server_code(const int16_t val) {
  this->server_code = val;
__isset.server_code = true;
}

void VosdkLbes::__set_code(const int16_t val) {
  this->code = val;
__isset.code = true;
}

void VosdkLbes::__set_traceId(const std::string& val) {
  this->traceId = val;
__isset.traceId = true;
}

const char* VosdkLbes::ascii_fingerprint = "B6750047E7006D4E1DB98BE81C48688E";
const uint8_t VosdkLbes::binary_fingerprint[16] = {0xB6,0x75,0x00,0x47,0xE7,0x00,0x6D,0x4E,0x1D,0xB9,0x8B,0xE8,0x1C,0x48,0x68,0x8E};

uint32_t VosdkLbes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->lbesUri);
          this->__isset.lbesUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->payload);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->server_code);
          this->__isset.server_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->traceId);
          this->__isset.traceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkLbes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkLbes");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lbesUri) {
    xfer += oprot->writeFieldBegin("lbesUri", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->lbesUri);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.url) {
    xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->url);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.payload) {
    xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->payload);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.server_code) {
    xfer += oprot->writeFieldBegin("server_code", ::apache::thrift::protocol::T_I16, 5);
    xfer += oprot->writeI16(this->server_code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.traceId) {
    xfer += oprot->writeFieldBegin("traceId", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->traceId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkLbes &a, VosdkLbes &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.lbesUri, b.lbesUri);
  swap(a.url, b.url);
  swap(a.payload, b.payload);
  swap(a.server_code, b.server_code);
  swap(a.code, b.code);
  swap(a.traceId, b.traceId);
  swap(a.__isset, b.__isset);
}

VosdkLbes::VosdkLbes(const VosdkLbes& other136) {
  header = other136.header;
  lbesUri = other136.lbesUri;
  url = other136.url;
  payload = other136.payload;
  server_code = other136.server_code;
  code = other136.code;
  traceId = other136.traceId;
  __isset = other136.__isset;
}
VosdkLbes& VosdkLbes::operator=(const VosdkLbes& other137) {
  header = other137.header;
  lbesUri = other137.lbesUri;
  url = other137.url;
  payload = other137.payload;
  server_code = other137.server_code;
  code = other137.code;
  traceId = other137.traceId;
  __isset = other137.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkLbes& obj) {
  using apache::thrift::to_string;
  out << "VosdkLbes(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "lbesUri="; (obj.__isset.lbesUri ? (out << to_string(obj.lbesUri)) : (out << "<null>"));
  out << ", " << "url="; (obj.__isset.url ? (out << to_string(obj.url)) : (out << "<null>"));
  out << ", " << "payload="; (obj.__isset.payload ? (out << to_string(obj.payload)) : (out << "<null>"));
  out << ", " << "server_code="; (obj.__isset.server_code ? (out << to_string(obj.server_code)) : (out << "<null>"));
  out << ", " << "code="; (obj.__isset.code ? (out << to_string(obj.code)) : (out << "<null>"));
  out << ", " << "traceId="; (obj.__isset.traceId ? (out << to_string(obj.traceId)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkMaxVideoPayloadSet::~VosdkMaxVideoPayloadSet() throw() {
}


void VosdkMaxVideoPayloadSet::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkMaxVideoPayloadSet::__set_maxPayload(const int32_t val) {
  this->maxPayload = val;
__isset.maxPayload = true;
}

const char* VosdkMaxVideoPayloadSet::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkMaxVideoPayloadSet::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkMaxVideoPayloadSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxPayload);
          this->__isset.maxPayload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkMaxVideoPayloadSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkMaxVideoPayloadSet");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxPayload) {
    xfer += oprot->writeFieldBegin("maxPayload", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->maxPayload);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkMaxVideoPayloadSet &a, VosdkMaxVideoPayloadSet &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.maxPayload, b.maxPayload);
  swap(a.__isset, b.__isset);
}

VosdkMaxVideoPayloadSet::VosdkMaxVideoPayloadSet(const VosdkMaxVideoPayloadSet& other138) {
  header = other138.header;
  maxPayload = other138.maxPayload;
  __isset = other138.__isset;
}
VosdkMaxVideoPayloadSet& VosdkMaxVideoPayloadSet::operator=(const VosdkMaxVideoPayloadSet& other139) {
  header = other139.header;
  maxPayload = other139.maxPayload;
  __isset = other139.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkMaxVideoPayloadSet& obj) {
  using apache::thrift::to_string;
  out << "VosdkMaxVideoPayloadSet(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "maxPayload="; (obj.__isset.maxPayload ? (out << to_string(obj.maxPayload)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkFirstAudioPacketSent::~VosdkFirstAudioPacketSent() throw() {
}


void VosdkFirstAudioPacketSent::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkFirstAudioPacketSent::__set_codec(const int32_t val) {
  this->codec = val;
__isset.codec = true;
}

const char* VosdkFirstAudioPacketSent::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkFirstAudioPacketSent::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkFirstAudioPacketSent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->codec);
          this->__isset.codec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkFirstAudioPacketSent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkFirstAudioPacketSent");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.codec) {
    xfer += oprot->writeFieldBegin("codec", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->codec);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkFirstAudioPacketSent &a, VosdkFirstAudioPacketSent &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.codec, b.codec);
  swap(a.__isset, b.__isset);
}

VosdkFirstAudioPacketSent::VosdkFirstAudioPacketSent(const VosdkFirstAudioPacketSent& other140) {
  header = other140.header;
  codec = other140.codec;
  __isset = other140.__isset;
}
VosdkFirstAudioPacketSent& VosdkFirstAudioPacketSent::operator=(const VosdkFirstAudioPacketSent& other141) {
  header = other141.header;
  codec = other141.codec;
  __isset = other141.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkFirstAudioPacketSent& obj) {
  using apache::thrift::to_string;
  out << "VosdkFirstAudioPacketSent(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "codec="; (obj.__isset.codec ? (out << to_string(obj.codec)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkFirstAudioPacketReceived::~VosdkFirstAudioPacketReceived() throw() {
}


void VosdkFirstAudioPacketReceived::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkFirstAudioPacketReceived::__set_codec(const int32_t val) {
  this->codec = val;
__isset.codec = true;
}

const char* VosdkFirstAudioPacketReceived::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkFirstAudioPacketReceived::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkFirstAudioPacketReceived::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->codec);
          this->__isset.codec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkFirstAudioPacketReceived::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkFirstAudioPacketReceived");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.codec) {
    xfer += oprot->writeFieldBegin("codec", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->codec);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkFirstAudioPacketReceived &a, VosdkFirstAudioPacketReceived &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.codec, b.codec);
  swap(a.__isset, b.__isset);
}

VosdkFirstAudioPacketReceived::VosdkFirstAudioPacketReceived(const VosdkFirstAudioPacketReceived& other142) {
  header = other142.header;
  codec = other142.codec;
  __isset = other142.__isset;
}
VosdkFirstAudioPacketReceived& VosdkFirstAudioPacketReceived::operator=(const VosdkFirstAudioPacketReceived& other143) {
  header = other143.header;
  codec = other143.codec;
  __isset = other143.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkFirstAudioPacketReceived& obj) {
  using apache::thrift::to_string;
  out << "VosdkFirstAudioPacketReceived(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "codec="; (obj.__isset.codec ? (out << to_string(obj.codec)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkAudioSendingStopped::~VosdkAudioSendingStopped() throw() {
}


void VosdkAudioSendingStopped::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkAudioSendingStopped::__set_reason(const std::string& val) {
  this->reason = val;
__isset.reason = true;
}

const char* VosdkAudioSendingStopped::ascii_fingerprint = "7643AB8C86D47EFC29C9DADBFB748150";
const uint8_t VosdkAudioSendingStopped::binary_fingerprint[16] = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

uint32_t VosdkAudioSendingStopped::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkAudioSendingStopped::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkAudioSendingStopped");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reason) {
    xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->reason);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkAudioSendingStopped &a, VosdkAudioSendingStopped &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

VosdkAudioSendingStopped::VosdkAudioSendingStopped(const VosdkAudioSendingStopped& other144) {
  header = other144.header;
  reason = other144.reason;
  __isset = other144.__isset;
}
VosdkAudioSendingStopped& VosdkAudioSendingStopped::operator=(const VosdkAudioSendingStopped& other145) {
  header = other145.header;
  reason = other145.reason;
  __isset = other145.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkAudioSendingStopped& obj) {
  using apache::thrift::to_string;
  out << "VosdkAudioSendingStopped(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "reason="; (obj.__isset.reason ? (out << to_string(obj.reason)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkAudioDisabled::~VosdkAudioDisabled() throw() {
}


void VosdkAudioDisabled::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

const char* VosdkAudioDisabled::ascii_fingerprint = "C3D41A67DB60E8E4C8D244D93F311688";
const uint8_t VosdkAudioDisabled::binary_fingerprint[16] = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

uint32_t VosdkAudioDisabled::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkAudioDisabled::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkAudioDisabled");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkAudioDisabled &a, VosdkAudioDisabled &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

VosdkAudioDisabled::VosdkAudioDisabled(const VosdkAudioDisabled& other146) {
  header = other146.header;
  __isset = other146.__isset;
}
VosdkAudioDisabled& VosdkAudioDisabled::operator=(const VosdkAudioDisabled& other147) {
  header = other147.header;
  __isset = other147.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkAudioDisabled& obj) {
  using apache::thrift::to_string;
  out << "VosdkAudioDisabled(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkAudioEnabled::~VosdkAudioEnabled() throw() {
}


void VosdkAudioEnabled::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

const char* VosdkAudioEnabled::ascii_fingerprint = "C3D41A67DB60E8E4C8D244D93F311688";
const uint8_t VosdkAudioEnabled::binary_fingerprint[16] = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

uint32_t VosdkAudioEnabled::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkAudioEnabled::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkAudioEnabled");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkAudioEnabled &a, VosdkAudioEnabled &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

VosdkAudioEnabled::VosdkAudioEnabled(const VosdkAudioEnabled& other148) {
  header = other148.header;
  __isset = other148.__isset;
}
VosdkAudioEnabled& VosdkAudioEnabled::operator=(const VosdkAudioEnabled& other149) {
  header = other149.header;
  __isset = other149.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkAudioEnabled& obj) {
  using apache::thrift::to_string;
  out << "VosdkAudioEnabled(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkFirstVideoPacketSent::~VosdkFirstVideoPacketSent() throw() {
}


void VosdkFirstVideoPacketSent::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkFirstVideoPacketSent::__set_codec(const int32_t val) {
  this->codec = val;
__isset.codec = true;
}

const char* VosdkFirstVideoPacketSent::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkFirstVideoPacketSent::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkFirstVideoPacketSent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->codec);
          this->__isset.codec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkFirstVideoPacketSent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkFirstVideoPacketSent");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.codec) {
    xfer += oprot->writeFieldBegin("codec", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->codec);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkFirstVideoPacketSent &a, VosdkFirstVideoPacketSent &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.codec, b.codec);
  swap(a.__isset, b.__isset);
}

VosdkFirstVideoPacketSent::VosdkFirstVideoPacketSent(const VosdkFirstVideoPacketSent& other150) {
  header = other150.header;
  codec = other150.codec;
  __isset = other150.__isset;
}
VosdkFirstVideoPacketSent& VosdkFirstVideoPacketSent::operator=(const VosdkFirstVideoPacketSent& other151) {
  header = other151.header;
  codec = other151.codec;
  __isset = other151.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkFirstVideoPacketSent& obj) {
  using apache::thrift::to_string;
  out << "VosdkFirstVideoPacketSent(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "codec="; (obj.__isset.codec ? (out << to_string(obj.codec)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkFirstVideoPacketReceived::~VosdkFirstVideoPacketReceived() throw() {
}


void VosdkFirstVideoPacketReceived::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkFirstVideoPacketReceived::__set_codec(const int32_t val) {
  this->codec = val;
__isset.codec = true;
}

const char* VosdkFirstVideoPacketReceived::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkFirstVideoPacketReceived::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkFirstVideoPacketReceived::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->codec);
          this->__isset.codec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkFirstVideoPacketReceived::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkFirstVideoPacketReceived");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.codec) {
    xfer += oprot->writeFieldBegin("codec", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->codec);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkFirstVideoPacketReceived &a, VosdkFirstVideoPacketReceived &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.codec, b.codec);
  swap(a.__isset, b.__isset);
}

VosdkFirstVideoPacketReceived::VosdkFirstVideoPacketReceived(const VosdkFirstVideoPacketReceived& other152) {
  header = other152.header;
  codec = other152.codec;
  __isset = other152.__isset;
}
VosdkFirstVideoPacketReceived& VosdkFirstVideoPacketReceived::operator=(const VosdkFirstVideoPacketReceived& other153) {
  header = other153.header;
  codec = other153.codec;
  __isset = other153.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkFirstVideoPacketReceived& obj) {
  using apache::thrift::to_string;
  out << "VosdkFirstVideoPacketReceived(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "codec="; (obj.__isset.codec ? (out << to_string(obj.codec)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkFirstVideoFrameDecoded::~VosdkFirstVideoFrameDecoded() throw() {
}


void VosdkFirstVideoFrameDecoded::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkFirstVideoFrameDecoded::__set_width(const int32_t val) {
  this->width = val;
__isset.width = true;
}

void VosdkFirstVideoFrameDecoded::__set_height(const int32_t val) {
  this->height = val;
__isset.height = true;
}

const char* VosdkFirstVideoFrameDecoded::ascii_fingerprint = "C2AA7695D2D8E54277BD0F7525CE4E28";
const uint8_t VosdkFirstVideoFrameDecoded::binary_fingerprint[16] = {0xC2,0xAA,0x76,0x95,0xD2,0xD8,0xE5,0x42,0x77,0xBD,0x0F,0x75,0x25,0xCE,0x4E,0x28};

uint32_t VosdkFirstVideoFrameDecoded::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkFirstVideoFrameDecoded::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkFirstVideoFrameDecoded");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->width);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->height);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkFirstVideoFrameDecoded &a, VosdkFirstVideoFrameDecoded &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.__isset, b.__isset);
}

VosdkFirstVideoFrameDecoded::VosdkFirstVideoFrameDecoded(const VosdkFirstVideoFrameDecoded& other154) {
  header = other154.header;
  width = other154.width;
  height = other154.height;
  __isset = other154.__isset;
}
VosdkFirstVideoFrameDecoded& VosdkFirstVideoFrameDecoded::operator=(const VosdkFirstVideoFrameDecoded& other155) {
  header = other155.header;
  width = other155.width;
  height = other155.height;
  __isset = other155.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkFirstVideoFrameDecoded& obj) {
  using apache::thrift::to_string;
  out << "VosdkFirstVideoFrameDecoded(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "width="; (obj.__isset.width ? (out << to_string(obj.width)) : (out << "<null>"));
  out << ", " << "height="; (obj.__isset.height ? (out << to_string(obj.height)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkFirstVideoFrameDrawed::~VosdkFirstVideoFrameDrawed() throw() {
}


void VosdkFirstVideoFrameDrawed::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkFirstVideoFrameDrawed::__set_width(const int32_t val) {
  this->width = val;
__isset.width = true;
}

void VosdkFirstVideoFrameDrawed::__set_height(const int32_t val) {
  this->height = val;
__isset.height = true;
}

const char* VosdkFirstVideoFrameDrawed::ascii_fingerprint = "C2AA7695D2D8E54277BD0F7525CE4E28";
const uint8_t VosdkFirstVideoFrameDrawed::binary_fingerprint[16] = {0xC2,0xAA,0x76,0x95,0xD2,0xD8,0xE5,0x42,0x77,0xBD,0x0F,0x75,0x25,0xCE,0x4E,0x28};

uint32_t VosdkFirstVideoFrameDrawed::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkFirstVideoFrameDrawed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkFirstVideoFrameDrawed");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->width);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->height);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkFirstVideoFrameDrawed &a, VosdkFirstVideoFrameDrawed &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.__isset, b.__isset);
}

VosdkFirstVideoFrameDrawed::VosdkFirstVideoFrameDrawed(const VosdkFirstVideoFrameDrawed& other156) {
  header = other156.header;
  width = other156.width;
  height = other156.height;
  __isset = other156.__isset;
}
VosdkFirstVideoFrameDrawed& VosdkFirstVideoFrameDrawed::operator=(const VosdkFirstVideoFrameDrawed& other157) {
  header = other157.header;
  width = other157.width;
  height = other157.height;
  __isset = other157.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkFirstVideoFrameDrawed& obj) {
  using apache::thrift::to_string;
  out << "VosdkFirstVideoFrameDrawed(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "width="; (obj.__isset.width ? (out << to_string(obj.width)) : (out << "<null>"));
  out << ", " << "height="; (obj.__isset.height ? (out << to_string(obj.height)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVideoSendingStopped::~VosdkVideoSendingStopped() throw() {
}


void VosdkVideoSendingStopped::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVideoSendingStopped::__set_reason(const std::string& val) {
  this->reason = val;
__isset.reason = true;
}

const char* VosdkVideoSendingStopped::ascii_fingerprint = "7643AB8C86D47EFC29C9DADBFB748150";
const uint8_t VosdkVideoSendingStopped::binary_fingerprint[16] = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

uint32_t VosdkVideoSendingStopped::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVideoSendingStopped::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVideoSendingStopped");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reason) {
    xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->reason);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVideoSendingStopped &a, VosdkVideoSendingStopped &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

VosdkVideoSendingStopped::VosdkVideoSendingStopped(const VosdkVideoSendingStopped& other158) {
  header = other158.header;
  reason = other158.reason;
  __isset = other158.__isset;
}
VosdkVideoSendingStopped& VosdkVideoSendingStopped::operator=(const VosdkVideoSendingStopped& other159) {
  header = other159.header;
  reason = other159.reason;
  __isset = other159.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVideoSendingStopped& obj) {
  using apache::thrift::to_string;
  out << "VosdkVideoSendingStopped(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "reason="; (obj.__isset.reason ? (out << to_string(obj.reason)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVideoDisabled::~VosdkVideoDisabled() throw() {
}


void VosdkVideoDisabled::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

const char* VosdkVideoDisabled::ascii_fingerprint = "C3D41A67DB60E8E4C8D244D93F311688";
const uint8_t VosdkVideoDisabled::binary_fingerprint[16] = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

uint32_t VosdkVideoDisabled::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVideoDisabled::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVideoDisabled");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVideoDisabled &a, VosdkVideoDisabled &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

VosdkVideoDisabled::VosdkVideoDisabled(const VosdkVideoDisabled& other160) {
  header = other160.header;
  __isset = other160.__isset;
}
VosdkVideoDisabled& VosdkVideoDisabled::operator=(const VosdkVideoDisabled& other161) {
  header = other161.header;
  __isset = other161.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVideoDisabled& obj) {
  using apache::thrift::to_string;
  out << "VosdkVideoDisabled(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVideoEnabled::~VosdkVideoEnabled() throw() {
}


void VosdkVideoEnabled::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

const char* VosdkVideoEnabled::ascii_fingerprint = "C3D41A67DB60E8E4C8D244D93F311688";
const uint8_t VosdkVideoEnabled::binary_fingerprint[16] = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

uint32_t VosdkVideoEnabled::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVideoEnabled::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVideoEnabled");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVideoEnabled &a, VosdkVideoEnabled &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

VosdkVideoEnabled::VosdkVideoEnabled(const VosdkVideoEnabled& other162) {
  header = other162.header;
  __isset = other162.__isset;
}
VosdkVideoEnabled& VosdkVideoEnabled::operator=(const VosdkVideoEnabled& other163) {
  header = other163.header;
  __isset = other163.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVideoEnabled& obj) {
  using apache::thrift::to_string;
  out << "VosdkVideoEnabled(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVideoStreamSelected::~VosdkVideoStreamSelected() throw() {
}


void VosdkVideoStreamSelected::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVideoStreamSelected::__set_streamType(const int32_t val) {
  this->streamType = val;
__isset.streamType = true;
}

const char* VosdkVideoStreamSelected::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkVideoStreamSelected::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkVideoStreamSelected::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->streamType);
          this->__isset.streamType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVideoStreamSelected::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVideoStreamSelected");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.streamType) {
    xfer += oprot->writeFieldBegin("streamType", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->streamType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVideoStreamSelected &a, VosdkVideoStreamSelected &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.streamType, b.streamType);
  swap(a.__isset, b.__isset);
}

VosdkVideoStreamSelected::VosdkVideoStreamSelected(const VosdkVideoStreamSelected& other164) {
  header = other164.header;
  streamType = other164.streamType;
  __isset = other164.__isset;
}
VosdkVideoStreamSelected& VosdkVideoStreamSelected::operator=(const VosdkVideoStreamSelected& other165) {
  header = other165.header;
  streamType = other165.streamType;
  __isset = other165.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVideoStreamSelected& obj) {
  using apache::thrift::to_string;
  out << "VosdkVideoStreamSelected(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "streamType="; (obj.__isset.streamType ? (out << to_string(obj.streamType)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVideoStreamChangeRequest::~VosdkVideoStreamChangeRequest() throw() {
}


void VosdkVideoStreamChangeRequest::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVideoStreamChangeRequest::__set_streamType(const int32_t val) {
  this->streamType = val;
__isset.streamType = true;
}

const char* VosdkVideoStreamChangeRequest::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkVideoStreamChangeRequest::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkVideoStreamChangeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->streamType);
          this->__isset.streamType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVideoStreamChangeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVideoStreamChangeRequest");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.streamType) {
    xfer += oprot->writeFieldBegin("streamType", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->streamType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVideoStreamChangeRequest &a, VosdkVideoStreamChangeRequest &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.streamType, b.streamType);
  swap(a.__isset, b.__isset);
}

VosdkVideoStreamChangeRequest::VosdkVideoStreamChangeRequest(const VosdkVideoStreamChangeRequest& other166) {
  header = other166.header;
  streamType = other166.streamType;
  __isset = other166.__isset;
}
VosdkVideoStreamChangeRequest& VosdkVideoStreamChangeRequest::operator=(const VosdkVideoStreamChangeRequest& other167) {
  header = other167.header;
  streamType = other167.streamType;
  __isset = other167.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVideoStreamChangeRequest& obj) {
  using apache::thrift::to_string;
  out << "VosdkVideoStreamChangeRequest(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "streamType="; (obj.__isset.streamType ? (out << to_string(obj.streamType)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkFirstDataPacketSent::~VosdkFirstDataPacketSent() throw() {
}


void VosdkFirstDataPacketSent::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkFirstDataPacketSent::__set_transportType(const int32_t val) {
  this->transportType = val;
__isset.transportType = true;
}

const char* VosdkFirstDataPacketSent::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkFirstDataPacketSent::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkFirstDataPacketSent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transportType);
          this->__isset.transportType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkFirstDataPacketSent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkFirstDataPacketSent");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transportType) {
    xfer += oprot->writeFieldBegin("transportType", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->transportType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkFirstDataPacketSent &a, VosdkFirstDataPacketSent &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.transportType, b.transportType);
  swap(a.__isset, b.__isset);
}

VosdkFirstDataPacketSent::VosdkFirstDataPacketSent(const VosdkFirstDataPacketSent& other168) {
  header = other168.header;
  transportType = other168.transportType;
  __isset = other168.__isset;
}
VosdkFirstDataPacketSent& VosdkFirstDataPacketSent::operator=(const VosdkFirstDataPacketSent& other169) {
  header = other169.header;
  transportType = other169.transportType;
  __isset = other169.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkFirstDataPacketSent& obj) {
  using apache::thrift::to_string;
  out << "VosdkFirstDataPacketSent(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "transportType="; (obj.__isset.transportType ? (out << to_string(obj.transportType)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkFirstDataPacketReceived::~VosdkFirstDataPacketReceived() throw() {
}


void VosdkFirstDataPacketReceived::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkFirstDataPacketReceived::__set_transportType(const int32_t val) {
  this->transportType = val;
__isset.transportType = true;
}

const char* VosdkFirstDataPacketReceived::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkFirstDataPacketReceived::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkFirstDataPacketReceived::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transportType);
          this->__isset.transportType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkFirstDataPacketReceived::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkFirstDataPacketReceived");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transportType) {
    xfer += oprot->writeFieldBegin("transportType", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->transportType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkFirstDataPacketReceived &a, VosdkFirstDataPacketReceived &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.transportType, b.transportType);
  swap(a.__isset, b.__isset);
}

VosdkFirstDataPacketReceived::VosdkFirstDataPacketReceived(const VosdkFirstDataPacketReceived& other170) {
  header = other170.header;
  transportType = other170.transportType;
  __isset = other170.__isset;
}
VosdkFirstDataPacketReceived& VosdkFirstDataPacketReceived::operator=(const VosdkFirstDataPacketReceived& other171) {
  header = other171.header;
  transportType = other171.transportType;
  __isset = other171.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkFirstDataPacketReceived& obj) {
  using apache::thrift::to_string;
  out << "VosdkFirstDataPacketReceived(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "transportType="; (obj.__isset.transportType ? (out << to_string(obj.transportType)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkError::~VosdkError() throw() {
}


void VosdkError::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkError::__set_errorNo(const int32_t val) {
  this->errorNo = val;
__isset.errorNo = true;
}

void VosdkError::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

const char* VosdkError::ascii_fingerprint = "15CE969B3D2A87224C3746EA3116329C";
const uint8_t VosdkError::binary_fingerprint[16] = {0x15,0xCE,0x96,0x9B,0x3D,0x2A,0x87,0x22,0x4C,0x37,0x46,0xEA,0x31,0x16,0x32,0x9C};

uint32_t VosdkError::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorNo);
          this->__isset.errorNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkError::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkError");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.errorNo) {
    xfer += oprot->writeFieldBegin("errorNo", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->errorNo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkError &a, VosdkError &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.errorNo, b.errorNo);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

VosdkError::VosdkError(const VosdkError& other172) {
  header = other172.header;
  errorNo = other172.errorNo;
  description = other172.description;
  __isset = other172.__isset;
}
VosdkError& VosdkError::operator=(const VosdkError& other173) {
  header = other173.header;
  errorNo = other173.errorNo;
  description = other173.description;
  __isset = other173.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkError& obj) {
  using apache::thrift::to_string;
  out << "VosdkError(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "errorNo="; (obj.__isset.errorNo ? (out << to_string(obj.errorNo)) : (out << "<null>"));
  out << ", " << "description="; (obj.__isset.description ? (out << to_string(obj.description)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkPeerOnlineStatus::~VosdkPeerOnlineStatus() throw() {
}


void VosdkPeerOnlineStatus::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

const char* VosdkPeerOnlineStatus::ascii_fingerprint = "C3D41A67DB60E8E4C8D244D93F311688";
const uint8_t VosdkPeerOnlineStatus::binary_fingerprint[16] = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

uint32_t VosdkPeerOnlineStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkPeerOnlineStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkPeerOnlineStatus");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkPeerOnlineStatus &a, VosdkPeerOnlineStatus &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

VosdkPeerOnlineStatus::VosdkPeerOnlineStatus(const VosdkPeerOnlineStatus& other174) {
  header = other174.header;
  __isset = other174.__isset;
}
VosdkPeerOnlineStatus& VosdkPeerOnlineStatus::operator=(const VosdkPeerOnlineStatus& other175) {
  header = other175.header;
  __isset = other175.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkPeerOnlineStatus& obj) {
  using apache::thrift::to_string;
  out << "VosdkPeerOnlineStatus(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkPeerOfflineStatus::~VosdkPeerOfflineStatus() throw() {
}


void VosdkPeerOfflineStatus::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkPeerOfflineStatus::__set_reason(const std::string& val) {
  this->reason = val;
__isset.reason = true;
}

const char* VosdkPeerOfflineStatus::ascii_fingerprint = "7643AB8C86D47EFC29C9DADBFB748150";
const uint8_t VosdkPeerOfflineStatus::binary_fingerprint[16] = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

uint32_t VosdkPeerOfflineStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkPeerOfflineStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkPeerOfflineStatus");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reason) {
    xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->reason);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkPeerOfflineStatus &a, VosdkPeerOfflineStatus &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

VosdkPeerOfflineStatus::VosdkPeerOfflineStatus(const VosdkPeerOfflineStatus& other176) {
  header = other176.header;
  reason = other176.reason;
  __isset = other176.__isset;
}
VosdkPeerOfflineStatus& VosdkPeerOfflineStatus::operator=(const VosdkPeerOfflineStatus& other177) {
  header = other177.header;
  reason = other177.reason;
  __isset = other177.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkPeerOfflineStatus& obj) {
  using apache::thrift::to_string;
  out << "VosdkPeerOfflineStatus(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "reason="; (obj.__isset.reason ? (out << to_string(obj.reason)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkAudioMutePeerStatus::~VosdkAudioMutePeerStatus() throw() {
}


void VosdkAudioMutePeerStatus::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkAudioMutePeerStatus::__set_muted(const bool val) {
  this->muted = val;
__isset.muted = true;
}

const char* VosdkAudioMutePeerStatus::ascii_fingerprint = "B3BD93EBB5756141F0719C1251165BAA";
const uint8_t VosdkAudioMutePeerStatus::binary_fingerprint[16] = {0xB3,0xBD,0x93,0xEB,0xB5,0x75,0x61,0x41,0xF0,0x71,0x9C,0x12,0x51,0x16,0x5B,0xAA};

uint32_t VosdkAudioMutePeerStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->muted);
          this->__isset.muted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkAudioMutePeerStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkAudioMutePeerStatus");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.muted) {
    xfer += oprot->writeFieldBegin("muted", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->muted);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkAudioMutePeerStatus &a, VosdkAudioMutePeerStatus &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.muted, b.muted);
  swap(a.__isset, b.__isset);
}

VosdkAudioMutePeerStatus::VosdkAudioMutePeerStatus(const VosdkAudioMutePeerStatus& other178) {
  header = other178.header;
  muted = other178.muted;
  __isset = other178.__isset;
}
VosdkAudioMutePeerStatus& VosdkAudioMutePeerStatus::operator=(const VosdkAudioMutePeerStatus& other179) {
  header = other179.header;
  muted = other179.muted;
  __isset = other179.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkAudioMutePeerStatus& obj) {
  using apache::thrift::to_string;
  out << "VosdkAudioMutePeerStatus(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "muted="; (obj.__isset.muted ? (out << to_string(obj.muted)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVideoMutePeerStatus::~VosdkVideoMutePeerStatus() throw() {
}


void VosdkVideoMutePeerStatus::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVideoMutePeerStatus::__set_muted(const bool val) {
  this->muted = val;
__isset.muted = true;
}

const char* VosdkVideoMutePeerStatus::ascii_fingerprint = "B3BD93EBB5756141F0719C1251165BAA";
const uint8_t VosdkVideoMutePeerStatus::binary_fingerprint[16] = {0xB3,0xBD,0x93,0xEB,0xB5,0x75,0x61,0x41,0xF0,0x71,0x9C,0x12,0x51,0x16,0x5B,0xAA};

uint32_t VosdkVideoMutePeerStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->muted);
          this->__isset.muted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVideoMutePeerStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVideoMutePeerStatus");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.muted) {
    xfer += oprot->writeFieldBegin("muted", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->muted);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVideoMutePeerStatus &a, VosdkVideoMutePeerStatus &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.muted, b.muted);
  swap(a.__isset, b.__isset);
}

VosdkVideoMutePeerStatus::VosdkVideoMutePeerStatus(const VosdkVideoMutePeerStatus& other180) {
  header = other180.header;
  muted = other180.muted;
  __isset = other180.__isset;
}
VosdkVideoMutePeerStatus& VosdkVideoMutePeerStatus::operator=(const VosdkVideoMutePeerStatus& other181) {
  header = other181.header;
  muted = other181.muted;
  __isset = other181.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVideoMutePeerStatus& obj) {
  using apache::thrift::to_string;
  out << "VosdkVideoMutePeerStatus(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "muted="; (obj.__isset.muted ? (out << to_string(obj.muted)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkAudioMuteAllStatus::~VosdkAudioMuteAllStatus() throw() {
}


void VosdkAudioMuteAllStatus::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkAudioMuteAllStatus::__set_muted(const bool val) {
  this->muted = val;
__isset.muted = true;
}

const char* VosdkAudioMuteAllStatus::ascii_fingerprint = "B3BD93EBB5756141F0719C1251165BAA";
const uint8_t VosdkAudioMuteAllStatus::binary_fingerprint[16] = {0xB3,0xBD,0x93,0xEB,0xB5,0x75,0x61,0x41,0xF0,0x71,0x9C,0x12,0x51,0x16,0x5B,0xAA};

uint32_t VosdkAudioMuteAllStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->muted);
          this->__isset.muted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkAudioMuteAllStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkAudioMuteAllStatus");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.muted) {
    xfer += oprot->writeFieldBegin("muted", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->muted);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkAudioMuteAllStatus &a, VosdkAudioMuteAllStatus &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.muted, b.muted);
  swap(a.__isset, b.__isset);
}

VosdkAudioMuteAllStatus::VosdkAudioMuteAllStatus(const VosdkAudioMuteAllStatus& other182) {
  header = other182.header;
  muted = other182.muted;
  __isset = other182.__isset;
}
VosdkAudioMuteAllStatus& VosdkAudioMuteAllStatus::operator=(const VosdkAudioMuteAllStatus& other183) {
  header = other183.header;
  muted = other183.muted;
  __isset = other183.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkAudioMuteAllStatus& obj) {
  using apache::thrift::to_string;
  out << "VosdkAudioMuteAllStatus(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "muted="; (obj.__isset.muted ? (out << to_string(obj.muted)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVideoMuteAllStatus::~VosdkVideoMuteAllStatus() throw() {
}


void VosdkVideoMuteAllStatus::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVideoMuteAllStatus::__set_muted(const bool val) {
  this->muted = val;
__isset.muted = true;
}

const char* VosdkVideoMuteAllStatus::ascii_fingerprint = "B3BD93EBB5756141F0719C1251165BAA";
const uint8_t VosdkVideoMuteAllStatus::binary_fingerprint[16] = {0xB3,0xBD,0x93,0xEB,0xB5,0x75,0x61,0x41,0xF0,0x71,0x9C,0x12,0x51,0x16,0x5B,0xAA};

uint32_t VosdkVideoMuteAllStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->muted);
          this->__isset.muted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVideoMuteAllStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVideoMuteAllStatus");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.muted) {
    xfer += oprot->writeFieldBegin("muted", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->muted);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVideoMuteAllStatus &a, VosdkVideoMuteAllStatus &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.muted, b.muted);
  swap(a.__isset, b.__isset);
}

VosdkVideoMuteAllStatus::VosdkVideoMuteAllStatus(const VosdkVideoMuteAllStatus& other184) {
  header = other184.header;
  muted = other184.muted;
  __isset = other184.__isset;
}
VosdkVideoMuteAllStatus& VosdkVideoMuteAllStatus::operator=(const VosdkVideoMuteAllStatus& other185) {
  header = other185.header;
  muted = other185.muted;
  __isset = other185.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVideoMuteAllStatus& obj) {
  using apache::thrift::to_string;
  out << "VosdkVideoMuteAllStatus(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "muted="; (obj.__isset.muted ? (out << to_string(obj.muted)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkDefaultPeerStatus::~VosdkDefaultPeerStatus() throw() {
}


void VosdkDefaultPeerStatus::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkDefaultPeerStatus::__set_streamType(const int32_t val) {
  this->streamType = val;
__isset.streamType = true;
}

const char* VosdkDefaultPeerStatus::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkDefaultPeerStatus::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkDefaultPeerStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->streamType);
          this->__isset.streamType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkDefaultPeerStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkDefaultPeerStatus");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.streamType) {
    xfer += oprot->writeFieldBegin("streamType", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->streamType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkDefaultPeerStatus &a, VosdkDefaultPeerStatus &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.streamType, b.streamType);
  swap(a.__isset, b.__isset);
}

VosdkDefaultPeerStatus::VosdkDefaultPeerStatus(const VosdkDefaultPeerStatus& other186) {
  header = other186.header;
  streamType = other186.streamType;
  __isset = other186.__isset;
}
VosdkDefaultPeerStatus& VosdkDefaultPeerStatus::operator=(const VosdkDefaultPeerStatus& other187) {
  header = other187.header;
  streamType = other187.streamType;
  __isset = other187.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkDefaultPeerStatus& obj) {
  using apache::thrift::to_string;
  out << "VosdkDefaultPeerStatus(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "streamType="; (obj.__isset.streamType ? (out << to_string(obj.streamType)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PStunLoginSuccess::~VosdkP2PStunLoginSuccess() throw() {
}


void VosdkP2PStunLoginSuccess::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PStunLoginSuccess::__set_serverIp(const std::string& val) {
  this->serverIp = val;
__isset.serverIp = true;
}

const char* VosdkP2PStunLoginSuccess::ascii_fingerprint = "7643AB8C86D47EFC29C9DADBFB748150";
const uint8_t VosdkP2PStunLoginSuccess::binary_fingerprint[16] = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

uint32_t VosdkP2PStunLoginSuccess::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverIp);
          this->__isset.serverIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PStunLoginSuccess::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PStunLoginSuccess");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverIp) {
    xfer += oprot->writeFieldBegin("serverIp", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->serverIp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PStunLoginSuccess &a, VosdkP2PStunLoginSuccess &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.serverIp, b.serverIp);
  swap(a.__isset, b.__isset);
}

VosdkP2PStunLoginSuccess::VosdkP2PStunLoginSuccess(const VosdkP2PStunLoginSuccess& other188) {
  header = other188.header;
  serverIp = other188.serverIp;
  __isset = other188.__isset;
}
VosdkP2PStunLoginSuccess& VosdkP2PStunLoginSuccess::operator=(const VosdkP2PStunLoginSuccess& other189) {
  header = other189.header;
  serverIp = other189.serverIp;
  __isset = other189.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PStunLoginSuccess& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PStunLoginSuccess(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "serverIp="; (obj.__isset.serverIp ? (out << to_string(obj.serverIp)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PStunLoginFailed::~VosdkP2PStunLoginFailed() throw() {
}


void VosdkP2PStunLoginFailed::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PStunLoginFailed::__set_serverIp(const std::string& val) {
  this->serverIp = val;
__isset.serverIp = true;
}

void VosdkP2PStunLoginFailed::__set_code(const int32_t val) {
  this->code = val;
__isset.code = true;
}

const char* VosdkP2PStunLoginFailed::ascii_fingerprint = "D2E311195234CBA8120BB35E28B5AABC";
const uint8_t VosdkP2PStunLoginFailed::binary_fingerprint[16] = {0xD2,0xE3,0x11,0x19,0x52,0x34,0xCB,0xA8,0x12,0x0B,0xB3,0x5E,0x28,0xB5,0xAA,0xBC};

uint32_t VosdkP2PStunLoginFailed::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverIp);
          this->__isset.serverIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PStunLoginFailed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PStunLoginFailed");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverIp) {
    xfer += oprot->writeFieldBegin("serverIp", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->serverIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->code);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PStunLoginFailed &a, VosdkP2PStunLoginFailed &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.serverIp, b.serverIp);
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

VosdkP2PStunLoginFailed::VosdkP2PStunLoginFailed(const VosdkP2PStunLoginFailed& other190) {
  header = other190.header;
  serverIp = other190.serverIp;
  code = other190.code;
  __isset = other190.__isset;
}
VosdkP2PStunLoginFailed& VosdkP2PStunLoginFailed::operator=(const VosdkP2PStunLoginFailed& other191) {
  header = other191.header;
  serverIp = other191.serverIp;
  code = other191.code;
  __isset = other191.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PStunLoginFailed& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PStunLoginFailed(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "serverIp="; (obj.__isset.serverIp ? (out << to_string(obj.serverIp)) : (out << "<null>"));
  out << ", " << "code="; (obj.__isset.code ? (out << to_string(obj.code)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PPeerTryTouch::~VosdkP2PPeerTryTouch() throw() {
}


void VosdkP2PPeerTryTouch::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PPeerTryTouch::__set_peerLanIp(const std::string& val) {
  this->peerLanIp = val;
__isset.peerLanIp = true;
}

void VosdkP2PPeerTryTouch::__set_peerWanIp(const std::string& val) {
  this->peerWanIp = val;
__isset.peerWanIp = true;
}

const char* VosdkP2PPeerTryTouch::ascii_fingerprint = "2BEC68E12A9BF1F7770FFF5035BFBCAC";
const uint8_t VosdkP2PPeerTryTouch::binary_fingerprint[16] = {0x2B,0xEC,0x68,0xE1,0x2A,0x9B,0xF1,0xF7,0x77,0x0F,0xFF,0x50,0x35,0xBF,0xBC,0xAC};

uint32_t VosdkP2PPeerTryTouch::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->peerLanIp);
          this->__isset.peerLanIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->peerWanIp);
          this->__isset.peerWanIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PPeerTryTouch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PPeerTryTouch");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerLanIp) {
    xfer += oprot->writeFieldBegin("peerLanIp", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->peerLanIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerWanIp) {
    xfer += oprot->writeFieldBegin("peerWanIp", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->peerWanIp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PPeerTryTouch &a, VosdkP2PPeerTryTouch &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerLanIp, b.peerLanIp);
  swap(a.peerWanIp, b.peerWanIp);
  swap(a.__isset, b.__isset);
}

VosdkP2PPeerTryTouch::VosdkP2PPeerTryTouch(const VosdkP2PPeerTryTouch& other192) {
  header = other192.header;
  peerLanIp = other192.peerLanIp;
  peerWanIp = other192.peerWanIp;
  __isset = other192.__isset;
}
VosdkP2PPeerTryTouch& VosdkP2PPeerTryTouch::operator=(const VosdkP2PPeerTryTouch& other193) {
  header = other193.header;
  peerLanIp = other193.peerLanIp;
  peerWanIp = other193.peerWanIp;
  __isset = other193.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PPeerTryTouch& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PPeerTryTouch(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerLanIp="; (obj.__isset.peerLanIp ? (out << to_string(obj.peerLanIp)) : (out << "<null>"));
  out << ", " << "peerWanIp="; (obj.__isset.peerWanIp ? (out << to_string(obj.peerWanIp)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PPeerConnected::~VosdkP2PPeerConnected() throw() {
}


void VosdkP2PPeerConnected::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PPeerConnected::__set_peerIp(const std::string& val) {
  this->peerIp = val;
__isset.peerIp = true;
}

const char* VosdkP2PPeerConnected::ascii_fingerprint = "7643AB8C86D47EFC29C9DADBFB748150";
const uint8_t VosdkP2PPeerConnected::binary_fingerprint[16] = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

uint32_t VosdkP2PPeerConnected::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->peerIp);
          this->__isset.peerIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PPeerConnected::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PPeerConnected");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peerIp) {
    xfer += oprot->writeFieldBegin("peerIp", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->peerIp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PPeerConnected &a, VosdkP2PPeerConnected &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.peerIp, b.peerIp);
  swap(a.__isset, b.__isset);
}

VosdkP2PPeerConnected::VosdkP2PPeerConnected(const VosdkP2PPeerConnected& other194) {
  header = other194.header;
  peerIp = other194.peerIp;
  __isset = other194.__isset;
}
VosdkP2PPeerConnected& VosdkP2PPeerConnected::operator=(const VosdkP2PPeerConnected& other195) {
  header = other195.header;
  peerIp = other195.peerIp;
  __isset = other195.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PPeerConnected& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PPeerConnected(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "peerIp="; (obj.__isset.peerIp ? (out << to_string(obj.peerIp)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PPeerDisconnected::~VosdkP2PPeerDisconnected() throw() {
}


void VosdkP2PPeerDisconnected::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PPeerDisconnected::__set_reason(const std::string& val) {
  this->reason = val;
__isset.reason = true;
}

const char* VosdkP2PPeerDisconnected::ascii_fingerprint = "7643AB8C86D47EFC29C9DADBFB748150";
const uint8_t VosdkP2PPeerDisconnected::binary_fingerprint[16] = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

uint32_t VosdkP2PPeerDisconnected::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PPeerDisconnected::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PPeerDisconnected");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reason) {
    xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->reason);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PPeerDisconnected &a, VosdkP2PPeerDisconnected &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

VosdkP2PPeerDisconnected::VosdkP2PPeerDisconnected(const VosdkP2PPeerDisconnected& other196) {
  header = other196.header;
  reason = other196.reason;
  __isset = other196.__isset;
}
VosdkP2PPeerDisconnected& VosdkP2PPeerDisconnected::operator=(const VosdkP2PPeerDisconnected& other197) {
  header = other197.header;
  reason = other197.reason;
  __isset = other197.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PPeerDisconnected& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PPeerDisconnected(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "reason="; (obj.__isset.reason ? (out << to_string(obj.reason)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PStart::~VosdkP2PStart() throw() {
}


void VosdkP2PStart::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PStart::__set_threshold(const int32_t val) {
  this->threshold = val;
__isset.threshold = true;
}

void VosdkP2PStart::__set_label(const std::string& val) {
  this->label = val;
__isset.label = true;
}

const char* VosdkP2PStart::ascii_fingerprint = "15CE969B3D2A87224C3746EA3116329C";
const uint8_t VosdkP2PStart::binary_fingerprint[16] = {0x15,0xCE,0x96,0x9B,0x3D,0x2A,0x87,0x22,0x4C,0x37,0x46,0xEA,0x31,0x16,0x32,0x9C};

uint32_t VosdkP2PStart::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->threshold);
          this->__isset.threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->label);
          this->__isset.label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PStart::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PStart");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.threshold) {
    xfer += oprot->writeFieldBegin("threshold", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->threshold);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.label) {
    xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->label);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PStart &a, VosdkP2PStart &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.threshold, b.threshold);
  swap(a.label, b.label);
  swap(a.__isset, b.__isset);
}

VosdkP2PStart::VosdkP2PStart(const VosdkP2PStart& other198) {
  header = other198.header;
  threshold = other198.threshold;
  label = other198.label;
  __isset = other198.__isset;
}
VosdkP2PStart& VosdkP2PStart::operator=(const VosdkP2PStart& other199) {
  header = other199.header;
  threshold = other199.threshold;
  label = other199.label;
  __isset = other199.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PStart& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PStart(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "threshold="; (obj.__isset.threshold ? (out << to_string(obj.threshold)) : (out << "<null>"));
  out << ", " << "label="; (obj.__isset.label ? (out << to_string(obj.label)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkP2PStop::~VosdkP2PStop() throw() {
}


void VosdkP2PStop::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkP2PStop::__set_reason(const std::string& val) {
  this->reason = val;
__isset.reason = true;
}

const char* VosdkP2PStop::ascii_fingerprint = "7643AB8C86D47EFC29C9DADBFB748150";
const uint8_t VosdkP2PStop::binary_fingerprint[16] = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

uint32_t VosdkP2PStop::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkP2PStop::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkP2PStop");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reason) {
    xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->reason);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkP2PStop &a, VosdkP2PStop &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

VosdkP2PStop::VosdkP2PStop(const VosdkP2PStop& other200) {
  header = other200.header;
  reason = other200.reason;
  __isset = other200.__isset;
}
VosdkP2PStop& VosdkP2PStop::operator=(const VosdkP2PStop& other201) {
  header = other201.header;
  reason = other201.reason;
  __isset = other201.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkP2PStop& obj) {
  using apache::thrift::to_string;
  out << "VosdkP2PStop(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "reason="; (obj.__isset.reason ? (out << to_string(obj.reason)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkAPEvent::~VosdkAPEvent() throw() {
}


void VosdkAPEvent::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkAPEvent::__set_ec(const int32_t val) {
  this->ec = val;
__isset.ec = true;
}

void VosdkAPEvent::__set_sc(const int32_t val) {
  this->sc = val;
__isset.sc = true;
}

void VosdkAPEvent::__set_serverIp(const std::string& val) {
  this->serverIp = val;
__isset.serverIp = true;
}

void VosdkAPEvent::__set_firstSuccess(const bool val) {
  this->firstSuccess = val;
__isset.firstSuccess = true;
}

void VosdkAPEvent::__set_responseTime(const int32_t val) {
  this->responseTime = val;
__isset.responseTime = true;
}

void VosdkAPEvent::__set_serverIpList(const std::vector<std::string> & val) {
  this->serverIpList = val;
__isset.serverIpList = true;
}

void VosdkAPEvent::__set_ssid(const std::string& val) {
  this->ssid = val;
__isset.ssid = true;
}

void VosdkAPEvent::__set_bssid(const std::string& val) {
  this->bssid = val;
__isset.bssid = true;
}

void VosdkAPEvent::__set_localWanIp(const std::string& val) {
  this->localWanIp = val;
__isset.localWanIp = true;
}

void VosdkAPEvent::__set_ispName(const std::string& val) {
  this->ispName = val;
__isset.ispName = true;
}

void VosdkAPEvent::__set_minorIsp(const bool val) {
  this->minorIsp = val;
__isset.minorIsp = true;
}

void VosdkAPEvent::__set_flag(const int32_t val) {
  this->flag = val;
__isset.flag = true;
}

void VosdkAPEvent::__set_serviceName(const std::string& val) {
  this->serviceName = val;
__isset.serviceName = true;
}

void VosdkAPEvent::__set_detail(const std::string& val) {
  this->detail = val;
__isset.detail = true;
}

const char* VosdkAPEvent::ascii_fingerprint = "B452357AC7CDE8A202B7F59D3834ADB2";
const uint8_t VosdkAPEvent::binary_fingerprint[16] = {0xB4,0x52,0x35,0x7A,0xC7,0xCD,0xE8,0xA2,0x02,0xB7,0xF5,0x9D,0x38,0x34,0xAD,0xB2};

uint32_t VosdkAPEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ec);
          this->__isset.ec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sc);
          this->__isset.sc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverIp);
          this->__isset.serverIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->firstSuccess);
          this->__isset.firstSuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->responseTime);
          this->__isset.responseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serverIpList.clear();
            uint32_t _size202;
            ::apache::thrift::protocol::TType _etype205;
            xfer += iprot->readListBegin(_etype205, _size202);
            this->serverIpList.resize(_size202);
            uint32_t _i206;
            for (_i206 = 0; _i206 < _size202; ++_i206)
            {
              xfer += iprot->readString(this->serverIpList[_i206]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serverIpList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ssid);
          this->__isset.ssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bssid);
          this->__isset.bssid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localWanIp);
          this->__isset.localWanIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ispName);
          this->__isset.ispName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->minorIsp);
          this->__isset.minorIsp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flag);
          this->__isset.flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceName);
          this->__isset.serviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detail);
          this->__isset.detail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkAPEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkAPEvent");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ec) {
    xfer += oprot->writeFieldBegin("ec", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->ec);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sc) {
    xfer += oprot->writeFieldBegin("sc", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->sc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverIp) {
    xfer += oprot->writeFieldBegin("serverIp", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->serverIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstSuccess) {
    xfer += oprot->writeFieldBegin("firstSuccess", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->firstSuccess);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.responseTime) {
    xfer += oprot->writeFieldBegin("responseTime", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->responseTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverIpList) {
    xfer += oprot->writeFieldBegin("serverIpList", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->serverIpList.size()));
      std::vector<std::string> ::const_iterator _iter207;
      for (_iter207 = this->serverIpList.begin(); _iter207 != this->serverIpList.end(); ++_iter207)
      {
        xfer += oprot->writeString((*_iter207));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ssid) {
    xfer += oprot->writeFieldBegin("ssid", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->ssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bssid) {
    xfer += oprot->writeFieldBegin("bssid", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->bssid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.localWanIp) {
    xfer += oprot->writeFieldBegin("localWanIp", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->localWanIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ispName) {
    xfer += oprot->writeFieldBegin("ispName", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->ispName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minorIsp) {
    xfer += oprot->writeFieldBegin("minorIsp", ::apache::thrift::protocol::T_BOOL, 15);
    xfer += oprot->writeBool(this->minorIsp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.flag) {
    xfer += oprot->writeFieldBegin("flag", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->flag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceName) {
    xfer += oprot->writeFieldBegin("serviceName", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->serviceName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.detail) {
    xfer += oprot->writeFieldBegin("detail", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->detail);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkAPEvent &a, VosdkAPEvent &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.ec, b.ec);
  swap(a.sc, b.sc);
  swap(a.serverIp, b.serverIp);
  swap(a.firstSuccess, b.firstSuccess);
  swap(a.responseTime, b.responseTime);
  swap(a.serverIpList, b.serverIpList);
  swap(a.ssid, b.ssid);
  swap(a.bssid, b.bssid);
  swap(a.localWanIp, b.localWanIp);
  swap(a.ispName, b.ispName);
  swap(a.minorIsp, b.minorIsp);
  swap(a.flag, b.flag);
  swap(a.serviceName, b.serviceName);
  swap(a.detail, b.detail);
  swap(a.__isset, b.__isset);
}

VosdkAPEvent::VosdkAPEvent(const VosdkAPEvent& other208) {
  header = other208.header;
  ec = other208.ec;
  sc = other208.sc;
  serverIp = other208.serverIp;
  firstSuccess = other208.firstSuccess;
  responseTime = other208.responseTime;
  serverIpList = other208.serverIpList;
  ssid = other208.ssid;
  bssid = other208.bssid;
  localWanIp = other208.localWanIp;
  ispName = other208.ispName;
  minorIsp = other208.minorIsp;
  flag = other208.flag;
  serviceName = other208.serviceName;
  detail = other208.detail;
  __isset = other208.__isset;
}
VosdkAPEvent& VosdkAPEvent::operator=(const VosdkAPEvent& other209) {
  header = other209.header;
  ec = other209.ec;
  sc = other209.sc;
  serverIp = other209.serverIp;
  firstSuccess = other209.firstSuccess;
  responseTime = other209.responseTime;
  serverIpList = other209.serverIpList;
  ssid = other209.ssid;
  bssid = other209.bssid;
  localWanIp = other209.localWanIp;
  ispName = other209.ispName;
  minorIsp = other209.minorIsp;
  flag = other209.flag;
  serviceName = other209.serviceName;
  detail = other209.detail;
  __isset = other209.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkAPEvent& obj) {
  using apache::thrift::to_string;
  out << "VosdkAPEvent(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "ec="; (obj.__isset.ec ? (out << to_string(obj.ec)) : (out << "<null>"));
  out << ", " << "sc="; (obj.__isset.sc ? (out << to_string(obj.sc)) : (out << "<null>"));
  out << ", " << "serverIp="; (obj.__isset.serverIp ? (out << to_string(obj.serverIp)) : (out << "<null>"));
  out << ", " << "firstSuccess="; (obj.__isset.firstSuccess ? (out << to_string(obj.firstSuccess)) : (out << "<null>"));
  out << ", " << "responseTime="; (obj.__isset.responseTime ? (out << to_string(obj.responseTime)) : (out << "<null>"));
  out << ", " << "serverIpList="; (obj.__isset.serverIpList ? (out << to_string(obj.serverIpList)) : (out << "<null>"));
  out << ", " << "ssid="; (obj.__isset.ssid ? (out << to_string(obj.ssid)) : (out << "<null>"));
  out << ", " << "bssid="; (obj.__isset.bssid ? (out << to_string(obj.bssid)) : (out << "<null>"));
  out << ", " << "localWanIp="; (obj.__isset.localWanIp ? (out << to_string(obj.localWanIp)) : (out << "<null>"));
  out << ", " << "ispName="; (obj.__isset.ispName ? (out << to_string(obj.ispName)) : (out << "<null>"));
  out << ", " << "minorIsp="; (obj.__isset.minorIsp ? (out << to_string(obj.minorIsp)) : (out << "<null>"));
  out << ", " << "flag="; (obj.__isset.flag ? (out << to_string(obj.flag)) : (out << "<null>"));
  out << ", " << "serviceName="; (obj.__isset.serviceName ? (out << to_string(obj.serviceName)) : (out << "<null>"));
  out << ", " << "detail="; (obj.__isset.detail ? (out << to_string(obj.detail)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkReportStats::~VosdkReportStats() throw() {
}


void VosdkReportStats::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkReportStats::__set_allTotalTxPackets(const int32_t val) {
  this->allTotalTxPackets = val;
__isset.allTotalTxPackets = true;
}

void VosdkReportStats::__set_allTotalAckedPackets(const int32_t val) {
  this->allTotalAckedPackets = val;
__isset.allTotalAckedPackets = true;
}

void VosdkReportStats::__set_allValidTxPackets(const int32_t val) {
  this->allValidTxPackets = val;
__isset.allValidTxPackets = true;
}

void VosdkReportStats::__set_allValidAckedPackets(const int32_t val) {
  this->allValidAckedPackets = val;
__isset.allValidAckedPackets = true;
}

void VosdkReportStats::__set_counterTotalTxPackets(const int32_t val) {
  this->counterTotalTxPackets = val;
__isset.counterTotalTxPackets = true;
}

void VosdkReportStats::__set_counterTotalAckedPackets(const int32_t val) {
  this->counterTotalAckedPackets = val;
__isset.counterTotalAckedPackets = true;
}

void VosdkReportStats::__set_counterValidTxPackets(const int32_t val) {
  this->counterValidTxPackets = val;
__isset.counterValidTxPackets = true;
}

void VosdkReportStats::__set_counterValidAckedPackets(const int32_t val) {
  this->counterValidAckedPackets = val;
__isset.counterValidAckedPackets = true;
}

void VosdkReportStats::__set_eventTotalTxPackets(const int32_t val) {
  this->eventTotalTxPackets = val;
__isset.eventTotalTxPackets = true;
}

void VosdkReportStats::__set_eventTotalAckedPackets(const int32_t val) {
  this->eventTotalAckedPackets = val;
__isset.eventTotalAckedPackets = true;
}

void VosdkReportStats::__set_eventValidTxPackets(const int32_t val) {
  this->eventValidTxPackets = val;
__isset.eventValidTxPackets = true;
}

void VosdkReportStats::__set_eventValidAckedPackets(const int32_t val) {
  this->eventValidAckedPackets = val;
__isset.eventValidAckedPackets = true;
}

const char* VosdkReportStats::ascii_fingerprint = "ABF92FD3B730451771F74CCD70BE0A28";
const uint8_t VosdkReportStats::binary_fingerprint[16] = {0xAB,0xF9,0x2F,0xD3,0xB7,0x30,0x45,0x17,0x71,0xF7,0x4C,0xCD,0x70,0xBE,0x0A,0x28};

uint32_t VosdkReportStats::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->allTotalTxPackets);
          this->__isset.allTotalTxPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->allTotalAckedPackets);
          this->__isset.allTotalAckedPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->allValidTxPackets);
          this->__isset.allValidTxPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->allValidAckedPackets);
          this->__isset.allValidAckedPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->counterTotalTxPackets);
          this->__isset.counterTotalTxPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->counterTotalAckedPackets);
          this->__isset.counterTotalAckedPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->counterValidTxPackets);
          this->__isset.counterValidTxPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->counterValidAckedPackets);
          this->__isset.counterValidAckedPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventTotalTxPackets);
          this->__isset.eventTotalTxPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventTotalAckedPackets);
          this->__isset.eventTotalAckedPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventValidTxPackets);
          this->__isset.eventValidTxPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventValidAckedPackets);
          this->__isset.eventValidAckedPackets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkReportStats::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkReportStats");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.allTotalTxPackets) {
    xfer += oprot->writeFieldBegin("allTotalTxPackets", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->allTotalTxPackets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.allTotalAckedPackets) {
    xfer += oprot->writeFieldBegin("allTotalAckedPackets", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->allTotalAckedPackets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.allValidTxPackets) {
    xfer += oprot->writeFieldBegin("allValidTxPackets", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->allValidTxPackets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.allValidAckedPackets) {
    xfer += oprot->writeFieldBegin("allValidAckedPackets", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->allValidAckedPackets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.counterTotalTxPackets) {
    xfer += oprot->writeFieldBegin("counterTotalTxPackets", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->counterTotalTxPackets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.counterTotalAckedPackets) {
    xfer += oprot->writeFieldBegin("counterTotalAckedPackets", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->counterTotalAckedPackets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.counterValidTxPackets) {
    xfer += oprot->writeFieldBegin("counterValidTxPackets", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->counterValidTxPackets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.counterValidAckedPackets) {
    xfer += oprot->writeFieldBegin("counterValidAckedPackets", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->counterValidAckedPackets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventTotalTxPackets) {
    xfer += oprot->writeFieldBegin("eventTotalTxPackets", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->eventTotalTxPackets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventTotalAckedPackets) {
    xfer += oprot->writeFieldBegin("eventTotalAckedPackets", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->eventTotalAckedPackets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventValidTxPackets) {
    xfer += oprot->writeFieldBegin("eventValidTxPackets", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->eventValidTxPackets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventValidAckedPackets) {
    xfer += oprot->writeFieldBegin("eventValidAckedPackets", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->eventValidAckedPackets);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkReportStats &a, VosdkReportStats &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.allTotalTxPackets, b.allTotalTxPackets);
  swap(a.allTotalAckedPackets, b.allTotalAckedPackets);
  swap(a.allValidTxPackets, b.allValidTxPackets);
  swap(a.allValidAckedPackets, b.allValidAckedPackets);
  swap(a.counterTotalTxPackets, b.counterTotalTxPackets);
  swap(a.counterTotalAckedPackets, b.counterTotalAckedPackets);
  swap(a.counterValidTxPackets, b.counterValidTxPackets);
  swap(a.counterValidAckedPackets, b.counterValidAckedPackets);
  swap(a.eventTotalTxPackets, b.eventTotalTxPackets);
  swap(a.eventTotalAckedPackets, b.eventTotalAckedPackets);
  swap(a.eventValidTxPackets, b.eventValidTxPackets);
  swap(a.eventValidAckedPackets, b.eventValidAckedPackets);
  swap(a.__isset, b.__isset);
}

VosdkReportStats::VosdkReportStats(const VosdkReportStats& other210) {
  header = other210.header;
  allTotalTxPackets = other210.allTotalTxPackets;
  allTotalAckedPackets = other210.allTotalAckedPackets;
  allValidTxPackets = other210.allValidTxPackets;
  allValidAckedPackets = other210.allValidAckedPackets;
  counterTotalTxPackets = other210.counterTotalTxPackets;
  counterTotalAckedPackets = other210.counterTotalAckedPackets;
  counterValidTxPackets = other210.counterValidTxPackets;
  counterValidAckedPackets = other210.counterValidAckedPackets;
  eventTotalTxPackets = other210.eventTotalTxPackets;
  eventTotalAckedPackets = other210.eventTotalAckedPackets;
  eventValidTxPackets = other210.eventValidTxPackets;
  eventValidAckedPackets = other210.eventValidAckedPackets;
  __isset = other210.__isset;
}
VosdkReportStats& VosdkReportStats::operator=(const VosdkReportStats& other211) {
  header = other211.header;
  allTotalTxPackets = other211.allTotalTxPackets;
  allTotalAckedPackets = other211.allTotalAckedPackets;
  allValidTxPackets = other211.allValidTxPackets;
  allValidAckedPackets = other211.allValidAckedPackets;
  counterTotalTxPackets = other211.counterTotalTxPackets;
  counterTotalAckedPackets = other211.counterTotalAckedPackets;
  counterValidTxPackets = other211.counterValidTxPackets;
  counterValidAckedPackets = other211.counterValidAckedPackets;
  eventTotalTxPackets = other211.eventTotalTxPackets;
  eventTotalAckedPackets = other211.eventTotalAckedPackets;
  eventValidTxPackets = other211.eventValidTxPackets;
  eventValidAckedPackets = other211.eventValidAckedPackets;
  __isset = other211.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkReportStats& obj) {
  using apache::thrift::to_string;
  out << "VosdkReportStats(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "allTotalTxPackets="; (obj.__isset.allTotalTxPackets ? (out << to_string(obj.allTotalTxPackets)) : (out << "<null>"));
  out << ", " << "allTotalAckedPackets="; (obj.__isset.allTotalAckedPackets ? (out << to_string(obj.allTotalAckedPackets)) : (out << "<null>"));
  out << ", " << "allValidTxPackets="; (obj.__isset.allValidTxPackets ? (out << to_string(obj.allValidTxPackets)) : (out << "<null>"));
  out << ", " << "allValidAckedPackets="; (obj.__isset.allValidAckedPackets ? (out << to_string(obj.allValidAckedPackets)) : (out << "<null>"));
  out << ", " << "counterTotalTxPackets="; (obj.__isset.counterTotalTxPackets ? (out << to_string(obj.counterTotalTxPackets)) : (out << "<null>"));
  out << ", " << "counterTotalAckedPackets="; (obj.__isset.counterTotalAckedPackets ? (out << to_string(obj.counterTotalAckedPackets)) : (out << "<null>"));
  out << ", " << "counterValidTxPackets="; (obj.__isset.counterValidTxPackets ? (out << to_string(obj.counterValidTxPackets)) : (out << "<null>"));
  out << ", " << "counterValidAckedPackets="; (obj.__isset.counterValidAckedPackets ? (out << to_string(obj.counterValidAckedPackets)) : (out << "<null>"));
  out << ", " << "eventTotalTxPackets="; (obj.__isset.eventTotalTxPackets ? (out << to_string(obj.eventTotalTxPackets)) : (out << "<null>"));
  out << ", " << "eventTotalAckedPackets="; (obj.__isset.eventTotalAckedPackets ? (out << to_string(obj.eventTotalAckedPackets)) : (out << "<null>"));
  out << ", " << "eventValidTxPackets="; (obj.__isset.eventValidTxPackets ? (out << to_string(obj.eventValidTxPackets)) : (out << "<null>"));
  out << ", " << "eventValidAckedPackets="; (obj.__isset.eventValidAckedPackets ? (out << to_string(obj.eventValidAckedPackets)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkAPWorkerEvent::~VosdkAPWorkerEvent() throw() {
}


void VosdkAPWorkerEvent::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkAPWorkerEvent::__set_ec(const int32_t val) {
  this->ec = val;
__isset.ec = true;
}

void VosdkAPWorkerEvent::__set_sc(const int32_t val) {
  this->sc = val;
__isset.sc = true;
}

void VosdkAPWorkerEvent::__set_serverIp(const std::string& val) {
  this->serverIp = val;
__isset.serverIp = true;
}

void VosdkAPWorkerEvent::__set_firstSuccess(const bool val) {
  this->firstSuccess = val;
__isset.firstSuccess = true;
}

void VosdkAPWorkerEvent::__set_responseTime(const int32_t val) {
  this->responseTime = val;
__isset.responseTime = true;
}

void VosdkAPWorkerEvent::__set_serviceName(const std::string& val) {
  this->serviceName = val;
__isset.serviceName = true;
}

void VosdkAPWorkerEvent::__set_response_detail(const std::string& val) {
  this->response_detail = val;
__isset.response_detail = true;
}

const char* VosdkAPWorkerEvent::ascii_fingerprint = "99BB1803454B3EDE451655A132F32062";
const uint8_t VosdkAPWorkerEvent::binary_fingerprint[16] = {0x99,0xBB,0x18,0x03,0x45,0x4B,0x3E,0xDE,0x45,0x16,0x55,0xA1,0x32,0xF3,0x20,0x62};

uint32_t VosdkAPWorkerEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ec);
          this->__isset.ec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sc);
          this->__isset.sc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverIp);
          this->__isset.serverIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->firstSuccess);
          this->__isset.firstSuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->responseTime);
          this->__isset.responseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceName);
          this->__isset.serviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->response_detail);
          this->__isset.response_detail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkAPWorkerEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkAPWorkerEvent");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ec) {
    xfer += oprot->writeFieldBegin("ec", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->ec);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sc) {
    xfer += oprot->writeFieldBegin("sc", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->sc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverIp) {
    xfer += oprot->writeFieldBegin("serverIp", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->serverIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstSuccess) {
    xfer += oprot->writeFieldBegin("firstSuccess", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->firstSuccess);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.responseTime) {
    xfer += oprot->writeFieldBegin("responseTime", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->responseTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceName) {
    xfer += oprot->writeFieldBegin("serviceName", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->serviceName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.response_detail) {
    xfer += oprot->writeFieldBegin("response_detail", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->response_detail);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkAPWorkerEvent &a, VosdkAPWorkerEvent &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.ec, b.ec);
  swap(a.sc, b.sc);
  swap(a.serverIp, b.serverIp);
  swap(a.firstSuccess, b.firstSuccess);
  swap(a.responseTime, b.responseTime);
  swap(a.serviceName, b.serviceName);
  swap(a.response_detail, b.response_detail);
  swap(a.__isset, b.__isset);
}

VosdkAPWorkerEvent::VosdkAPWorkerEvent(const VosdkAPWorkerEvent& other212) {
  header = other212.header;
  ec = other212.ec;
  sc = other212.sc;
  serverIp = other212.serverIp;
  firstSuccess = other212.firstSuccess;
  responseTime = other212.responseTime;
  serviceName = other212.serviceName;
  response_detail = other212.response_detail;
  __isset = other212.__isset;
}
VosdkAPWorkerEvent& VosdkAPWorkerEvent::operator=(const VosdkAPWorkerEvent& other213) {
  header = other213.header;
  ec = other213.ec;
  sc = other213.sc;
  serverIp = other213.serverIp;
  firstSuccess = other213.firstSuccess;
  responseTime = other213.responseTime;
  serviceName = other213.serviceName;
  response_detail = other213.response_detail;
  __isset = other213.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkAPWorkerEvent& obj) {
  using apache::thrift::to_string;
  out << "VosdkAPWorkerEvent(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "ec="; (obj.__isset.ec ? (out << to_string(obj.ec)) : (out << "<null>"));
  out << ", " << "sc="; (obj.__isset.sc ? (out << to_string(obj.sc)) : (out << "<null>"));
  out << ", " << "serverIp="; (obj.__isset.serverIp ? (out << to_string(obj.serverIp)) : (out << "<null>"));
  out << ", " << "firstSuccess="; (obj.__isset.firstSuccess ? (out << to_string(obj.firstSuccess)) : (out << "<null>"));
  out << ", " << "responseTime="; (obj.__isset.responseTime ? (out << to_string(obj.responseTime)) : (out << "<null>"));
  out << ", " << "serviceName="; (obj.__isset.serviceName ? (out << to_string(obj.serviceName)) : (out << "<null>"));
  out << ", " << "response_detail="; (obj.__isset.response_detail ? (out << to_string(obj.response_detail)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkWorkerEvent::~VosdkWorkerEvent() throw() {
}


void VosdkWorkerEvent::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkWorkerEvent::__set_command(const std::string& val) {
  this->command = val;
__isset.command = true;
}

void VosdkWorkerEvent::__set_actionType(const std::string& val) {
  this->actionType = val;
__isset.actionType = true;
}

void VosdkWorkerEvent::__set_url(const std::string& val) {
  this->url = val;
__isset.url = true;
}

void VosdkWorkerEvent::__set_payload(const std::string& val) {
  this->payload = val;
__isset.payload = true;
}

void VosdkWorkerEvent::__set_server_code(const int16_t val) {
  this->server_code = val;
__isset.server_code = true;
}

void VosdkWorkerEvent::__set_code(const int16_t val) {
  this->code = val;
__isset.code = true;
}

void VosdkWorkerEvent::__set_traceId(const std::string& val) {
  this->traceId = val;
__isset.traceId = true;
}

void VosdkWorkerEvent::__set_workerType(const int32_t val) {
  this->workerType = val;
__isset.workerType = true;
}

void VosdkWorkerEvent::__set_responseTime(const int32_t val) {
  this->responseTime = val;
__isset.responseTime = true;
}

const char* VosdkWorkerEvent::ascii_fingerprint = "FAC1BFCE3B7472B4F8294842198468C2";
const uint8_t VosdkWorkerEvent::binary_fingerprint[16] = {0xFA,0xC1,0xBF,0xCE,0x3B,0x74,0x72,0xB4,0xF8,0x29,0x48,0x42,0x19,0x84,0x68,0xC2};

uint32_t VosdkWorkerEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->command);
          this->__isset.command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actionType);
          this->__isset.actionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->payload);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->server_code);
          this->__isset.server_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->traceId);
          this->__isset.traceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->workerType);
          this->__isset.workerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->responseTime);
          this->__isset.responseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkWorkerEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkWorkerEvent");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.command) {
    xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->command);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actionType) {
    xfer += oprot->writeFieldBegin("actionType", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->actionType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.url) {
    xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->url);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.payload) {
    xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->payload);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.server_code) {
    xfer += oprot->writeFieldBegin("server_code", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->server_code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I16, 7);
    xfer += oprot->writeI16(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.traceId) {
    xfer += oprot->writeFieldBegin("traceId", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->traceId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.workerType) {
    xfer += oprot->writeFieldBegin("workerType", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->workerType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.responseTime) {
    xfer += oprot->writeFieldBegin("responseTime", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->responseTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkWorkerEvent &a, VosdkWorkerEvent &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.command, b.command);
  swap(a.actionType, b.actionType);
  swap(a.url, b.url);
  swap(a.payload, b.payload);
  swap(a.server_code, b.server_code);
  swap(a.code, b.code);
  swap(a.traceId, b.traceId);
  swap(a.workerType, b.workerType);
  swap(a.responseTime, b.responseTime);
  swap(a.__isset, b.__isset);
}

VosdkWorkerEvent::VosdkWorkerEvent(const VosdkWorkerEvent& other214) {
  header = other214.header;
  command = other214.command;
  actionType = other214.actionType;
  url = other214.url;
  payload = other214.payload;
  server_code = other214.server_code;
  code = other214.code;
  traceId = other214.traceId;
  workerType = other214.workerType;
  responseTime = other214.responseTime;
  __isset = other214.__isset;
}
VosdkWorkerEvent& VosdkWorkerEvent::operator=(const VosdkWorkerEvent& other215) {
  header = other215.header;
  command = other215.command;
  actionType = other215.actionType;
  url = other215.url;
  payload = other215.payload;
  server_code = other215.server_code;
  code = other215.code;
  traceId = other215.traceId;
  workerType = other215.workerType;
  responseTime = other215.responseTime;
  __isset = other215.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkWorkerEvent& obj) {
  using apache::thrift::to_string;
  out << "VosdkWorkerEvent(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "command="; (obj.__isset.command ? (out << to_string(obj.command)) : (out << "<null>"));
  out << ", " << "actionType="; (obj.__isset.actionType ? (out << to_string(obj.actionType)) : (out << "<null>"));
  out << ", " << "url="; (obj.__isset.url ? (out << to_string(obj.url)) : (out << "<null>"));
  out << ", " << "payload="; (obj.__isset.payload ? (out << to_string(obj.payload)) : (out << "<null>"));
  out << ", " << "server_code="; (obj.__isset.server_code ? (out << to_string(obj.server_code)) : (out << "<null>"));
  out << ", " << "code="; (obj.__isset.code ? (out << to_string(obj.code)) : (out << "<null>"));
  out << ", " << "traceId="; (obj.__isset.traceId ? (out << to_string(obj.traceId)) : (out << "<null>"));
  out << ", " << "workerType="; (obj.__isset.workerType ? (out << to_string(obj.workerType)) : (out << "<null>"));
  out << ", " << "responseTime="; (obj.__isset.responseTime ? (out << to_string(obj.responseTime)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkRecordingMixModeProperty::~VosdkRecordingMixModeProperty() throw() {
}


void VosdkRecordingMixModeProperty::__set_mixMode(const bool val) {
  this->mixMode = val;
}

void VosdkRecordingMixModeProperty::__set_mixedVidoAudioMode(const bool val) {
  this->mixedVidoAudioMode = val;
}

void VosdkRecordingMixModeProperty::__set_mixHigh(const int32_t val) {
  this->mixHigh = val;
}

void VosdkRecordingMixModeProperty::__set_mixLow(const int32_t val) {
  this->mixLow = val;
}

void VosdkRecordingMixModeProperty::__set_mixFps(const int32_t val) {
  this->mixFps = val;
}

void VosdkRecordingMixModeProperty::__set_mixKbps(const int32_t val) {
  this->mixKbps = val;
}

const char* VosdkRecordingMixModeProperty::ascii_fingerprint = "0A21D6AC28EEC7BFEF4DDBEDE474C4B2";
const uint8_t VosdkRecordingMixModeProperty::binary_fingerprint[16] = {0x0A,0x21,0xD6,0xAC,0x28,0xEE,0xC7,0xBF,0xEF,0x4D,0xDB,0xED,0xE4,0x74,0xC4,0xB2};

uint32_t VosdkRecordingMixModeProperty::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->mixMode);
          this->__isset.mixMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->mixedVidoAudioMode);
          this->__isset.mixedVidoAudioMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mixHigh);
          this->__isset.mixHigh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mixLow);
          this->__isset.mixLow = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mixFps);
          this->__isset.mixFps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mixKbps);
          this->__isset.mixKbps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkRecordingMixModeProperty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkRecordingMixModeProperty");

  xfer += oprot->writeFieldBegin("mixMode", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->mixMode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mixedVidoAudioMode", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->mixedVidoAudioMode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mixHigh", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->mixHigh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mixLow", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->mixLow);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mixFps", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->mixFps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mixKbps", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->mixKbps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkRecordingMixModeProperty &a, VosdkRecordingMixModeProperty &b) {
  using ::std::swap;
  swap(a.mixMode, b.mixMode);
  swap(a.mixedVidoAudioMode, b.mixedVidoAudioMode);
  swap(a.mixHigh, b.mixHigh);
  swap(a.mixLow, b.mixLow);
  swap(a.mixFps, b.mixFps);
  swap(a.mixKbps, b.mixKbps);
  swap(a.__isset, b.__isset);
}

VosdkRecordingMixModeProperty::VosdkRecordingMixModeProperty(const VosdkRecordingMixModeProperty& other216) {
  mixMode = other216.mixMode;
  mixedVidoAudioMode = other216.mixedVidoAudioMode;
  mixHigh = other216.mixHigh;
  mixLow = other216.mixLow;
  mixFps = other216.mixFps;
  mixKbps = other216.mixKbps;
  __isset = other216.__isset;
}
VosdkRecordingMixModeProperty& VosdkRecordingMixModeProperty::operator=(const VosdkRecordingMixModeProperty& other217) {
  mixMode = other217.mixMode;
  mixedVidoAudioMode = other217.mixedVidoAudioMode;
  mixHigh = other217.mixHigh;
  mixLow = other217.mixLow;
  mixFps = other217.mixFps;
  mixKbps = other217.mixKbps;
  __isset = other217.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkRecordingMixModeProperty& obj) {
  using apache::thrift::to_string;
  out << "VosdkRecordingMixModeProperty(";
  out << "mixMode=" << to_string(obj.mixMode);
  out << ", " << "mixedVidoAudioMode=" << to_string(obj.mixedVidoAudioMode);
  out << ", " << "mixHigh=" << to_string(obj.mixHigh);
  out << ", " << "mixLow=" << to_string(obj.mixLow);
  out << ", " << "mixFps=" << to_string(obj.mixFps);
  out << ", " << "mixKbps=" << to_string(obj.mixKbps);
  out << ")";
  return out;
}


VosdkRecordingJoin::~VosdkRecordingJoin() throw() {
}


void VosdkRecordingJoin::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkRecordingJoin::__set_property(const VosdkRecordingMixModeProperty& val) {
  this->property = val;
__isset.property = true;
}

void VosdkRecordingJoin::__set_minUdpPort(const int32_t val) {
  this->minUdpPort = val;
__isset.minUdpPort = true;
}

void VosdkRecordingJoin::__set_maxUdpPort(const int32_t val) {
  this->maxUdpPort = val;
__isset.maxUdpPort = true;
}

void VosdkRecordingJoin::__set_decodeAudioType(const int32_t val) {
  this->decodeAudioType = val;
__isset.decodeAudioType = true;
}

void VosdkRecordingJoin::__set_decodeVideoType(const int32_t val) {
  this->decodeVideoType = val;
__isset.decodeVideoType = true;
}

void VosdkRecordingJoin::__set_liveMode(const int32_t val) {
  this->liveMode = val;
__isset.liveMode = true;
}

void VosdkRecordingJoin::__set_idle(const int64_t val) {
  this->idle = val;
__isset.idle = true;
}

void VosdkRecordingJoin::__set_audioOnly(const int32_t val) {
  this->audioOnly = val;
__isset.audioOnly = true;
}

void VosdkRecordingJoin::__set_videoOnly(const int32_t val) {
  this->videoOnly = val;
__isset.videoOnly = true;
}

void VosdkRecordingJoin::__set_syslogFacility(const int32_t val) {
  this->syslogFacility = val;
__isset.syslogFacility = true;
}

void VosdkRecordingJoin::__set_streamType(const int32_t val) {
  this->streamType = val;
__isset.streamType = true;
}

void VosdkRecordingJoin::__set_triggerMode(const int32_t val) {
  this->triggerMode = val;
__isset.triggerMode = true;
}

void VosdkRecordingJoin::__set_language(const int32_t val) {
  this->language = val;
__isset.language = true;
}

void VosdkRecordingJoin::__set_res15Fields(const std::map<std::string, int64_t> & val) {
  this->res15Fields = val;
__isset.res15Fields = true;
}

const char* VosdkRecordingJoin::ascii_fingerprint = "C9BD5F63C738BA6357E8F6DA6F3C7F5A";
const uint8_t VosdkRecordingJoin::binary_fingerprint[16] = {0xC9,0xBD,0x5F,0x63,0xC7,0x38,0xBA,0x63,0x57,0xE8,0xF6,0xDA,0x6F,0x3C,0x7F,0x5A};

uint32_t VosdkRecordingJoin::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->property.read(iprot);
          this->__isset.property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minUdpPort);
          this->__isset.minUdpPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxUdpPort);
          this->__isset.maxUdpPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->decodeAudioType);
          this->__isset.decodeAudioType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->decodeVideoType);
          this->__isset.decodeVideoType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->liveMode);
          this->__isset.liveMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->idle);
          this->__isset.idle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->audioOnly);
          this->__isset.audioOnly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->videoOnly);
          this->__isset.videoOnly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->syslogFacility);
          this->__isset.syslogFacility = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->streamType);
          this->__isset.streamType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->triggerMode);
          this->__isset.triggerMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->res15Fields.clear();
            uint32_t _size218;
            ::apache::thrift::protocol::TType _ktype219;
            ::apache::thrift::protocol::TType _vtype220;
            xfer += iprot->readMapBegin(_ktype219, _vtype220, _size218);
            uint32_t _i222;
            for (_i222 = 0; _i222 < _size218; ++_i222)
            {
              std::string _key223;
              xfer += iprot->readString(_key223);
              int64_t& _val224 = this->res15Fields[_key223];
              xfer += iprot->readI64(_val224);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.res15Fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkRecordingJoin::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkRecordingJoin");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.property) {
    xfer += oprot->writeFieldBegin("property", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->property.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minUdpPort) {
    xfer += oprot->writeFieldBegin("minUdpPort", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->minUdpPort);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxUdpPort) {
    xfer += oprot->writeFieldBegin("maxUdpPort", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->maxUdpPort);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.decodeAudioType) {
    xfer += oprot->writeFieldBegin("decodeAudioType", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->decodeAudioType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.decodeVideoType) {
    xfer += oprot->writeFieldBegin("decodeVideoType", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->decodeVideoType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.liveMode) {
    xfer += oprot->writeFieldBegin("liveMode", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->liveMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.idle) {
    xfer += oprot->writeFieldBegin("idle", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->idle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.audioOnly) {
    xfer += oprot->writeFieldBegin("audioOnly", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->audioOnly);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.videoOnly) {
    xfer += oprot->writeFieldBegin("videoOnly", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->videoOnly);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.syslogFacility) {
    xfer += oprot->writeFieldBegin("syslogFacility", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->syslogFacility);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.streamType) {
    xfer += oprot->writeFieldBegin("streamType", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->streamType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.triggerMode) {
    xfer += oprot->writeFieldBegin("triggerMode", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->triggerMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.language) {
    xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->language);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.res15Fields) {
    xfer += oprot->writeFieldBegin("res15Fields", ::apache::thrift::protocol::T_MAP, 15);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->res15Fields.size()));
      std::map<std::string, int64_t> ::const_iterator _iter225;
      for (_iter225 = this->res15Fields.begin(); _iter225 != this->res15Fields.end(); ++_iter225)
      {
        xfer += oprot->writeString(_iter225->first);
        xfer += oprot->writeI64(_iter225->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkRecordingJoin &a, VosdkRecordingJoin &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.property, b.property);
  swap(a.minUdpPort, b.minUdpPort);
  swap(a.maxUdpPort, b.maxUdpPort);
  swap(a.decodeAudioType, b.decodeAudioType);
  swap(a.decodeVideoType, b.decodeVideoType);
  swap(a.liveMode, b.liveMode);
  swap(a.idle, b.idle);
  swap(a.audioOnly, b.audioOnly);
  swap(a.videoOnly, b.videoOnly);
  swap(a.syslogFacility, b.syslogFacility);
  swap(a.streamType, b.streamType);
  swap(a.triggerMode, b.triggerMode);
  swap(a.language, b.language);
  swap(a.res15Fields, b.res15Fields);
  swap(a.__isset, b.__isset);
}

VosdkRecordingJoin::VosdkRecordingJoin(const VosdkRecordingJoin& other226) {
  header = other226.header;
  property = other226.property;
  minUdpPort = other226.minUdpPort;
  maxUdpPort = other226.maxUdpPort;
  decodeAudioType = other226.decodeAudioType;
  decodeVideoType = other226.decodeVideoType;
  liveMode = other226.liveMode;
  idle = other226.idle;
  audioOnly = other226.audioOnly;
  videoOnly = other226.videoOnly;
  syslogFacility = other226.syslogFacility;
  streamType = other226.streamType;
  triggerMode = other226.triggerMode;
  language = other226.language;
  res15Fields = other226.res15Fields;
  __isset = other226.__isset;
}
VosdkRecordingJoin& VosdkRecordingJoin::operator=(const VosdkRecordingJoin& other227) {
  header = other227.header;
  property = other227.property;
  minUdpPort = other227.minUdpPort;
  maxUdpPort = other227.maxUdpPort;
  decodeAudioType = other227.decodeAudioType;
  decodeVideoType = other227.decodeVideoType;
  liveMode = other227.liveMode;
  idle = other227.idle;
  audioOnly = other227.audioOnly;
  videoOnly = other227.videoOnly;
  syslogFacility = other227.syslogFacility;
  streamType = other227.streamType;
  triggerMode = other227.triggerMode;
  language = other227.language;
  res15Fields = other227.res15Fields;
  __isset = other227.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkRecordingJoin& obj) {
  using apache::thrift::to_string;
  out << "VosdkRecordingJoin(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "property="; (obj.__isset.property ? (out << to_string(obj.property)) : (out << "<null>"));
  out << ", " << "minUdpPort="; (obj.__isset.minUdpPort ? (out << to_string(obj.minUdpPort)) : (out << "<null>"));
  out << ", " << "maxUdpPort="; (obj.__isset.maxUdpPort ? (out << to_string(obj.maxUdpPort)) : (out << "<null>"));
  out << ", " << "decodeAudioType="; (obj.__isset.decodeAudioType ? (out << to_string(obj.decodeAudioType)) : (out << "<null>"));
  out << ", " << "decodeVideoType="; (obj.__isset.decodeVideoType ? (out << to_string(obj.decodeVideoType)) : (out << "<null>"));
  out << ", " << "liveMode="; (obj.__isset.liveMode ? (out << to_string(obj.liveMode)) : (out << "<null>"));
  out << ", " << "idle="; (obj.__isset.idle ? (out << to_string(obj.idle)) : (out << "<null>"));
  out << ", " << "audioOnly="; (obj.__isset.audioOnly ? (out << to_string(obj.audioOnly)) : (out << "<null>"));
  out << ", " << "videoOnly="; (obj.__isset.videoOnly ? (out << to_string(obj.videoOnly)) : (out << "<null>"));
  out << ", " << "syslogFacility="; (obj.__isset.syslogFacility ? (out << to_string(obj.syslogFacility)) : (out << "<null>"));
  out << ", " << "streamType="; (obj.__isset.streamType ? (out << to_string(obj.streamType)) : (out << "<null>"));
  out << ", " << "triggerMode="; (obj.__isset.triggerMode ? (out << to_string(obj.triggerMode)) : (out << "<null>"));
  out << ", " << "language="; (obj.__isset.language ? (out << to_string(obj.language)) : (out << "<null>"));
  out << ", " << "res15Fields="; (obj.__isset.res15Fields ? (out << to_string(obj.res15Fields)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkRecordingLeave::~VosdkRecordingLeave() throw() {
}


void VosdkRecordingLeave::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkRecordingLeave::__set_leavePathCode(const int32_t val) {
  this->leavePathCode = val;
__isset.leavePathCode = true;
}

void VosdkRecordingLeave::__set_res5Fields(const std::map<std::string, int64_t> & val) {
  this->res5Fields = val;
__isset.res5Fields = true;
}

const char* VosdkRecordingLeave::ascii_fingerprint = "CC47B1526561BE6C1DF664669FF88CFD";
const uint8_t VosdkRecordingLeave::binary_fingerprint[16] = {0xCC,0x47,0xB1,0x52,0x65,0x61,0xBE,0x6C,0x1D,0xF6,0x64,0x66,0x9F,0xF8,0x8C,0xFD};

uint32_t VosdkRecordingLeave::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leavePathCode);
          this->__isset.leavePathCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->res5Fields.clear();
            uint32_t _size228;
            ::apache::thrift::protocol::TType _ktype229;
            ::apache::thrift::protocol::TType _vtype230;
            xfer += iprot->readMapBegin(_ktype229, _vtype230, _size228);
            uint32_t _i232;
            for (_i232 = 0; _i232 < _size228; ++_i232)
            {
              std::string _key233;
              xfer += iprot->readString(_key233);
              int64_t& _val234 = this->res5Fields[_key233];
              xfer += iprot->readI64(_val234);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.res5Fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkRecordingLeave::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkRecordingLeave");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leavePathCode) {
    xfer += oprot->writeFieldBegin("leavePathCode", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->leavePathCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.res5Fields) {
    xfer += oprot->writeFieldBegin("res5Fields", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->res5Fields.size()));
      std::map<std::string, int64_t> ::const_iterator _iter235;
      for (_iter235 = this->res5Fields.begin(); _iter235 != this->res5Fields.end(); ++_iter235)
      {
        xfer += oprot->writeString(_iter235->first);
        xfer += oprot->writeI64(_iter235->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkRecordingLeave &a, VosdkRecordingLeave &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.leavePathCode, b.leavePathCode);
  swap(a.res5Fields, b.res5Fields);
  swap(a.__isset, b.__isset);
}

VosdkRecordingLeave::VosdkRecordingLeave(const VosdkRecordingLeave& other236) {
  header = other236.header;
  leavePathCode = other236.leavePathCode;
  res5Fields = other236.res5Fields;
  __isset = other236.__isset;
}
VosdkRecordingLeave& VosdkRecordingLeave::operator=(const VosdkRecordingLeave& other237) {
  header = other237.header;
  leavePathCode = other237.leavePathCode;
  res5Fields = other237.res5Fields;
  __isset = other237.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkRecordingLeave& obj) {
  using apache::thrift::to_string;
  out << "VosdkRecordingLeave(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "leavePathCode="; (obj.__isset.leavePathCode ? (out << to_string(obj.leavePathCode)) : (out << "<null>"));
  out << ", " << "res5Fields="; (obj.__isset.res5Fields ? (out << to_string(obj.res5Fields)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkPrivilegeExpireInfo::~VosdkPrivilegeExpireInfo() throw() {
}


void VosdkPrivilegeExpireInfo::__set_privilege(const int32_t val) {
  this->privilege = val;
__isset.privilege = true;
}

void VosdkPrivilegeExpireInfo::__set_remainingTime(const int32_t val) {
  this->remainingTime = val;
__isset.remainingTime = true;
}

void VosdkPrivilegeExpireInfo::__set_expireTs(const int64_t val) {
  this->expireTs = val;
__isset.expireTs = true;
}

const char* VosdkPrivilegeExpireInfo::ascii_fingerprint = "08363EEF15F06CD3121D092993D5DC4E";
const uint8_t VosdkPrivilegeExpireInfo::binary_fingerprint[16] = {0x08,0x36,0x3E,0xEF,0x15,0xF0,0x6C,0xD3,0x12,0x1D,0x09,0x29,0x93,0xD5,0xDC,0x4E};

uint32_t VosdkPrivilegeExpireInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->privilege);
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->remainingTime);
          this->__isset.remainingTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expireTs);
          this->__isset.expireTs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkPrivilegeExpireInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkPrivilegeExpireInfo");

  if (this->__isset.privilege) {
    xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->privilege);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remainingTime) {
    xfer += oprot->writeFieldBegin("remainingTime", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->remainingTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expireTs) {
    xfer += oprot->writeFieldBegin("expireTs", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->expireTs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkPrivilegeExpireInfo &a, VosdkPrivilegeExpireInfo &b) {
  using ::std::swap;
  swap(a.privilege, b.privilege);
  swap(a.remainingTime, b.remainingTime);
  swap(a.expireTs, b.expireTs);
  swap(a.__isset, b.__isset);
}

VosdkPrivilegeExpireInfo::VosdkPrivilegeExpireInfo(const VosdkPrivilegeExpireInfo& other238) {
  privilege = other238.privilege;
  remainingTime = other238.remainingTime;
  expireTs = other238.expireTs;
  __isset = other238.__isset;
}
VosdkPrivilegeExpireInfo& VosdkPrivilegeExpireInfo::operator=(const VosdkPrivilegeExpireInfo& other239) {
  privilege = other239.privilege;
  remainingTime = other239.remainingTime;
  expireTs = other239.expireTs;
  __isset = other239.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkPrivilegeExpireInfo& obj) {
  using apache::thrift::to_string;
  out << "VosdkPrivilegeExpireInfo(";
  out << "privilege="; (obj.__isset.privilege ? (out << to_string(obj.privilege)) : (out << "<null>"));
  out << ", " << "remainingTime="; (obj.__isset.remainingTime ? (out << to_string(obj.remainingTime)) : (out << "<null>"));
  out << ", " << "expireTs="; (obj.__isset.expireTs ? (out << to_string(obj.expireTs)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkPrivilegeWillExpire::~VosdkPrivilegeWillExpire() throw() {
}


void VosdkPrivilegeWillExpire::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkPrivilegeWillExpire::__set_token(const std::string& val) {
  this->token = val;
__isset.token = true;
}

void VosdkPrivilegeWillExpire::__set_privilegeExpireInfos(const std::vector<VosdkPrivilegeExpireInfo> & val) {
  this->privilegeExpireInfos = val;
__isset.privilegeExpireInfos = true;
}

const char* VosdkPrivilegeWillExpire::ascii_fingerprint = "88376B451FC1606C0DE949956545AA17";
const uint8_t VosdkPrivilegeWillExpire::binary_fingerprint[16] = {0x88,0x37,0x6B,0x45,0x1F,0xC1,0x60,0x6C,0x0D,0xE9,0x49,0x95,0x65,0x45,0xAA,0x17};

uint32_t VosdkPrivilegeWillExpire::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->privilegeExpireInfos.clear();
            uint32_t _size240;
            ::apache::thrift::protocol::TType _etype243;
            xfer += iprot->readListBegin(_etype243, _size240);
            this->privilegeExpireInfos.resize(_size240);
            uint32_t _i244;
            for (_i244 = 0; _i244 < _size240; ++_i244)
            {
              xfer += this->privilegeExpireInfos[_i244].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.privilegeExpireInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkPrivilegeWillExpire::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkPrivilegeWillExpire");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.token) {
    xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->token);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.privilegeExpireInfos) {
    xfer += oprot->writeFieldBegin("privilegeExpireInfos", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->privilegeExpireInfos.size()));
      std::vector<VosdkPrivilegeExpireInfo> ::const_iterator _iter245;
      for (_iter245 = this->privilegeExpireInfos.begin(); _iter245 != this->privilegeExpireInfos.end(); ++_iter245)
      {
        xfer += (*_iter245).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkPrivilegeWillExpire &a, VosdkPrivilegeWillExpire &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.token, b.token);
  swap(a.privilegeExpireInfos, b.privilegeExpireInfos);
  swap(a.__isset, b.__isset);
}

VosdkPrivilegeWillExpire::VosdkPrivilegeWillExpire(const VosdkPrivilegeWillExpire& other246) {
  header = other246.header;
  token = other246.token;
  privilegeExpireInfos = other246.privilegeExpireInfos;
  __isset = other246.__isset;
}
VosdkPrivilegeWillExpire& VosdkPrivilegeWillExpire::operator=(const VosdkPrivilegeWillExpire& other247) {
  header = other247.header;
  token = other247.token;
  privilegeExpireInfos = other247.privilegeExpireInfos;
  __isset = other247.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkPrivilegeWillExpire& obj) {
  using apache::thrift::to_string;
  out << "VosdkPrivilegeWillExpire(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "token="; (obj.__isset.token ? (out << to_string(obj.token)) : (out << "<null>"));
  out << ", " << "privilegeExpireInfos="; (obj.__isset.privilegeExpireInfos ? (out << to_string(obj.privilegeExpireInfos)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkRenewToken::~VosdkRenewToken() throw() {
}


void VosdkRenewToken::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkRenewToken::__set_token(const std::string& val) {
  this->token = val;
__isset.token = true;
}

const char* VosdkRenewToken::ascii_fingerprint = "7643AB8C86D47EFC29C9DADBFB748150";
const uint8_t VosdkRenewToken::binary_fingerprint[16] = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

uint32_t VosdkRenewToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkRenewToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkRenewToken");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.token) {
    xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->token);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkRenewToken &a, VosdkRenewToken &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

VosdkRenewToken::VosdkRenewToken(const VosdkRenewToken& other248) {
  header = other248.header;
  token = other248.token;
  __isset = other248.__isset;
}
VosdkRenewToken& VosdkRenewToken::operator=(const VosdkRenewToken& other249) {
  header = other249.header;
  token = other249.token;
  __isset = other249.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkRenewToken& obj) {
  using apache::thrift::to_string;
  out << "VosdkRenewToken(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "token="; (obj.__isset.token ? (out << to_string(obj.token)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkRenewTokenRes::~VosdkRenewTokenRes() throw() {
}


void VosdkRenewTokenRes::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkRenewTokenRes::__set_res_code(const int32_t val) {
  this->res_code = val;
__isset.res_code = true;
}

const char* VosdkRenewTokenRes::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkRenewTokenRes::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkRenewTokenRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->res_code);
          this->__isset.res_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkRenewTokenRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkRenewTokenRes");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.res_code) {
    xfer += oprot->writeFieldBegin("res_code", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->res_code);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkRenewTokenRes &a, VosdkRenewTokenRes &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.res_code, b.res_code);
  swap(a.__isset, b.__isset);
}

VosdkRenewTokenRes::VosdkRenewTokenRes(const VosdkRenewTokenRes& other250) {
  header = other250.header;
  res_code = other250.res_code;
  __isset = other250.__isset;
}
VosdkRenewTokenRes& VosdkRenewTokenRes::operator=(const VosdkRenewTokenRes& other251) {
  header = other251.header;
  res_code = other251.res_code;
  __isset = other251.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkRenewTokenRes& obj) {
  using apache::thrift::to_string;
  out << "VosdkRenewTokenRes(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "res_code="; (obj.__isset.res_code ? (out << to_string(obj.res_code)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkSignalingMsgStat::~VosdkSignalingMsgStat() throw() {
}


void VosdkSignalingMsgStat::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkSignalingMsgStat::__set_txMsgCount(const int32_t val) {
  this->txMsgCount = val;
__isset.txMsgCount = true;
}

void VosdkSignalingMsgStat::__set_rxClientMsgCount(const int32_t val) {
  this->rxClientMsgCount = val;
__isset.rxClientMsgCount = true;
}

void VosdkSignalingMsgStat::__set_rxSignalingMsgCount(const int32_t val) {
  this->rxSignalingMsgCount = val;
__isset.rxSignalingMsgCount = true;
}

void VosdkSignalingMsgStat::__set_rxDualMsgCount(const int32_t val) {
  this->rxDualMsgCount = val;
__isset.rxDualMsgCount = true;
}

const char* VosdkSignalingMsgStat::ascii_fingerprint = "F77D5D692FD8224ADA5729D4A3FEE797";
const uint8_t VosdkSignalingMsgStat::binary_fingerprint[16] = {0xF7,0x7D,0x5D,0x69,0x2F,0xD8,0x22,0x4A,0xDA,0x57,0x29,0xD4,0xA3,0xFE,0xE7,0x97};

uint32_t VosdkSignalingMsgStat::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->txMsgCount);
          this->__isset.txMsgCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rxClientMsgCount);
          this->__isset.rxClientMsgCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rxSignalingMsgCount);
          this->__isset.rxSignalingMsgCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rxDualMsgCount);
          this->__isset.rxDualMsgCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkSignalingMsgStat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkSignalingMsgStat");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.txMsgCount) {
    xfer += oprot->writeFieldBegin("txMsgCount", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->txMsgCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rxClientMsgCount) {
    xfer += oprot->writeFieldBegin("rxClientMsgCount", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->rxClientMsgCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rxSignalingMsgCount) {
    xfer += oprot->writeFieldBegin("rxSignalingMsgCount", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->rxSignalingMsgCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rxDualMsgCount) {
    xfer += oprot->writeFieldBegin("rxDualMsgCount", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->rxDualMsgCount);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkSignalingMsgStat &a, VosdkSignalingMsgStat &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.txMsgCount, b.txMsgCount);
  swap(a.rxClientMsgCount, b.rxClientMsgCount);
  swap(a.rxSignalingMsgCount, b.rxSignalingMsgCount);
  swap(a.rxDualMsgCount, b.rxDualMsgCount);
  swap(a.__isset, b.__isset);
}

VosdkSignalingMsgStat::VosdkSignalingMsgStat(const VosdkSignalingMsgStat& other252) {
  header = other252.header;
  txMsgCount = other252.txMsgCount;
  rxClientMsgCount = other252.rxClientMsgCount;
  rxSignalingMsgCount = other252.rxSignalingMsgCount;
  rxDualMsgCount = other252.rxDualMsgCount;
  __isset = other252.__isset;
}
VosdkSignalingMsgStat& VosdkSignalingMsgStat::operator=(const VosdkSignalingMsgStat& other253) {
  header = other253.header;
  txMsgCount = other253.txMsgCount;
  rxClientMsgCount = other253.rxClientMsgCount;
  rxSignalingMsgCount = other253.rxSignalingMsgCount;
  rxDualMsgCount = other253.rxDualMsgCount;
  __isset = other253.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkSignalingMsgStat& obj) {
  using apache::thrift::to_string;
  out << "VosdkSignalingMsgStat(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "txMsgCount="; (obj.__isset.txMsgCount ? (out << to_string(obj.txMsgCount)) : (out << "<null>"));
  out << ", " << "rxClientMsgCount="; (obj.__isset.rxClientMsgCount ? (out << to_string(obj.rxClientMsgCount)) : (out << "<null>"));
  out << ", " << "rxSignalingMsgCount="; (obj.__isset.rxSignalingMsgCount ? (out << to_string(obj.rxSignalingMsgCount)) : (out << "<null>"));
  out << ", " << "rxDualMsgCount="; (obj.__isset.rxDualMsgCount ? (out << to_string(obj.rxDualMsgCount)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkLocalFallbackStatus::~VosdkLocalFallbackStatus() throw() {
}


void VosdkLocalFallbackStatus::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkLocalFallbackStatus::__set_status(const int32_t val) {
  this->status = val;
__isset.status = true;
}

const char* VosdkLocalFallbackStatus::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkLocalFallbackStatus::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkLocalFallbackStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkLocalFallbackStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkLocalFallbackStatus");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkLocalFallbackStatus &a, VosdkLocalFallbackStatus &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

VosdkLocalFallbackStatus::VosdkLocalFallbackStatus(const VosdkLocalFallbackStatus& other254) {
  header = other254.header;
  status = other254.status;
  __isset = other254.__isset;
}
VosdkLocalFallbackStatus& VosdkLocalFallbackStatus::operator=(const VosdkLocalFallbackStatus& other255) {
  header = other255.header;
  status = other255.status;
  __isset = other255.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkLocalFallbackStatus& obj) {
  using apache::thrift::to_string;
  out << "VosdkLocalFallbackStatus(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "status="; (obj.__isset.status ? (out << to_string(obj.status)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkRemoteFallbackStatus::~VosdkRemoteFallbackStatus() throw() {
}


void VosdkRemoteFallbackStatus::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkRemoteFallbackStatus::__set_src(const int32_t val) {
  this->src = val;
__isset.src = true;
}

void VosdkRemoteFallbackStatus::__set_dst(const int32_t val) {
  this->dst = val;
__isset.dst = true;
}

const char* VosdkRemoteFallbackStatus::ascii_fingerprint = "C2AA7695D2D8E54277BD0F7525CE4E28";
const uint8_t VosdkRemoteFallbackStatus::binary_fingerprint[16] = {0xC2,0xAA,0x76,0x95,0xD2,0xD8,0xE5,0x42,0x77,0xBD,0x0F,0x75,0x25,0xCE,0x4E,0x28};

uint32_t VosdkRemoteFallbackStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->src);
          this->__isset.src = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dst);
          this->__isset.dst = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkRemoteFallbackStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkRemoteFallbackStatus");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.src) {
    xfer += oprot->writeFieldBegin("src", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->src);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dst) {
    xfer += oprot->writeFieldBegin("dst", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->dst);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkRemoteFallbackStatus &a, VosdkRemoteFallbackStatus &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.src, b.src);
  swap(a.dst, b.dst);
  swap(a.__isset, b.__isset);
}

VosdkRemoteFallbackStatus::VosdkRemoteFallbackStatus(const VosdkRemoteFallbackStatus& other256) {
  header = other256.header;
  src = other256.src;
  dst = other256.dst;
  __isset = other256.__isset;
}
VosdkRemoteFallbackStatus& VosdkRemoteFallbackStatus::operator=(const VosdkRemoteFallbackStatus& other257) {
  header = other257.header;
  src = other257.src;
  dst = other257.dst;
  __isset = other257.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkRemoteFallbackStatus& obj) {
  using apache::thrift::to_string;
  out << "VosdkRemoteFallbackStatus(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "src="; (obj.__isset.src ? (out << to_string(obj.src)) : (out << "<null>"));
  out << ", " << "dst="; (obj.__isset.dst ? (out << to_string(obj.dst)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVideoBandwidthAggressiveLevel::~VosdkVideoBandwidthAggressiveLevel() throw() {
}


void VosdkVideoBandwidthAggressiveLevel::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVideoBandwidthAggressiveLevel::__set_level(const int32_t val) {
  this->level = val;
__isset.level = true;
}

const char* VosdkVideoBandwidthAggressiveLevel::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkVideoBandwidthAggressiveLevel::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkVideoBandwidthAggressiveLevel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVideoBandwidthAggressiveLevel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVideoBandwidthAggressiveLevel");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level) {
    xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->level);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVideoBandwidthAggressiveLevel &a, VosdkVideoBandwidthAggressiveLevel &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.level, b.level);
  swap(a.__isset, b.__isset);
}

VosdkVideoBandwidthAggressiveLevel::VosdkVideoBandwidthAggressiveLevel(const VosdkVideoBandwidthAggressiveLevel& other258) {
  header = other258.header;
  level = other258.level;
  __isset = other258.__isset;
}
VosdkVideoBandwidthAggressiveLevel& VosdkVideoBandwidthAggressiveLevel::operator=(const VosdkVideoBandwidthAggressiveLevel& other259) {
  header = other259.header;
  level = other259.level;
  __isset = other259.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVideoBandwidthAggressiveLevel& obj) {
  using apache::thrift::to_string;
  out << "VosdkVideoBandwidthAggressiveLevel(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "level="; (obj.__isset.level ? (out << to_string(obj.level)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkAppSetMinPlayoutDelay::~VosdkAppSetMinPlayoutDelay() throw() {
}


void VosdkAppSetMinPlayoutDelay::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkAppSetMinPlayoutDelay::__set_playoutDelay(const int32_t val) {
  this->playoutDelay = val;
__isset.playoutDelay = true;
}

const char* VosdkAppSetMinPlayoutDelay::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkAppSetMinPlayoutDelay::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkAppSetMinPlayoutDelay::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->playoutDelay);
          this->__isset.playoutDelay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkAppSetMinPlayoutDelay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkAppSetMinPlayoutDelay");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.playoutDelay) {
    xfer += oprot->writeFieldBegin("playoutDelay", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->playoutDelay);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkAppSetMinPlayoutDelay &a, VosdkAppSetMinPlayoutDelay &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.playoutDelay, b.playoutDelay);
  swap(a.__isset, b.__isset);
}

VosdkAppSetMinPlayoutDelay::VosdkAppSetMinPlayoutDelay(const VosdkAppSetMinPlayoutDelay& other260) {
  header = other260.header;
  playoutDelay = other260.playoutDelay;
  __isset = other260.__isset;
}
VosdkAppSetMinPlayoutDelay& VosdkAppSetMinPlayoutDelay::operator=(const VosdkAppSetMinPlayoutDelay& other261) {
  header = other261.header;
  playoutDelay = other261.playoutDelay;
  __isset = other261.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkAppSetMinPlayoutDelay& obj) {
  using apache::thrift::to_string;
  out << "VosdkAppSetMinPlayoutDelay(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "playoutDelay="; (obj.__isset.playoutDelay ? (out << to_string(obj.playoutDelay)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkAppSetStartVideoBitRate::~VosdkAppSetStartVideoBitRate() throw() {
}


void VosdkAppSetStartVideoBitRate::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkAppSetStartVideoBitRate::__set_startVideoBitRate(const int32_t val) {
  this->startVideoBitRate = val;
__isset.startVideoBitRate = true;
}

const char* VosdkAppSetStartVideoBitRate::ascii_fingerprint = "EC4A08214886140709A800199CD6CB4D";
const uint8_t VosdkAppSetStartVideoBitRate::binary_fingerprint[16] = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

uint32_t VosdkAppSetStartVideoBitRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startVideoBitRate);
          this->__isset.startVideoBitRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkAppSetStartVideoBitRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkAppSetStartVideoBitRate");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startVideoBitRate) {
    xfer += oprot->writeFieldBegin("startVideoBitRate", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->startVideoBitRate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkAppSetStartVideoBitRate &a, VosdkAppSetStartVideoBitRate &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.startVideoBitRate, b.startVideoBitRate);
  swap(a.__isset, b.__isset);
}

VosdkAppSetStartVideoBitRate::VosdkAppSetStartVideoBitRate(const VosdkAppSetStartVideoBitRate& other262) {
  header = other262.header;
  startVideoBitRate = other262.startVideoBitRate;
  __isset = other262.__isset;
}
VosdkAppSetStartVideoBitRate& VosdkAppSetStartVideoBitRate::operator=(const VosdkAppSetStartVideoBitRate& other263) {
  header = other263.header;
  startVideoBitRate = other263.startVideoBitRate;
  __isset = other263.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkAppSetStartVideoBitRate& obj) {
  using apache::thrift::to_string;
  out << "VosdkAppSetStartVideoBitRate(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "startVideoBitRate="; (obj.__isset.startVideoBitRate ? (out << to_string(obj.startVideoBitRate)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkSendVideoPaced::~VosdkSendVideoPaced() throw() {
}


void VosdkSendVideoPaced::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkSendVideoPaced::__set_isEnabled(const bool val) {
  this->isEnabled = val;
__isset.isEnabled = true;
}

const char* VosdkSendVideoPaced::ascii_fingerprint = "B3BD93EBB5756141F0719C1251165BAA";
const uint8_t VosdkSendVideoPaced::binary_fingerprint[16] = {0xB3,0xBD,0x93,0xEB,0xB5,0x75,0x61,0x41,0xF0,0x71,0x9C,0x12,0x51,0x16,0x5B,0xAA};

uint32_t VosdkSendVideoPaced::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isEnabled);
          this->__isset.isEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkSendVideoPaced::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkSendVideoPaced");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isEnabled) {
    xfer += oprot->writeFieldBegin("isEnabled", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->isEnabled);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkSendVideoPaced &a, VosdkSendVideoPaced &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.isEnabled, b.isEnabled);
  swap(a.__isset, b.__isset);
}

VosdkSendVideoPaced::VosdkSendVideoPaced(const VosdkSendVideoPaced& other264) {
  header = other264.header;
  isEnabled = other264.isEnabled;
  __isset = other264.__isset;
}
VosdkSendVideoPaced& VosdkSendVideoPaced::operator=(const VosdkSendVideoPaced& other265) {
  header = other265.header;
  isEnabled = other265.isEnabled;
  __isset = other265.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkSendVideoPaced& obj) {
  using apache::thrift::to_string;
  out << "VosdkSendVideoPaced(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "isEnabled="; (obj.__isset.isEnabled ? (out << to_string(obj.isEnabled)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkApiExec::~VosdkApiExec() throw() {
}


void VosdkApiExec::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkApiExec::__set_apiPayload(const std::string& val) {
  this->apiPayload = val;
__isset.apiPayload = true;
}

void VosdkApiExec::__set_isCache(const bool val) {
  this->isCache = val;
__isset.isCache = true;
}

void VosdkApiExec::__set_isNotificationSuppressed(const bool val) {
  this->isNotificationSuppressed = val;
__isset.isNotificationSuppressed = true;
}

const char* VosdkApiExec::ascii_fingerprint = "EB94370E3ABE4A22AD18E03E677D621B";
const uint8_t VosdkApiExec::binary_fingerprint[16] = {0xEB,0x94,0x37,0x0E,0x3A,0xBE,0x4A,0x22,0xAD,0x18,0xE0,0x3E,0x67,0x7D,0x62,0x1B};

uint32_t VosdkApiExec::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->apiPayload);
          this->__isset.apiPayload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isCache);
          this->__isset.isCache = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isNotificationSuppressed);
          this->__isset.isNotificationSuppressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkApiExec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkApiExec");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiPayload) {
    xfer += oprot->writeFieldBegin("apiPayload", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->apiPayload);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isCache) {
    xfer += oprot->writeFieldBegin("isCache", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->isCache);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isNotificationSuppressed) {
    xfer += oprot->writeFieldBegin("isNotificationSuppressed", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->isNotificationSuppressed);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkApiExec &a, VosdkApiExec &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.apiPayload, b.apiPayload);
  swap(a.isCache, b.isCache);
  swap(a.isNotificationSuppressed, b.isNotificationSuppressed);
  swap(a.__isset, b.__isset);
}

VosdkApiExec::VosdkApiExec(const VosdkApiExec& other266) {
  header = other266.header;
  apiPayload = other266.apiPayload;
  isCache = other266.isCache;
  isNotificationSuppressed = other266.isNotificationSuppressed;
  __isset = other266.__isset;
}
VosdkApiExec& VosdkApiExec::operator=(const VosdkApiExec& other267) {
  header = other267.header;
  apiPayload = other267.apiPayload;
  isCache = other267.isCache;
  isNotificationSuppressed = other267.isNotificationSuppressed;
  __isset = other267.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkApiExec& obj) {
  using apache::thrift::to_string;
  out << "VosdkApiExec(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "apiPayload="; (obj.__isset.apiPayload ? (out << to_string(obj.apiPayload)) : (out << "<null>"));
  out << ", " << "isCache="; (obj.__isset.isCache ? (out << to_string(obj.isCache)) : (out << "<null>"));
  out << ", " << "isNotificationSuppressed="; (obj.__isset.isNotificationSuppressed ? (out << to_string(obj.isNotificationSuppressed)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkABTest::~VosdkABTest() throw() {
}


void VosdkABTest::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkABTest::__set_feature(const std::string& val) {
  this->feature = val;
__isset.feature = true;
}

void VosdkABTest::__set_tag(const std::string& val) {
  this->tag = val;
__isset.tag = true;
}

void VosdkABTest::__set_params(const std::string& val) {
  this->params = val;
__isset.params = true;
}

const char* VosdkABTest::ascii_fingerprint = "27965685487DFD8F9C34C8D2DB0A3140";
const uint8_t VosdkABTest::binary_fingerprint[16] = {0x27,0x96,0x56,0x85,0x48,0x7D,0xFD,0x8F,0x9C,0x34,0xC8,0xD2,0xDB,0x0A,0x31,0x40};

uint32_t VosdkABTest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->feature);
          this->__isset.feature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->params);
          this->__isset.params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkABTest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkABTest");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.feature) {
    xfer += oprot->writeFieldBegin("feature", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->feature);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tag) {
    xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->tag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.params) {
    xfer += oprot->writeFieldBegin("params", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->params);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkABTest &a, VosdkABTest &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.feature, b.feature);
  swap(a.tag, b.tag);
  swap(a.params, b.params);
  swap(a.__isset, b.__isset);
}

VosdkABTest::VosdkABTest(const VosdkABTest& other268) {
  header = other268.header;
  feature = other268.feature;
  tag = other268.tag;
  params = other268.params;
  __isset = other268.__isset;
}
VosdkABTest& VosdkABTest::operator=(const VosdkABTest& other269) {
  header = other269.header;
  feature = other269.feature;
  tag = other269.tag;
  params = other269.params;
  __isset = other269.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkABTest& obj) {
  using apache::thrift::to_string;
  out << "VosdkABTest(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "feature="; (obj.__isset.feature ? (out << to_string(obj.feature)) : (out << "<null>"));
  out << ", " << "tag="; (obj.__isset.tag ? (out << to_string(obj.tag)) : (out << "<null>"));
  out << ", " << "params="; (obj.__isset.params ? (out << to_string(obj.params)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVideoInitialOptions::~VosdkVideoInitialOptions() throw() {
}


void VosdkVideoInitialOptions::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVideoInitialOptions::__set_isSendVideoPacedEnabled(const bool val) {
  this->isSendVideoPacedEnabled = val;
__isset.isSendVideoPacedEnabled = true;
}

void VosdkVideoInitialOptions::__set_isVideoFecEnabled(const bool val) {
  this->isVideoFecEnabled = val;
__isset.isVideoFecEnabled = true;
}

void VosdkVideoInitialOptions::__set_videoFecMethod(const int32_t val) {
  this->videoFecMethod = val;
__isset.videoFecMethod = true;
}

void VosdkVideoInitialOptions::__set_localFallbackOption(const int32_t val) {
  this->localFallbackOption = val;
__isset.localFallbackOption = true;
}

void VosdkVideoInitialOptions::__set_remoteFallbackOption(const int32_t val) {
  this->remoteFallbackOption = val;
__isset.remoteFallbackOption = true;
}

const char* VosdkVideoInitialOptions::ascii_fingerprint = "4AE41D1B0956D9F5384008CBB65A164A";
const uint8_t VosdkVideoInitialOptions::binary_fingerprint[16] = {0x4A,0xE4,0x1D,0x1B,0x09,0x56,0xD9,0xF5,0x38,0x40,0x08,0xCB,0xB6,0x5A,0x16,0x4A};

uint32_t VosdkVideoInitialOptions::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSendVideoPacedEnabled);
          this->__isset.isSendVideoPacedEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isVideoFecEnabled);
          this->__isset.isVideoFecEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->videoFecMethod);
          this->__isset.videoFecMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->localFallbackOption);
          this->__isset.localFallbackOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->remoteFallbackOption);
          this->__isset.remoteFallbackOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVideoInitialOptions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVideoInitialOptions");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isSendVideoPacedEnabled) {
    xfer += oprot->writeFieldBegin("isSendVideoPacedEnabled", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->isSendVideoPacedEnabled);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isVideoFecEnabled) {
    xfer += oprot->writeFieldBegin("isVideoFecEnabled", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->isVideoFecEnabled);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.videoFecMethod) {
    xfer += oprot->writeFieldBegin("videoFecMethod", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->videoFecMethod);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.localFallbackOption) {
    xfer += oprot->writeFieldBegin("localFallbackOption", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->localFallbackOption);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remoteFallbackOption) {
    xfer += oprot->writeFieldBegin("remoteFallbackOption", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->remoteFallbackOption);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVideoInitialOptions &a, VosdkVideoInitialOptions &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.isSendVideoPacedEnabled, b.isSendVideoPacedEnabled);
  swap(a.isVideoFecEnabled, b.isVideoFecEnabled);
  swap(a.videoFecMethod, b.videoFecMethod);
  swap(a.localFallbackOption, b.localFallbackOption);
  swap(a.remoteFallbackOption, b.remoteFallbackOption);
  swap(a.__isset, b.__isset);
}

VosdkVideoInitialOptions::VosdkVideoInitialOptions(const VosdkVideoInitialOptions& other270) {
  header = other270.header;
  isSendVideoPacedEnabled = other270.isSendVideoPacedEnabled;
  isVideoFecEnabled = other270.isVideoFecEnabled;
  videoFecMethod = other270.videoFecMethod;
  localFallbackOption = other270.localFallbackOption;
  remoteFallbackOption = other270.remoteFallbackOption;
  __isset = other270.__isset;
}
VosdkVideoInitialOptions& VosdkVideoInitialOptions::operator=(const VosdkVideoInitialOptions& other271) {
  header = other271.header;
  isSendVideoPacedEnabled = other271.isSendVideoPacedEnabled;
  isVideoFecEnabled = other271.isVideoFecEnabled;
  videoFecMethod = other271.videoFecMethod;
  localFallbackOption = other271.localFallbackOption;
  remoteFallbackOption = other271.remoteFallbackOption;
  __isset = other271.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVideoInitialOptions& obj) {
  using apache::thrift::to_string;
  out << "VosdkVideoInitialOptions(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "isSendVideoPacedEnabled="; (obj.__isset.isSendVideoPacedEnabled ? (out << to_string(obj.isSendVideoPacedEnabled)) : (out << "<null>"));
  out << ", " << "isVideoFecEnabled="; (obj.__isset.isVideoFecEnabled ? (out << to_string(obj.isVideoFecEnabled)) : (out << "<null>"));
  out << ", " << "videoFecMethod="; (obj.__isset.videoFecMethod ? (out << to_string(obj.videoFecMethod)) : (out << "<null>"));
  out << ", " << "localFallbackOption="; (obj.__isset.localFallbackOption ? (out << to_string(obj.localFallbackOption)) : (out << "<null>"));
  out << ", " << "remoteFallbackOption="; (obj.__isset.remoteFallbackOption ? (out << to_string(obj.remoteFallbackOption)) : (out << "<null>"));
  out << ")";
  return out;
}


VosdkVqcStat::~VosdkVqcStat() throw() {
}


void VosdkVqcStat::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void VosdkVqcStat::__set_totalFrames(const int32_t val) {
  this->totalFrames = val;
__isset.totalFrames = true;
}

void VosdkVqcStat::__set_averageScore(const int32_t val) {
  this->averageScore = val;
__isset.averageScore = true;
}

void VosdkVqcStat::__set_llRatio(const int32_t val) {
  this->llRatio = val;
__isset.llRatio = true;
}

void VosdkVqcStat::__set_hhRatio(const int32_t val) {
  this->hhRatio = val;
__isset.hhRatio = true;
}

const char* VosdkVqcStat::ascii_fingerprint = "F77D5D692FD8224ADA5729D4A3FEE797";
const uint8_t VosdkVqcStat::binary_fingerprint[16] = {0xF7,0x7D,0x5D,0x69,0x2F,0xD8,0x22,0x4A,0xDA,0x57,0x29,0xD4,0xA3,0xFE,0xE7,0x97};

uint32_t VosdkVqcStat::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalFrames);
          this->__isset.totalFrames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->averageScore);
          this->__isset.averageScore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->llRatio);
          this->__isset.llRatio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hhRatio);
          this->__isset.hhRatio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VosdkVqcStat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VosdkVqcStat");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.totalFrames) {
    xfer += oprot->writeFieldBegin("totalFrames", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->totalFrames);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.averageScore) {
    xfer += oprot->writeFieldBegin("averageScore", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->averageScore);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.llRatio) {
    xfer += oprot->writeFieldBegin("llRatio", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->llRatio);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hhRatio) {
    xfer += oprot->writeFieldBegin("hhRatio", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->hhRatio);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VosdkVqcStat &a, VosdkVqcStat &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.totalFrames, b.totalFrames);
  swap(a.averageScore, b.averageScore);
  swap(a.llRatio, b.llRatio);
  swap(a.hhRatio, b.hhRatio);
  swap(a.__isset, b.__isset);
}

VosdkVqcStat::VosdkVqcStat(const VosdkVqcStat& other272) {
  header = other272.header;
  totalFrames = other272.totalFrames;
  averageScore = other272.averageScore;
  llRatio = other272.llRatio;
  hhRatio = other272.hhRatio;
  __isset = other272.__isset;
}
VosdkVqcStat& VosdkVqcStat::operator=(const VosdkVqcStat& other273) {
  header = other273.header;
  totalFrames = other273.totalFrames;
  averageScore = other273.averageScore;
  llRatio = other273.llRatio;
  hhRatio = other273.hhRatio;
  __isset = other273.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VosdkVqcStat& obj) {
  using apache::thrift::to_string;
  out << "VosdkVqcStat(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "totalFrames="; (obj.__isset.totalFrames ? (out << to_string(obj.totalFrames)) : (out << "<null>"));
  out << ", " << "averageScore="; (obj.__isset.averageScore ? (out << to_string(obj.averageScore)) : (out << "<null>"));
  out << ", " << "llRatio="; (obj.__isset.llRatio ? (out << to_string(obj.llRatio)) : (out << "<null>"));
  out << ", " << "hhRatio="; (obj.__isset.hhRatio ? (out << to_string(obj.hhRatio)) : (out << "<null>"));
  out << ")";
  return out;
}


WhiteBoardJoinCenter::~WhiteBoardJoinCenter() throw() {
}


void WhiteBoardJoinCenter::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WhiteBoardJoinCenter::__set_cname(const std::string& val) {
  this->cname = val;
__isset.cname = true;
}

void WhiteBoardJoinCenter::__set_uid(const std::string& val) {
  this->uid = val;
__isset.uid = true;
}

void WhiteBoardJoinCenter::__set_vid(const int32_t val) {
  this->vid = val;
__isset.vid = true;
}

void WhiteBoardJoinCenter::__set_code(const int32_t val) {
  this->code = val;
__isset.code = true;
}

void WhiteBoardJoinCenter::__set_server(const std::string& val) {
  this->server = val;
__isset.server = true;
}

void WhiteBoardJoinCenter::__set_uip(const std::string& val) {
  this->uip = val;
__isset.uip = true;
}

const char* WhiteBoardJoinCenter::ascii_fingerprint = "CDBD3113227CF2F37A959CB235D67CF1";
const uint8_t WhiteBoardJoinCenter::binary_fingerprint[16] = {0xCD,0xBD,0x31,0x13,0x22,0x7C,0xF2,0xF3,0x7A,0x95,0x9C,0xB2,0x35,0xD6,0x7C,0xF1};

uint32_t WhiteBoardJoinCenter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cname);
          this->__isset.cname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->server);
          this->__isset.server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uip);
          this->__isset.uip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WhiteBoardJoinCenter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WhiteBoardJoinCenter");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cname) {
    xfer += oprot->writeFieldBegin("cname", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->cname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.server) {
    xfer += oprot->writeFieldBegin("server", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->server);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uip) {
    xfer += oprot->writeFieldBegin("uip", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->uip);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WhiteBoardJoinCenter &a, WhiteBoardJoinCenter &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.cname, b.cname);
  swap(a.uid, b.uid);
  swap(a.vid, b.vid);
  swap(a.code, b.code);
  swap(a.server, b.server);
  swap(a.uip, b.uip);
  swap(a.__isset, b.__isset);
}

WhiteBoardJoinCenter::WhiteBoardJoinCenter(const WhiteBoardJoinCenter& other274) {
  header = other274.header;
  cname = other274.cname;
  uid = other274.uid;
  vid = other274.vid;
  code = other274.code;
  server = other274.server;
  uip = other274.uip;
  __isset = other274.__isset;
}
WhiteBoardJoinCenter& WhiteBoardJoinCenter::operator=(const WhiteBoardJoinCenter& other275) {
  header = other275.header;
  cname = other275.cname;
  uid = other275.uid;
  vid = other275.vid;
  code = other275.code;
  server = other275.server;
  uip = other275.uip;
  __isset = other275.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WhiteBoardJoinCenter& obj) {
  using apache::thrift::to_string;
  out << "WhiteBoardJoinCenter(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "cname="; (obj.__isset.cname ? (out << to_string(obj.cname)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ", " << "code="; (obj.__isset.code ? (out << to_string(obj.code)) : (out << "<null>"));
  out << ", " << "server="; (obj.__isset.server ? (out << to_string(obj.server)) : (out << "<null>"));
  out << ", " << "uip="; (obj.__isset.uip ? (out << to_string(obj.uip)) : (out << "<null>"));
  out << ")";
  return out;
}


WhiteBoardJoinEdge::~WhiteBoardJoinEdge() throw() {
}


void WhiteBoardJoinEdge::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WhiteBoardJoinEdge::__set_cname(const std::string& val) {
  this->cname = val;
__isset.cname = true;
}

void WhiteBoardJoinEdge::__set_uid(const std::string& val) {
  this->uid = val;
__isset.uid = true;
}

void WhiteBoardJoinEdge::__set_vid(const int32_t val) {
  this->vid = val;
__isset.vid = true;
}

void WhiteBoardJoinEdge::__set_code(const int32_t val) {
  this->code = val;
__isset.code = true;
}

void WhiteBoardJoinEdge::__set_mode(const std::string& val) {
  this->mode = val;
__isset.mode = true;
}

void WhiteBoardJoinEdge::__set_role(const std::string& val) {
  this->role = val;
__isset.role = true;
}

void WhiteBoardJoinEdge::__set_uip(const std::string& val) {
  this->uip = val;
__isset.uip = true;
}

const char* WhiteBoardJoinEdge::ascii_fingerprint = "643D02D3005E6615F74A10444212B074";
const uint8_t WhiteBoardJoinEdge::binary_fingerprint[16] = {0x64,0x3D,0x02,0xD3,0x00,0x5E,0x66,0x15,0xF7,0x4A,0x10,0x44,0x42,0x12,0xB0,0x74};

uint32_t WhiteBoardJoinEdge::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cname);
          this->__isset.cname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mode);
          this->__isset.mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->role);
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uip);
          this->__isset.uip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WhiteBoardJoinEdge::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WhiteBoardJoinEdge");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cname) {
    xfer += oprot->writeFieldBegin("cname", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->cname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mode) {
    xfer += oprot->writeFieldBegin("mode", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->mode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.role) {
    xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->role);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uip) {
    xfer += oprot->writeFieldBegin("uip", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->uip);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WhiteBoardJoinEdge &a, WhiteBoardJoinEdge &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.cname, b.cname);
  swap(a.uid, b.uid);
  swap(a.vid, b.vid);
  swap(a.code, b.code);
  swap(a.mode, b.mode);
  swap(a.role, b.role);
  swap(a.uip, b.uip);
  swap(a.__isset, b.__isset);
}

WhiteBoardJoinEdge::WhiteBoardJoinEdge(const WhiteBoardJoinEdge& other276) {
  header = other276.header;
  cname = other276.cname;
  uid = other276.uid;
  vid = other276.vid;
  code = other276.code;
  mode = other276.mode;
  role = other276.role;
  uip = other276.uip;
  __isset = other276.__isset;
}
WhiteBoardJoinEdge& WhiteBoardJoinEdge::operator=(const WhiteBoardJoinEdge& other277) {
  header = other277.header;
  cname = other277.cname;
  uid = other277.uid;
  vid = other277.vid;
  code = other277.code;
  mode = other277.mode;
  role = other277.role;
  uip = other277.uip;
  __isset = other277.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WhiteBoardJoinEdge& obj) {
  using apache::thrift::to_string;
  out << "WhiteBoardJoinEdge(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "cname="; (obj.__isset.cname ? (out << to_string(obj.cname)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ", " << "code="; (obj.__isset.code ? (out << to_string(obj.code)) : (out << "<null>"));
  out << ", " << "mode="; (obj.__isset.mode ? (out << to_string(obj.mode)) : (out << "<null>"));
  out << ", " << "role="; (obj.__isset.role ? (out << to_string(obj.role)) : (out << "<null>"));
  out << ", " << "uip="; (obj.__isset.uip ? (out << to_string(obj.uip)) : (out << "<null>"));
  out << ")";
  return out;
}


WhiteBoardJoinWebSocket::~WhiteBoardJoinWebSocket() throw() {
}


void WhiteBoardJoinWebSocket::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WhiteBoardJoinWebSocket::__set_cname(const std::string& val) {
  this->cname = val;
__isset.cname = true;
}

void WhiteBoardJoinWebSocket::__set_uid(const std::string& val) {
  this->uid = val;
__isset.uid = true;
}

void WhiteBoardJoinWebSocket::__set_vid(const int32_t val) {
  this->vid = val;
__isset.vid = true;
}

void WhiteBoardJoinWebSocket::__set_uip(const std::string& val) {
  this->uip = val;
__isset.uip = true;
}

const char* WhiteBoardJoinWebSocket::ascii_fingerprint = "DC932BFB87990BB9EA62BDA0182542EC";
const uint8_t WhiteBoardJoinWebSocket::binary_fingerprint[16] = {0xDC,0x93,0x2B,0xFB,0x87,0x99,0x0B,0xB9,0xEA,0x62,0xBD,0xA0,0x18,0x25,0x42,0xEC};

uint32_t WhiteBoardJoinWebSocket::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cname);
          this->__isset.cname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uip);
          this->__isset.uip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WhiteBoardJoinWebSocket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WhiteBoardJoinWebSocket");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cname) {
    xfer += oprot->writeFieldBegin("cname", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->cname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uip) {
    xfer += oprot->writeFieldBegin("uip", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->uip);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WhiteBoardJoinWebSocket &a, WhiteBoardJoinWebSocket &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.cname, b.cname);
  swap(a.uid, b.uid);
  swap(a.vid, b.vid);
  swap(a.uip, b.uip);
  swap(a.__isset, b.__isset);
}

WhiteBoardJoinWebSocket::WhiteBoardJoinWebSocket(const WhiteBoardJoinWebSocket& other278) {
  header = other278.header;
  cname = other278.cname;
  uid = other278.uid;
  vid = other278.vid;
  uip = other278.uip;
  __isset = other278.__isset;
}
WhiteBoardJoinWebSocket& WhiteBoardJoinWebSocket::operator=(const WhiteBoardJoinWebSocket& other279) {
  header = other279.header;
  cname = other279.cname;
  uid = other279.uid;
  vid = other279.vid;
  uip = other279.uip;
  __isset = other279.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WhiteBoardJoinWebSocket& obj) {
  using apache::thrift::to_string;
  out << "WhiteBoardJoinWebSocket(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "cname="; (obj.__isset.cname ? (out << to_string(obj.cname)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ", " << "uip="; (obj.__isset.uip ? (out << to_string(obj.uip)) : (out << "<null>"));
  out << ")";
  return out;
}


WhiteBoardUploadFile::~WhiteBoardUploadFile() throw() {
}


void WhiteBoardUploadFile::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WhiteBoardUploadFile::__set_cname(const std::string& val) {
  this->cname = val;
__isset.cname = true;
}

void WhiteBoardUploadFile::__set_uid(const std::string& val) {
  this->uid = val;
__isset.uid = true;
}

void WhiteBoardUploadFile::__set_filename(const std::string& val) {
  this->filename = val;
__isset.filename = true;
}

void WhiteBoardUploadFile::__set_code(const int32_t val) {
  this->code = val;
__isset.code = true;
}

void WhiteBoardUploadFile::__set_elapse(const int32_t val) {
  this->elapse = val;
__isset.elapse = true;
}

void WhiteBoardUploadFile::__set_uip(const std::string& val) {
  this->uip = val;
__isset.uip = true;
}

const char* WhiteBoardUploadFile::ascii_fingerprint = "36C4C7D64C8D9FB745A2A01EC78B7C6C";
const uint8_t WhiteBoardUploadFile::binary_fingerprint[16] = {0x36,0xC4,0xC7,0xD6,0x4C,0x8D,0x9F,0xB7,0x45,0xA2,0xA0,0x1E,0xC7,0x8B,0x7C,0x6C};

uint32_t WhiteBoardUploadFile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cname);
          this->__isset.cname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filename);
          this->__isset.filename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->elapse);
          this->__isset.elapse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uip);
          this->__isset.uip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WhiteBoardUploadFile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WhiteBoardUploadFile");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cname) {
    xfer += oprot->writeFieldBegin("cname", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->cname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.filename) {
    xfer += oprot->writeFieldBegin("filename", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->filename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.elapse) {
    xfer += oprot->writeFieldBegin("elapse", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->elapse);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uip) {
    xfer += oprot->writeFieldBegin("uip", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->uip);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WhiteBoardUploadFile &a, WhiteBoardUploadFile &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.cname, b.cname);
  swap(a.uid, b.uid);
  swap(a.filename, b.filename);
  swap(a.code, b.code);
  swap(a.elapse, b.elapse);
  swap(a.uip, b.uip);
  swap(a.__isset, b.__isset);
}

WhiteBoardUploadFile::WhiteBoardUploadFile(const WhiteBoardUploadFile& other280) {
  header = other280.header;
  cname = other280.cname;
  uid = other280.uid;
  filename = other280.filename;
  code = other280.code;
  elapse = other280.elapse;
  uip = other280.uip;
  __isset = other280.__isset;
}
WhiteBoardUploadFile& WhiteBoardUploadFile::operator=(const WhiteBoardUploadFile& other281) {
  header = other281.header;
  cname = other281.cname;
  uid = other281.uid;
  filename = other281.filename;
  code = other281.code;
  elapse = other281.elapse;
  uip = other281.uip;
  __isset = other281.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WhiteBoardUploadFile& obj) {
  using apache::thrift::to_string;
  out << "WhiteBoardUploadFile(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "cname="; (obj.__isset.cname ? (out << to_string(obj.cname)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "filename="; (obj.__isset.filename ? (out << to_string(obj.filename)) : (out << "<null>"));
  out << ", " << "code="; (obj.__isset.code ? (out << to_string(obj.code)) : (out << "<null>"));
  out << ", " << "elapse="; (obj.__isset.elapse ? (out << to_string(obj.elapse)) : (out << "<null>"));
  out << ", " << "uip="; (obj.__isset.uip ? (out << to_string(obj.uip)) : (out << "<null>"));
  out << ")";
  return out;
}


WhiteBoardQuitWebSocket::~WhiteBoardQuitWebSocket() throw() {
}


void WhiteBoardQuitWebSocket::__set_header(const VosdkHeader& val) {
  this->header = val;
__isset.header = true;
}

void WhiteBoardQuitWebSocket::__set_cname(const std::string& val) {
  this->cname = val;
__isset.cname = true;
}

void WhiteBoardQuitWebSocket::__set_uid(const std::string& val) {
  this->uid = val;
__isset.uid = true;
}

void WhiteBoardQuitWebSocket::__set_vid(const int32_t val) {
  this->vid = val;
__isset.vid = true;
}

void WhiteBoardQuitWebSocket::__set_uip(const std::string& val) {
  this->uip = val;
__isset.uip = true;
}

const char* WhiteBoardQuitWebSocket::ascii_fingerprint = "DC932BFB87990BB9EA62BDA0182542EC";
const uint8_t WhiteBoardQuitWebSocket::binary_fingerprint[16] = {0xDC,0x93,0x2B,0xFB,0x87,0x99,0x0B,0xB9,0xEA,0x62,0xBD,0xA0,0x18,0x25,0x42,0xEC};

uint32_t WhiteBoardQuitWebSocket::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->header.read(iprot);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cname);
          this->__isset.cname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uip);
          this->__isset.uip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WhiteBoardQuitWebSocket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WhiteBoardQuitWebSocket");

  if (this->__isset.header) {
    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cname) {
    xfer += oprot->writeFieldBegin("cname", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->cname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uip) {
    xfer += oprot->writeFieldBegin("uip", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->uip);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WhiteBoardQuitWebSocket &a, WhiteBoardQuitWebSocket &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.cname, b.cname);
  swap(a.uid, b.uid);
  swap(a.vid, b.vid);
  swap(a.uip, b.uip);
  swap(a.__isset, b.__isset);
}

WhiteBoardQuitWebSocket::WhiteBoardQuitWebSocket(const WhiteBoardQuitWebSocket& other282) {
  header = other282.header;
  cname = other282.cname;
  uid = other282.uid;
  vid = other282.vid;
  uip = other282.uip;
  __isset = other282.__isset;
}
WhiteBoardQuitWebSocket& WhiteBoardQuitWebSocket::operator=(const WhiteBoardQuitWebSocket& other283) {
  header = other283.header;
  cname = other283.cname;
  uid = other283.uid;
  vid = other283.vid;
  uip = other283.uip;
  __isset = other283.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WhiteBoardQuitWebSocket& obj) {
  using apache::thrift::to_string;
  out << "WhiteBoardQuitWebSocket(";
  out << "header="; (obj.__isset.header ? (out << to_string(obj.header)) : (out << "<null>"));
  out << ", " << "cname="; (obj.__isset.cname ? (out << to_string(obj.cname)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ", " << "uip="; (obj.__isset.uip ? (out << to_string(obj.uip)) : (out << "<null>"));
  out << ")";
  return out;
}


BCPushEvent::~BCPushEvent() throw() {
}


void BCPushEvent::__set_ts(const int64_t val) {
  this->ts = val;
__isset.ts = true;
}

void BCPushEvent::__set_vid(const int32_t val) {
  this->vid = val;
__isset.vid = true;
}

void BCPushEvent::__set_cdnId(const int32_t val) {
  this->cdnId = val;
__isset.cdnId = true;
}

void BCPushEvent::__set_channelName(const std::string& val) {
  this->channelName = val;
__isset.channelName = true;
}

void BCPushEvent::__set_dispatcherIp(const std::string& val) {
  this->dispatcherIp = val;
__isset.dispatcherIp = true;
}

void BCPushEvent::__set_streamId(const std::string& val) {
  this->streamId = val;
__isset.streamId = true;
}

void BCPushEvent::__set_status(const int32_t val) {
  this->status = val;
__isset.status = true;
}

void BCPushEvent::__set_errorCode(const int32_t val) {
  this->errorCode = val;
__isset.errorCode = true;
}

const char* BCPushEvent::ascii_fingerprint = "2D1E0165D7F3B80D0EAC1782AC8832BA";
const uint8_t BCPushEvent::binary_fingerprint[16] = {0x2D,0x1E,0x01,0x65,0xD7,0xF3,0xB8,0x0D,0x0E,0xAC,0x17,0x82,0xAC,0x88,0x32,0xBA};

uint32_t BCPushEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ts);
          this->__isset.ts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cdnId);
          this->__isset.cdnId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelName);
          this->__isset.channelName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dispatcherIp);
          this->__isset.dispatcherIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamId);
          this->__isset.streamId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BCPushEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BCPushEvent");

  if (this->__isset.ts) {
    xfer += oprot->writeFieldBegin("ts", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->ts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cdnId) {
    xfer += oprot->writeFieldBegin("cdnId", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->cdnId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channelName) {
    xfer += oprot->writeFieldBegin("channelName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->channelName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dispatcherIp) {
    xfer += oprot->writeFieldBegin("dispatcherIp", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->dispatcherIp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.streamId) {
    xfer += oprot->writeFieldBegin("streamId", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->streamId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.errorCode) {
    xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->errorCode);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BCPushEvent &a, BCPushEvent &b) {
  using ::std::swap;
  swap(a.ts, b.ts);
  swap(a.vid, b.vid);
  swap(a.cdnId, b.cdnId);
  swap(a.channelName, b.channelName);
  swap(a.dispatcherIp, b.dispatcherIp);
  swap(a.streamId, b.streamId);
  swap(a.status, b.status);
  swap(a.errorCode, b.errorCode);
  swap(a.__isset, b.__isset);
}

BCPushEvent::BCPushEvent(const BCPushEvent& other284) {
  ts = other284.ts;
  vid = other284.vid;
  cdnId = other284.cdnId;
  channelName = other284.channelName;
  dispatcherIp = other284.dispatcherIp;
  streamId = other284.streamId;
  status = other284.status;
  errorCode = other284.errorCode;
  __isset = other284.__isset;
}
BCPushEvent& BCPushEvent::operator=(const BCPushEvent& other285) {
  ts = other285.ts;
  vid = other285.vid;
  cdnId = other285.cdnId;
  channelName = other285.channelName;
  dispatcherIp = other285.dispatcherIp;
  streamId = other285.streamId;
  status = other285.status;
  errorCode = other285.errorCode;
  __isset = other285.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BCPushEvent& obj) {
  using apache::thrift::to_string;
  out << "BCPushEvent(";
  out << "ts="; (obj.__isset.ts ? (out << to_string(obj.ts)) : (out << "<null>"));
  out << ", " << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ", " << "cdnId="; (obj.__isset.cdnId ? (out << to_string(obj.cdnId)) : (out << "<null>"));
  out << ", " << "channelName="; (obj.__isset.channelName ? (out << to_string(obj.channelName)) : (out << "<null>"));
  out << ", " << "dispatcherIp="; (obj.__isset.dispatcherIp ? (out << to_string(obj.dispatcherIp)) : (out << "<null>"));
  out << ", " << "streamId="; (obj.__isset.streamId ? (out << to_string(obj.streamId)) : (out << "<null>"));
  out << ", " << "status="; (obj.__isset.status ? (out << to_string(obj.status)) : (out << "<null>"));
  out << ", " << "errorCode="; (obj.__isset.errorCode ? (out << to_string(obj.errorCode)) : (out << "<null>"));
  out << ")";
  return out;
}


BCPeriodicUsage::~BCPeriodicUsage() throw() {
}


void BCPeriodicUsage::__set_ts(const int64_t val) {
  this->ts = val;
__isset.ts = true;
}

void BCPeriodicUsage::__set_vid(const int32_t val) {
  this->vid = val;
__isset.vid = true;
}

void BCPeriodicUsage::__set_cdnId(const int32_t val) {
  this->cdnId = val;
__isset.cdnId = true;
}

void BCPeriodicUsage::__set_channelName(const std::string& val) {
  this->channelName = val;
__isset.channelName = true;
}

void BCPeriodicUsage::__set_trafficAgoraKb(const int32_t val) {
  this->trafficAgoraKb = val;
__isset.trafficAgoraKb = true;
}

void BCPeriodicUsage::__set_trafficCDNKb(const int32_t val) {
  this->trafficCDNKb = val;
__isset.trafficCDNKb = true;
}

const char* BCPeriodicUsage::ascii_fingerprint = "1E6780B3075B1C710BE66888FBCB66F8";
const uint8_t BCPeriodicUsage::binary_fingerprint[16] = {0x1E,0x67,0x80,0xB3,0x07,0x5B,0x1C,0x71,0x0B,0xE6,0x68,0x88,0xFB,0xCB,0x66,0xF8};

uint32_t BCPeriodicUsage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ts);
          this->__isset.ts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cdnId);
          this->__isset.cdnId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelName);
          this->__isset.channelName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trafficAgoraKb);
          this->__isset.trafficAgoraKb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trafficCDNKb);
          this->__isset.trafficCDNKb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BCPeriodicUsage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BCPeriodicUsage");

  if (this->__isset.ts) {
    xfer += oprot->writeFieldBegin("ts", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->ts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vid) {
    xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->vid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cdnId) {
    xfer += oprot->writeFieldBegin("cdnId", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->cdnId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channelName) {
    xfer += oprot->writeFieldBegin("channelName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->channelName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.trafficAgoraKb) {
    xfer += oprot->writeFieldBegin("trafficAgoraKb", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->trafficAgoraKb);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.trafficCDNKb) {
    xfer += oprot->writeFieldBegin("trafficCDNKb", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->trafficCDNKb);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BCPeriodicUsage &a, BCPeriodicUsage &b) {
  using ::std::swap;
  swap(a.ts, b.ts);
  swap(a.vid, b.vid);
  swap(a.cdnId, b.cdnId);
  swap(a.channelName, b.channelName);
  swap(a.trafficAgoraKb, b.trafficAgoraKb);
  swap(a.trafficCDNKb, b.trafficCDNKb);
  swap(a.__isset, b.__isset);
}

BCPeriodicUsage::BCPeriodicUsage(const BCPeriodicUsage& other286) {
  ts = other286.ts;
  vid = other286.vid;
  cdnId = other286.cdnId;
  channelName = other286.channelName;
  trafficAgoraKb = other286.trafficAgoraKb;
  trafficCDNKb = other286.trafficCDNKb;
  __isset = other286.__isset;
}
BCPeriodicUsage& BCPeriodicUsage::operator=(const BCPeriodicUsage& other287) {
  ts = other287.ts;
  vid = other287.vid;
  cdnId = other287.cdnId;
  channelName = other287.channelName;
  trafficAgoraKb = other287.trafficAgoraKb;
  trafficCDNKb = other287.trafficCDNKb;
  __isset = other287.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BCPeriodicUsage& obj) {
  using apache::thrift::to_string;
  out << "BCPeriodicUsage(";
  out << "ts="; (obj.__isset.ts ? (out << to_string(obj.ts)) : (out << "<null>"));
  out << ", " << "vid="; (obj.__isset.vid ? (out << to_string(obj.vid)) : (out << "<null>"));
  out << ", " << "cdnId="; (obj.__isset.cdnId ? (out << to_string(obj.cdnId)) : (out << "<null>"));
  out << ", " << "channelName="; (obj.__isset.channelName ? (out << to_string(obj.channelName)) : (out << "<null>"));
  out << ", " << "trafficAgoraKb="; (obj.__isset.trafficAgoraKb ? (out << to_string(obj.trafficAgoraKb)) : (out << "<null>"));
  out << ", " << "trafficCDNKb="; (obj.__isset.trafficCDNKb ? (out << to_string(obj.trafficCDNKb)) : (out << "<null>"));
  out << ")";
  return out;
}


TrackSpan::~TrackSpan() throw() {
}


void TrackSpan::__set_traceId(const std::string& val) {
  this->traceId = val;
}

void TrackSpan::__set_id(const std::string& val) {
  this->id = val;
}

void TrackSpan::__set_parentId(const std::string& val) {
  this->parentId = val;
__isset.parentId = true;
}

void TrackSpan::__set_spanName(const std::string& val) {
  this->spanName = val;
}

void TrackSpan::__set_annotations(const std::vector<Annotation> & val) {
  this->annotations = val;
}

void TrackSpan::__set_binaryAnnotations(const std::vector<BinaryAnnotation> & val) {
  this->binaryAnnotations = val;
__isset.binaryAnnotations = true;
}

void TrackSpan::__set_debug(const bool val) {
  this->debug = val;
__isset.debug = true;
}

void TrackSpan::__set_timestamp(const int64_t val) {
  this->timestamp = val;
__isset.timestamp = true;
}

void TrackSpan::__set_duration(const int64_t val) {
  this->duration = val;
__isset.duration = true;
}

void TrackSpan::__set_traceIdHigh(const int64_t val) {
  this->traceIdHigh = val;
__isset.traceIdHigh = true;
}

const char* TrackSpan::ascii_fingerprint = "9CC69AEEA962714EF0EF5C7E659F2723";
const uint8_t TrackSpan::binary_fingerprint[16] = {0x9C,0xC6,0x9A,0xEE,0xA9,0x62,0x71,0x4E,0xF0,0xEF,0x5C,0x7E,0x65,0x9F,0x27,0x23};

uint32_t TrackSpan::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->traceId);
          this->__isset.traceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parentId);
          this->__isset.parentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spanName);
          this->__isset.spanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->annotations.clear();
            uint32_t _size288;
            ::apache::thrift::protocol::TType _etype291;
            xfer += iprot->readListBegin(_etype291, _size288);
            this->annotations.resize(_size288);
            uint32_t _i292;
            for (_i292 = 0; _i292 < _size288; ++_i292)
            {
              xfer += this->annotations[_i292].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.annotations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->binaryAnnotations.clear();
            uint32_t _size293;
            ::apache::thrift::protocol::TType _etype296;
            xfer += iprot->readListBegin(_etype296, _size293);
            this->binaryAnnotations.resize(_size293);
            uint32_t _i297;
            for (_i297 = 0; _i297 < _size293; ++_i297)
            {
              xfer += this->binaryAnnotations[_i297].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.binaryAnnotations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->debug);
          this->__isset.debug = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->duration);
          this->__isset.duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->traceIdHigh);
          this->__isset.traceIdHigh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TrackSpan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TrackSpan");

  xfer += oprot->writeFieldBegin("traceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->traceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.parentId) {
    xfer += oprot->writeFieldBegin("parentId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->parentId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("spanName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->spanName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("annotations", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->annotations.size()));
    std::vector<Annotation> ::const_iterator _iter298;
    for (_iter298 = this->annotations.begin(); _iter298 != this->annotations.end(); ++_iter298)
    {
      xfer += (*_iter298).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.binaryAnnotations) {
    xfer += oprot->writeFieldBegin("binaryAnnotations", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->binaryAnnotations.size()));
      std::vector<BinaryAnnotation> ::const_iterator _iter299;
      for (_iter299 = this->binaryAnnotations.begin(); _iter299 != this->binaryAnnotations.end(); ++_iter299)
      {
        xfer += (*_iter299).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.debug) {
    xfer += oprot->writeFieldBegin("debug", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->debug);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timestamp) {
    xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->timestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.duration) {
    xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->duration);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.traceIdHigh) {
    xfer += oprot->writeFieldBegin("traceIdHigh", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->traceIdHigh);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TrackSpan &a, TrackSpan &b) {
  using ::std::swap;
  swap(a.traceId, b.traceId);
  swap(a.id, b.id);
  swap(a.parentId, b.parentId);
  swap(a.spanName, b.spanName);
  swap(a.annotations, b.annotations);
  swap(a.binaryAnnotations, b.binaryAnnotations);
  swap(a.debug, b.debug);
  swap(a.timestamp, b.timestamp);
  swap(a.duration, b.duration);
  swap(a.traceIdHigh, b.traceIdHigh);
  swap(a.__isset, b.__isset);
}

TrackSpan::TrackSpan(const TrackSpan& other300) {
  traceId = other300.traceId;
  id = other300.id;
  parentId = other300.parentId;
  spanName = other300.spanName;
  annotations = other300.annotations;
  binaryAnnotations = other300.binaryAnnotations;
  debug = other300.debug;
  timestamp = other300.timestamp;
  duration = other300.duration;
  traceIdHigh = other300.traceIdHigh;
  __isset = other300.__isset;
}
TrackSpan& TrackSpan::operator=(const TrackSpan& other301) {
  traceId = other301.traceId;
  id = other301.id;
  parentId = other301.parentId;
  spanName = other301.spanName;
  annotations = other301.annotations;
  binaryAnnotations = other301.binaryAnnotations;
  debug = other301.debug;
  timestamp = other301.timestamp;
  duration = other301.duration;
  traceIdHigh = other301.traceIdHigh;
  __isset = other301.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TrackSpan& obj) {
  using apache::thrift::to_string;
  out << "TrackSpan(";
  out << "traceId=" << to_string(obj.traceId);
  out << ", " << "id=" << to_string(obj.id);
  out << ", " << "parentId="; (obj.__isset.parentId ? (out << to_string(obj.parentId)) : (out << "<null>"));
  out << ", " << "spanName=" << to_string(obj.spanName);
  out << ", " << "annotations=" << to_string(obj.annotations);
  out << ", " << "binaryAnnotations="; (obj.__isset.binaryAnnotations ? (out << to_string(obj.binaryAnnotations)) : (out << "<null>"));
  out << ", " << "debug="; (obj.__isset.debug ? (out << to_string(obj.debug)) : (out << "<null>"));
  out << ", " << "timestamp="; (obj.__isset.timestamp ? (out << to_string(obj.timestamp)) : (out << "<null>"));
  out << ", " << "duration="; (obj.__isset.duration ? (out << to_string(obj.duration)) : (out << "<null>"));
  out << ", " << "traceIdHigh="; (obj.__isset.traceIdHigh ? (out << to_string(obj.traceIdHigh)) : (out << "<null>"));
  out << ")";
  return out;
}


Endpoint::~Endpoint() throw() {
}


void Endpoint::__set_ipv4(const int32_t val) {
  this->ipv4 = val;
}

void Endpoint::__set_port(const int16_t val) {
  this->port = val;
}

void Endpoint::__set_serviceName(const std::string& val) {
  this->serviceName = val;
}

const char* Endpoint::ascii_fingerprint = "C7D2D58463AC91C552EE8B325EA2ACCC";
const uint8_t Endpoint::binary_fingerprint[16] = {0xC7,0xD2,0xD5,0x84,0x63,0xAC,0x91,0xC5,0x52,0xEE,0x8B,0x32,0x5E,0xA2,0xAC,0xCC};

uint32_t Endpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ipv4);
          this->__isset.ipv4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceName);
          this->__isset.serviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Endpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Endpoint");

  xfer += oprot->writeFieldBegin("ipv4", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ipv4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->serviceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Endpoint &a, Endpoint &b) {
  using ::std::swap;
  swap(a.ipv4, b.ipv4);
  swap(a.port, b.port);
  swap(a.serviceName, b.serviceName);
  swap(a.__isset, b.__isset);
}

Endpoint::Endpoint(const Endpoint& other302) {
  ipv4 = other302.ipv4;
  port = other302.port;
  serviceName = other302.serviceName;
  __isset = other302.__isset;
}
Endpoint& Endpoint::operator=(const Endpoint& other303) {
  ipv4 = other303.ipv4;
  port = other303.port;
  serviceName = other303.serviceName;
  __isset = other303.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Endpoint& obj) {
  using apache::thrift::to_string;
  out << "Endpoint(";
  out << "ipv4=" << to_string(obj.ipv4);
  out << ", " << "port=" << to_string(obj.port);
  out << ", " << "serviceName=" << to_string(obj.serviceName);
  out << ")";
  return out;
}


Annotation::~Annotation() throw() {
}


void Annotation::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void Annotation::__set_value(const std::string& val) {
  this->value = val;
}

void Annotation::__set_endpoint(const Endpoint& val) {
  this->endpoint = val;
__isset.endpoint = true;
}

const char* Annotation::ascii_fingerprint = "82EEE62ECC9DC6A10ECBF7D79D1E84D9";
const uint8_t Annotation::binary_fingerprint[16] = {0x82,0xEE,0xE6,0x2E,0xCC,0x9D,0xC6,0xA1,0x0E,0xCB,0xF7,0xD7,0x9D,0x1E,0x84,0xD9};

uint32_t Annotation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->endpoint.read(iprot);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Annotation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Annotation");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.endpoint) {
    xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->endpoint.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Annotation &a, Annotation &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.value, b.value);
  swap(a.endpoint, b.endpoint);
  swap(a.__isset, b.__isset);
}

Annotation::Annotation(const Annotation& other304) {
  timestamp = other304.timestamp;
  value = other304.value;
  endpoint = other304.endpoint;
  __isset = other304.__isset;
}
Annotation& Annotation::operator=(const Annotation& other305) {
  timestamp = other305.timestamp;
  value = other305.value;
  endpoint = other305.endpoint;
  __isset = other305.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Annotation& obj) {
  using apache::thrift::to_string;
  out << "Annotation(";
  out << "timestamp=" << to_string(obj.timestamp);
  out << ", " << "value=" << to_string(obj.value);
  out << ", " << "endpoint="; (obj.__isset.endpoint ? (out << to_string(obj.endpoint)) : (out << "<null>"));
  out << ")";
  return out;
}


BinaryAnnotation::~BinaryAnnotation() throw() {
}


void BinaryAnnotation::__set_key(const std::string& val) {
  this->key = val;
}

void BinaryAnnotation::__set_value(const std::string& val) {
  this->value = val;
}

void BinaryAnnotation::__set_endpoint(const Endpoint& val) {
  this->endpoint = val;
__isset.endpoint = true;
}

const char* BinaryAnnotation::ascii_fingerprint = "ECA146688FA36D23BC41D77226E793AF";
const uint8_t BinaryAnnotation::binary_fingerprint[16] = {0xEC,0xA1,0x46,0x68,0x8F,0xA3,0x6D,0x23,0xBC,0x41,0xD7,0x72,0x26,0xE7,0x93,0xAF};

uint32_t BinaryAnnotation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->endpoint.read(iprot);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BinaryAnnotation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BinaryAnnotation");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.endpoint) {
    xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->endpoint.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BinaryAnnotation &a, BinaryAnnotation &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.endpoint, b.endpoint);
  swap(a.__isset, b.__isset);
}

BinaryAnnotation::BinaryAnnotation(const BinaryAnnotation& other306) {
  key = other306.key;
  value = other306.value;
  endpoint = other306.endpoint;
  __isset = other306.__isset;
}
BinaryAnnotation& BinaryAnnotation::operator=(const BinaryAnnotation& other307) {
  key = other307.key;
  value = other307.value;
  endpoint = other307.endpoint;
  __isset = other307.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BinaryAnnotation& obj) {
  using apache::thrift::to_string;
  out << "BinaryAnnotation(";
  out << "key=" << to_string(obj.key);
  out << ", " << "value=" << to_string(obj.value);
  out << ", " << "endpoint="; (obj.__isset.endpoint ? (out << to_string(obj.endpoint)) : (out << "<null>"));
  out << ")";
  return out;
}


VOSClientPeriodicState::~VOSClientPeriodicState() throw() {
}


void VOSClientPeriodicState::__set_ts(const int64_t val) {
  this->ts = val;
__isset.ts = true;
}

void VOSClientPeriodicState::__set_cid(const int64_t val) {
  this->cid = val;
__isset.cid = true;
}

void VOSClientPeriodicState::__set_uid(const int64_t val) {
  this->uid = val;
__isset.uid = true;
}

void VOSClientPeriodicState::__set_sid(const std::string& val) {
  this->sid = val;
__isset.sid = true;
}

void VOSClientPeriodicState::__set_vosId(const int32_t val) {
  this->vosId = val;
__isset.vosId = true;
}

void VOSClientPeriodicState::__set_state(const int32_t val) {
  this->state = val;
__isset.state = true;
}

const char* VOSClientPeriodicState::ascii_fingerprint = "B91646C516FD026B7B0F56A3B6E4D12F";
const uint8_t VOSClientPeriodicState::binary_fingerprint[16] = {0xB9,0x16,0x46,0xC5,0x16,0xFD,0x02,0x6B,0x7B,0x0F,0x56,0xA3,0xB6,0xE4,0xD1,0x2F};

uint32_t VOSClientPeriodicState::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ts);
          this->__isset.ts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cid);
          this->__isset.cid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sid);
          this->__isset.sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vosId);
          this->__isset.vosId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VOSClientPeriodicState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VOSClientPeriodicState");

  if (this->__isset.ts) {
    xfer += oprot->writeFieldBegin("ts", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->ts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cid) {
    xfer += oprot->writeFieldBegin("cid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->cid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sid) {
    xfer += oprot->writeFieldBegin("sid", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->sid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosId) {
    xfer += oprot->writeFieldBegin("vosId", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->vosId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.state) {
    xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->state);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VOSClientPeriodicState &a, VOSClientPeriodicState &b) {
  using ::std::swap;
  swap(a.ts, b.ts);
  swap(a.cid, b.cid);
  swap(a.uid, b.uid);
  swap(a.sid, b.sid);
  swap(a.vosId, b.vosId);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

VOSClientPeriodicState::VOSClientPeriodicState(const VOSClientPeriodicState& other308) {
  ts = other308.ts;
  cid = other308.cid;
  uid = other308.uid;
  sid = other308.sid;
  vosId = other308.vosId;
  state = other308.state;
  __isset = other308.__isset;
}
VOSClientPeriodicState& VOSClientPeriodicState::operator=(const VOSClientPeriodicState& other309) {
  ts = other309.ts;
  cid = other309.cid;
  uid = other309.uid;
  sid = other309.sid;
  vosId = other309.vosId;
  state = other309.state;
  __isset = other309.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VOSClientPeriodicState& obj) {
  using apache::thrift::to_string;
  out << "VOSClientPeriodicState(";
  out << "ts="; (obj.__isset.ts ? (out << to_string(obj.ts)) : (out << "<null>"));
  out << ", " << "cid="; (obj.__isset.cid ? (out << to_string(obj.cid)) : (out << "<null>"));
  out << ", " << "uid="; (obj.__isset.uid ? (out << to_string(obj.uid)) : (out << "<null>"));
  out << ", " << "sid="; (obj.__isset.sid ? (out << to_string(obj.sid)) : (out << "<null>"));
  out << ", " << "vosId="; (obj.__isset.vosId ? (out << to_string(obj.vosId)) : (out << "<null>"));
  out << ", " << "state="; (obj.__isset.state ? (out << to_string(obj.state)) : (out << "<null>"));
  out << ")";
  return out;
}


ReportItem::~ReportItem() throw() {
}


void ReportItem::__set_uri(const int32_t val) {
  this->uri = val;
}

void ReportItem::__set_encryptedItem(const EncryptedItem& val) {
  this->encryptedItem = val;
__isset.encryptedItem = true;
}

void ReportItem::__set_vosdkCounter(const VosdkCounter& val) {
  this->vosdkCounter = val;
__isset.vosdkCounter = true;
}

void ReportItem::__set_vosdkSession(const VosdkSession& val) {
  this->vosdkSession = val;
__isset.vosdkSession = true;
}

void ReportItem::__set_vosdkVocs(const VosdkVocs& val) {
  this->vosdkVocs = val;
__isset.vosdkVocs = true;
}

void ReportItem::__set_vosdkVos(const VosdkVos& val) {
  this->vosdkVos = val;
__isset.vosdkVos = true;
}

void ReportItem::__set_vosdkChan(const VosdkChan& val) {
  this->vosdkChan = val;
__isset.vosdkChan = true;
}

void ReportItem::__set_vosdkQuit(const VosdkQuit& val) {
  this->vosdkQuit = val;
__isset.vosdkQuit = true;
}

void ReportItem::__set_vosdkPeer(const VosdkPeer& val) {
  this->vosdkPeer = val;
__isset.vosdkPeer = true;
}

void ReportItem::__set_vosdkViLocalFrame(const VosdkViLocalFrame& val) {
  this->vosdkViLocalFrame = val;
__isset.vosdkViLocalFrame = true;
}

void ReportItem::__set_vosdkViRemoteFrame(const VosdkViRemoteFrame& val) {
  this->vosdkViRemoteFrame = val;
__isset.vosdkViRemoteFrame = true;
}

void ReportItem::__set_vosdkRating(const VosdkRating& val) {
  this->vosdkRating = val;
__isset.vosdkRating = true;
}

void ReportItem::__set_vosdkACodec(const VosdkACodec& val) {
  this->vosdkACodec = val;
__isset.vosdkACodec = true;
}

void ReportItem::__set_vosdkNetOb(const VosdkNetOb& val) {
  this->vosdkNetOb = val;
__isset.vosdkNetOb = true;
}

void ReportItem::__set_vosdkStartStun(const VosdkP2PStartStun& val) {
  this->vosdkStartStun = val;
__isset.vosdkStartStun = true;
}

void ReportItem::__set_vosdkSendDataBeginning(const VosdkP2PSendDataBeginning& val) {
  this->vosdkSendDataBeginning = val;
__isset.vosdkSendDataBeginning = true;
}

void ReportItem::__set_vosdkJoinIce(const VosdkP2PJoinIce& val) {
  this->vosdkJoinIce = val;
__isset.vosdkJoinIce = true;
}

void ReportItem::__set_vosdkSuccStun(const VosdkP2PSuccStun& val) {
  this->vosdkSuccStun = val;
__isset.vosdkSuccStun = true;
}

void ReportItem::__set_vosdkP2POpen(const VosdkP2POpen& val) {
  this->vosdkP2POpen = val;
__isset.vosdkP2POpen = true;
}

void ReportItem::__set_vosdkErrorCode(const VosdkErrorCode& val) {
  this->vosdkErrorCode = val;
__isset.vosdkErrorCode = true;
}

void ReportItem::__set_vosdkP2PSwitch(const VosdkP2PSwitch& val) {
  this->vosdkP2PSwitch = val;
__isset.vosdkP2PSwitch = true;
}

void ReportItem::__set_vosdkP2PStunStat(const VosdkP2PStunStat& val) {
  this->vosdkP2PStunStat = val;
__isset.vosdkP2PStunStat = true;
}

void ReportItem::__set_vosdkNetworkInformation(const VosdkNetworkInformation& val) {
  this->vosdkNetworkInformation = val;
__isset.vosdkNetworkInformation = true;
}

void ReportItem::__set_vosdkNetOb2(const VosdkNetOb2& val) {
  this->vosdkNetOb2 = val;
__isset.vosdkNetOb2 = true;
}

void ReportItem::__set_vosdkNetOb3(const VosdkNetOb3& val) {
  this->vosdkNetOb3 = val;
__isset.vosdkNetOb3 = true;
}

void ReportItem::__set_vosdkNetOb4(const VosdkNetOb4& val) {
  this->vosdkNetOb4 = val;
__isset.vosdkNetOb4 = true;
}

void ReportItem::__set_vosdkViRemoteFrameDecoded(const VosdkViRemoteFrameDecoded& val) {
  this->vosdkViRemoteFrameDecoded = val;
__isset.vosdkViRemoteFrameDecoded = true;
}

void ReportItem::__set_vosdkSwitchVideoStream(const VosdkSwitchVideoStream& val) {
  this->vosdkSwitchVideoStream = val;
__isset.vosdkSwitchVideoStream = true;
}

void ReportItem::__set_vosdkDeviceStatChange(const VosdkDeviceStatChange& val) {
  this->vosdkDeviceStatChange = val;
__isset.vosdkDeviceStatChange = true;
}

void ReportItem::__set_vosdkLbes(const VosdkLbes& val) {
  this->vosdkLbes = val;
__isset.vosdkLbes = true;
}

void ReportItem::__set_vosdkCameraInfos(const VosdkCameraInfos& val) {
  this->vosdkCameraInfos = val;
__isset.vosdkCameraInfos = true;
}

void ReportItem::__set_vosdkMaxVideoPayloadSet(const VosdkMaxVideoPayloadSet& val) {
  this->vosdkMaxVideoPayloadSet = val;
__isset.vosdkMaxVideoPayloadSet = true;
}

void ReportItem::__set_vosdkFirstAudioPacketSent(const VosdkFirstAudioPacketSent& val) {
  this->vosdkFirstAudioPacketSent = val;
__isset.vosdkFirstAudioPacketSent = true;
}

void ReportItem::__set_vosdkFirstAudioPacketReceived(const VosdkFirstAudioPacketReceived& val) {
  this->vosdkFirstAudioPacketReceived = val;
__isset.vosdkFirstAudioPacketReceived = true;
}

void ReportItem::__set_vosdkAudioSendingStopped(const VosdkAudioSendingStopped& val) {
  this->vosdkAudioSendingStopped = val;
__isset.vosdkAudioSendingStopped = true;
}

void ReportItem::__set_vosdkAudioDisabled(const VosdkAudioDisabled& val) {
  this->vosdkAudioDisabled = val;
__isset.vosdkAudioDisabled = true;
}

void ReportItem::__set_vosdkAudioEnabled(const VosdkAudioEnabled& val) {
  this->vosdkAudioEnabled = val;
__isset.vosdkAudioEnabled = true;
}

void ReportItem::__set_vosdkFirstVideoPacketSent(const VosdkFirstVideoPacketSent& val) {
  this->vosdkFirstVideoPacketSent = val;
__isset.vosdkFirstVideoPacketSent = true;
}

void ReportItem::__set_vosdkFirstVideoPacketReceived(const VosdkFirstVideoPacketReceived& val) {
  this->vosdkFirstVideoPacketReceived = val;
__isset.vosdkFirstVideoPacketReceived = true;
}

void ReportItem::__set_vosdkFirstVideoFrameDecoded(const VosdkFirstVideoFrameDecoded& val) {
  this->vosdkFirstVideoFrameDecoded = val;
__isset.vosdkFirstVideoFrameDecoded = true;
}

void ReportItem::__set_vosdkFirstVideoFrameDrawed(const VosdkFirstVideoFrameDrawed& val) {
  this->vosdkFirstVideoFrameDrawed = val;
__isset.vosdkFirstVideoFrameDrawed = true;
}

void ReportItem::__set_vosdkVideoSendingStopped(const VosdkVideoSendingStopped& val) {
  this->vosdkVideoSendingStopped = val;
__isset.vosdkVideoSendingStopped = true;
}

void ReportItem::__set_vosdkVideoDisabled(const VosdkVideoDisabled& val) {
  this->vosdkVideoDisabled = val;
__isset.vosdkVideoDisabled = true;
}

void ReportItem::__set_vosdkVideoEnabled(const VosdkVideoEnabled& val) {
  this->vosdkVideoEnabled = val;
__isset.vosdkVideoEnabled = true;
}

void ReportItem::__set_vosdkVideoStreamSelected(const VosdkVideoStreamSelected& val) {
  this->vosdkVideoStreamSelected = val;
__isset.vosdkVideoStreamSelected = true;
}

void ReportItem::__set_vosdkVideoStreamChangeRequest(const VosdkVideoStreamChangeRequest& val) {
  this->vosdkVideoStreamChangeRequest = val;
__isset.vosdkVideoStreamChangeRequest = true;
}

void ReportItem::__set_vosdkFirstDataPacketSent(const VosdkFirstDataPacketSent& val) {
  this->vosdkFirstDataPacketSent = val;
__isset.vosdkFirstDataPacketSent = true;
}

void ReportItem::__set_vosdkFirstDataPacketReceived(const VosdkFirstDataPacketReceived& val) {
  this->vosdkFirstDataPacketReceived = val;
__isset.vosdkFirstDataPacketReceived = true;
}

void ReportItem::__set_vosdkError(const VosdkError& val) {
  this->vosdkError = val;
__isset.vosdkError = true;
}

void ReportItem::__set_vosdkPeerOnlineStatus(const VosdkPeerOnlineStatus& val) {
  this->vosdkPeerOnlineStatus = val;
__isset.vosdkPeerOnlineStatus = true;
}

void ReportItem::__set_vosdkPeerOfflineStatus(const VosdkPeerOfflineStatus& val) {
  this->vosdkPeerOfflineStatus = val;
__isset.vosdkPeerOfflineStatus = true;
}

void ReportItem::__set_vosdkAudioMutePeerStatus(const VosdkAudioMutePeerStatus& val) {
  this->vosdkAudioMutePeerStatus = val;
__isset.vosdkAudioMutePeerStatus = true;
}

void ReportItem::__set_vosdkVideoMutePeerStatus(const VosdkVideoMutePeerStatus& val) {
  this->vosdkVideoMutePeerStatus = val;
__isset.vosdkVideoMutePeerStatus = true;
}

void ReportItem::__set_vosdkAudioMuteAllStatus(const VosdkAudioMuteAllStatus& val) {
  this->vosdkAudioMuteAllStatus = val;
__isset.vosdkAudioMuteAllStatus = true;
}

void ReportItem::__set_vosdkVideoMuteAllStatus(const VosdkVideoMuteAllStatus& val) {
  this->vosdkVideoMuteAllStatus = val;
__isset.vosdkVideoMuteAllStatus = true;
}

void ReportItem::__set_vosdkDefaultPeerStatus(const VosdkDefaultPeerStatus& val) {
  this->vosdkDefaultPeerStatus = val;
__isset.vosdkDefaultPeerStatus = true;
}

void ReportItem::__set_vosdkP2PStunLoginSuccess(const VosdkP2PStunLoginSuccess& val) {
  this->vosdkP2PStunLoginSuccess = val;
__isset.vosdkP2PStunLoginSuccess = true;
}

void ReportItem::__set_vosdkP2PStunLoginFailed(const VosdkP2PStunLoginFailed& val) {
  this->vosdkP2PStunLoginFailed = val;
__isset.vosdkP2PStunLoginFailed = true;
}

void ReportItem::__set_vosdkP2PPeerTryTouch(const VosdkP2PPeerTryTouch& val) {
  this->vosdkP2PPeerTryTouch = val;
__isset.vosdkP2PPeerTryTouch = true;
}

void ReportItem::__set_vosdkP2PPeerConnected(const VosdkP2PPeerConnected& val) {
  this->vosdkP2PPeerConnected = val;
__isset.vosdkP2PPeerConnected = true;
}

void ReportItem::__set_vosdkP2PPeerDisconnected(const VosdkP2PPeerDisconnected& val) {
  this->vosdkP2PPeerDisconnected = val;
__isset.vosdkP2PPeerDisconnected = true;
}

void ReportItem::__set_vosdkP2PStart(const VosdkP2PStart& val) {
  this->vosdkP2PStart = val;
__isset.vosdkP2PStart = true;
}

void ReportItem::__set_vosdkP2PStop(const VosdkP2PStop& val) {
  this->vosdkP2PStop = val;
__isset.vosdkP2PStop = true;
}

void ReportItem::__set_vosdkAPEvent(const VosdkAPEvent& val) {
  this->vosdkAPEvent = val;
__isset.vosdkAPEvent = true;
}

void ReportItem::__set_vosdkReportStats(const VosdkReportStats& val) {
  this->vosdkReportStats = val;
__isset.vosdkReportStats = true;
}

void ReportItem::__set_vosdkRecordingJoin(const VosdkRecordingJoin& val) {
  this->vosdkRecordingJoin = val;
__isset.vosdkRecordingJoin = true;
}

void ReportItem::__set_vosdkRecordingLeave(const VosdkRecordingLeave& val) {
  this->vosdkRecordingLeave = val;
__isset.vosdkRecordingLeave = true;
}

void ReportItem::__set_vosdkPrivilegeWillExpire(const VosdkPrivilegeWillExpire& val) {
  this->vosdkPrivilegeWillExpire = val;
__isset.vosdkPrivilegeWillExpire = true;
}

void ReportItem::__set_vosdkRenewToken(const VosdkRenewToken& val) {
  this->vosdkRenewToken = val;
__isset.vosdkRenewToken = true;
}

void ReportItem::__set_vosdkRenewTokenRes(const VosdkRenewTokenRes& val) {
  this->vosdkRenewTokenRes = val;
__isset.vosdkRenewTokenRes = true;
}

void ReportItem::__set_vosdkSignalingMsgStat(const VosdkSignalingMsgStat& val) {
  this->vosdkSignalingMsgStat = val;
__isset.vosdkSignalingMsgStat = true;
}

void ReportItem::__set_vosdkLocalFallbackStatus(const VosdkLocalFallbackStatus& val) {
  this->vosdkLocalFallbackStatus = val;
__isset.vosdkLocalFallbackStatus = true;
}

void ReportItem::__set_vosdkRemoteFallbackStatus(const VosdkRemoteFallbackStatus& val) {
  this->vosdkRemoteFallbackStatus = val;
__isset.vosdkRemoteFallbackStatus = true;
}

void ReportItem::__set_vosdkVideoBandwidthAggressiveLevel(const VosdkVideoBandwidthAggressiveLevel& val) {
  this->vosdkVideoBandwidthAggressiveLevel = val;
__isset.vosdkVideoBandwidthAggressiveLevel = true;
}

void ReportItem::__set_vosdkAppSetMinPlayoutDelay(const VosdkAppSetMinPlayoutDelay& val) {
  this->vosdkAppSetMinPlayoutDelay = val;
__isset.vosdkAppSetMinPlayoutDelay = true;
}

void ReportItem::__set_vosdkAppSetStartVideoBitRate(const VosdkAppSetStartVideoBitRate& val) {
  this->vosdkAppSetStartVideoBitRate = val;
__isset.vosdkAppSetStartVideoBitRate = true;
}

void ReportItem::__set_vosdkSendVideoPaced(const VosdkSendVideoPaced& val) {
  this->vosdkSendVideoPaced = val;
__isset.vosdkSendVideoPaced = true;
}

void ReportItem::__set_vosdkApiExec(const VosdkApiExec& val) {
  this->vosdkApiExec = val;
__isset.vosdkApiExec = true;
}

void ReportItem::__set_vosdkABTest(const VosdkABTest& val) {
  this->vosdkABTest = val;
__isset.vosdkABTest = true;
}

void ReportItem::__set_vosdkAPWorkerEvent(const VosdkAPWorkerEvent& val) {
  this->vosdkAPWorkerEvent = val;
__isset.vosdkAPWorkerEvent = true;
}

void ReportItem::__set_vosdkVideoInitialOptions(const VosdkVideoInitialOptions& val) {
  this->vosdkVideoInitialOptions = val;
__isset.vosdkVideoInitialOptions = true;
}

void ReportItem::__set_vosdkWorkerEvent(const VosdkWorkerEvent& val) {
  this->vosdkWorkerEvent = val;
__isset.vosdkWorkerEvent = true;
}

void ReportItem::__set_vosdkVqcStat(const VosdkVqcStat& val) {
  this->vosdkVqcStat = val;
__isset.vosdkVqcStat = true;
}

void ReportItem::__set_vosB2s(const Vosb2s& val) {
  this->vosB2s = val;
__isset.vosB2s = true;
}

void ReportItem::__set_wrtcBrowser2Gateway(const WrtcBrowser2Gateway& val) {
  this->wrtcBrowser2Gateway = val;
__isset.wrtcBrowser2Gateway = true;
}

void ReportItem::__set_wrtcProfile(const WrtcProfile& val) {
  this->wrtcProfile = val;
__isset.wrtcProfile = true;
}

void ReportItem::__set_wrtcPubStream(const WrtcPubStream& val) {
  this->wrtcPubStream = val;
__isset.wrtcPubStream = true;
}

void ReportItem::__set_wrtcUnpubStream(const WrtcUnpubStream& val) {
  this->wrtcUnpubStream = val;
__isset.wrtcUnpubStream = true;
}

void ReportItem::__set_wrtcSubStream(const WrtcSubStream& val) {
  this->wrtcSubStream = val;
__isset.wrtcSubStream = true;
}

void ReportItem::__set_wrtcUnsubStream(const WrtcUnsubStream& val) {
  this->wrtcUnsubStream = val;
__isset.wrtcUnsubStream = true;
}

void ReportItem::__set_whiteBoardJoinCenter(const WhiteBoardJoinCenter& val) {
  this->whiteBoardJoinCenter = val;
__isset.whiteBoardJoinCenter = true;
}

void ReportItem::__set_whiteBoardJoinEdge(const WhiteBoardJoinEdge& val) {
  this->whiteBoardJoinEdge = val;
__isset.whiteBoardJoinEdge = true;
}

void ReportItem::__set_whiteBoardJoinWebSocket(const WhiteBoardJoinWebSocket& val) {
  this->whiteBoardJoinWebSocket = val;
__isset.whiteBoardJoinWebSocket = true;
}

void ReportItem::__set_whiteBoardUploadFile(const WhiteBoardUploadFile& val) {
  this->whiteBoardUploadFile = val;
__isset.whiteBoardUploadFile = true;
}

void ReportItem::__set_whiteBoardQuitWebSocket(const WhiteBoardQuitWebSocket& val) {
  this->whiteBoardQuitWebSocket = val;
__isset.whiteBoardQuitWebSocket = true;
}

void ReportItem::__set_bcPushEvent(const BCPushEvent& val) {
  this->bcPushEvent = val;
__isset.bcPushEvent = true;
}

void ReportItem::__set_bcPeriodicUsage(const BCPeriodicUsage& val) {
  this->bcPeriodicUsage = val;
__isset.bcPeriodicUsage = true;
}

void ReportItem::__set_vosClientPeriodicState(const VOSClientPeriodicState& val) {
  this->vosClientPeriodicState = val;
__isset.vosClientPeriodicState = true;
}

void ReportItem::__set_trackSpan(const TrackSpan& val) {
  this->trackSpan = val;
__isset.trackSpan = true;
}

const char* ReportItem::ascii_fingerprint = "751C86260F2BB3DB326B9FA287E4C9AD";
const uint8_t ReportItem::binary_fingerprint[16] = {0x75,0x1C,0x86,0x26,0x0F,0x2B,0xB3,0xDB,0x32,0x6B,0x9F,0xA2,0x87,0xE4,0xC9,0xAD};

uint32_t ReportItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uri);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 900:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->encryptedItem.read(iprot);
          this->__isset.encryptedItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1000:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkCounter.read(iprot);
          this->__isset.vosdkCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1001:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkSession.read(iprot);
          this->__isset.vosdkSession = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1002:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVocs.read(iprot);
          this->__isset.vosdkVocs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1003:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVos.read(iprot);
          this->__isset.vosdkVos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1004:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkChan.read(iprot);
          this->__isset.vosdkChan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1005:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkQuit.read(iprot);
          this->__isset.vosdkQuit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1006:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkPeer.read(iprot);
          this->__isset.vosdkPeer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1007:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkViLocalFrame.read(iprot);
          this->__isset.vosdkViLocalFrame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1008:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkViRemoteFrame.read(iprot);
          this->__isset.vosdkViRemoteFrame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1009:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkRating.read(iprot);
          this->__isset.vosdkRating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1010:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkACodec.read(iprot);
          this->__isset.vosdkACodec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1011:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkNetOb.read(iprot);
          this->__isset.vosdkNetOb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1012:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkStartStun.read(iprot);
          this->__isset.vosdkStartStun = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1013:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkSendDataBeginning.read(iprot);
          this->__isset.vosdkSendDataBeginning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1014:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkJoinIce.read(iprot);
          this->__isset.vosdkJoinIce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1015:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkSuccStun.read(iprot);
          this->__isset.vosdkSuccStun = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1016:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkP2POpen.read(iprot);
          this->__isset.vosdkP2POpen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1017:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkErrorCode.read(iprot);
          this->__isset.vosdkErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1018:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkP2PSwitch.read(iprot);
          this->__isset.vosdkP2PSwitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1019:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkP2PStunStat.read(iprot);
          this->__isset.vosdkP2PStunStat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1020:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkNetworkInformation.read(iprot);
          this->__isset.vosdkNetworkInformation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1021:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkNetOb2.read(iprot);
          this->__isset.vosdkNetOb2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1022:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkNetOb3.read(iprot);
          this->__isset.vosdkNetOb3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1023:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkNetOb4.read(iprot);
          this->__isset.vosdkNetOb4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1024:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkViRemoteFrameDecoded.read(iprot);
          this->__isset.vosdkViRemoteFrameDecoded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1025:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkSwitchVideoStream.read(iprot);
          this->__isset.vosdkSwitchVideoStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1026:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkDeviceStatChange.read(iprot);
          this->__isset.vosdkDeviceStatChange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1027:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkLbes.read(iprot);
          this->__isset.vosdkLbes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1030:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkCameraInfos.read(iprot);
          this->__isset.vosdkCameraInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1031:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkMaxVideoPayloadSet.read(iprot);
          this->__isset.vosdkMaxVideoPayloadSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1032:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkFirstAudioPacketSent.read(iprot);
          this->__isset.vosdkFirstAudioPacketSent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1033:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkFirstAudioPacketReceived.read(iprot);
          this->__isset.vosdkFirstAudioPacketReceived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1034:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkAudioSendingStopped.read(iprot);
          this->__isset.vosdkAudioSendingStopped = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1035:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkAudioDisabled.read(iprot);
          this->__isset.vosdkAudioDisabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1036:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkAudioEnabled.read(iprot);
          this->__isset.vosdkAudioEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1037:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkFirstVideoPacketSent.read(iprot);
          this->__isset.vosdkFirstVideoPacketSent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1038:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkFirstVideoPacketReceived.read(iprot);
          this->__isset.vosdkFirstVideoPacketReceived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1039:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkFirstVideoFrameDecoded.read(iprot);
          this->__isset.vosdkFirstVideoFrameDecoded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1040:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkFirstVideoFrameDrawed.read(iprot);
          this->__isset.vosdkFirstVideoFrameDrawed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1041:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVideoSendingStopped.read(iprot);
          this->__isset.vosdkVideoSendingStopped = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1042:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVideoDisabled.read(iprot);
          this->__isset.vosdkVideoDisabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1043:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVideoEnabled.read(iprot);
          this->__isset.vosdkVideoEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1044:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVideoStreamSelected.read(iprot);
          this->__isset.vosdkVideoStreamSelected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1045:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVideoStreamChangeRequest.read(iprot);
          this->__isset.vosdkVideoStreamChangeRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1046:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkFirstDataPacketSent.read(iprot);
          this->__isset.vosdkFirstDataPacketSent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1047:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkFirstDataPacketReceived.read(iprot);
          this->__isset.vosdkFirstDataPacketReceived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1048:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkError.read(iprot);
          this->__isset.vosdkError = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1049:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkPeerOnlineStatus.read(iprot);
          this->__isset.vosdkPeerOnlineStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1050:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkPeerOfflineStatus.read(iprot);
          this->__isset.vosdkPeerOfflineStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1051:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkAudioMutePeerStatus.read(iprot);
          this->__isset.vosdkAudioMutePeerStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1052:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVideoMutePeerStatus.read(iprot);
          this->__isset.vosdkVideoMutePeerStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1053:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkAudioMuteAllStatus.read(iprot);
          this->__isset.vosdkAudioMuteAllStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1054:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVideoMuteAllStatus.read(iprot);
          this->__isset.vosdkVideoMuteAllStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1055:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkDefaultPeerStatus.read(iprot);
          this->__isset.vosdkDefaultPeerStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1056:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkP2PStunLoginSuccess.read(iprot);
          this->__isset.vosdkP2PStunLoginSuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1057:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkP2PStunLoginFailed.read(iprot);
          this->__isset.vosdkP2PStunLoginFailed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1058:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkP2PPeerTryTouch.read(iprot);
          this->__isset.vosdkP2PPeerTryTouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1059:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkP2PPeerConnected.read(iprot);
          this->__isset.vosdkP2PPeerConnected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1060:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkP2PPeerDisconnected.read(iprot);
          this->__isset.vosdkP2PPeerDisconnected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1061:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkP2PStart.read(iprot);
          this->__isset.vosdkP2PStart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1062:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkP2PStop.read(iprot);
          this->__isset.vosdkP2PStop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1063:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkAPEvent.read(iprot);
          this->__isset.vosdkAPEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1064:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkReportStats.read(iprot);
          this->__isset.vosdkReportStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1065:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkRecordingJoin.read(iprot);
          this->__isset.vosdkRecordingJoin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1066:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkRecordingLeave.read(iprot);
          this->__isset.vosdkRecordingLeave = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1067:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkPrivilegeWillExpire.read(iprot);
          this->__isset.vosdkPrivilegeWillExpire = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1068:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkRenewToken.read(iprot);
          this->__isset.vosdkRenewToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1069:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkRenewTokenRes.read(iprot);
          this->__isset.vosdkRenewTokenRes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1070:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkSignalingMsgStat.read(iprot);
          this->__isset.vosdkSignalingMsgStat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1072:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkLocalFallbackStatus.read(iprot);
          this->__isset.vosdkLocalFallbackStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1073:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkRemoteFallbackStatus.read(iprot);
          this->__isset.vosdkRemoteFallbackStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1074:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVideoBandwidthAggressiveLevel.read(iprot);
          this->__isset.vosdkVideoBandwidthAggressiveLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1075:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkAppSetMinPlayoutDelay.read(iprot);
          this->__isset.vosdkAppSetMinPlayoutDelay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1076:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkAppSetStartVideoBitRate.read(iprot);
          this->__isset.vosdkAppSetStartVideoBitRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1077:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkSendVideoPaced.read(iprot);
          this->__isset.vosdkSendVideoPaced = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1078:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkApiExec.read(iprot);
          this->__isset.vosdkApiExec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1080:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkABTest.read(iprot);
          this->__isset.vosdkABTest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1081:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkAPWorkerEvent.read(iprot);
          this->__isset.vosdkAPWorkerEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1082:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVideoInitialOptions.read(iprot);
          this->__isset.vosdkVideoInitialOptions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1084:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkWorkerEvent.read(iprot);
          this->__isset.vosdkWorkerEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1085:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosdkVqcStat.read(iprot);
          this->__isset.vosdkVqcStat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2000:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosB2s.read(iprot);
          this->__isset.vosB2s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2001:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcBrowser2Gateway.read(iprot);
          this->__isset.wrtcBrowser2Gateway = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2002:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcProfile.read(iprot);
          this->__isset.wrtcProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2003:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcPubStream.read(iprot);
          this->__isset.wrtcPubStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2004:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcUnpubStream.read(iprot);
          this->__isset.wrtcUnpubStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2005:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcSubStream.read(iprot);
          this->__isset.wrtcSubStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2006:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wrtcUnsubStream.read(iprot);
          this->__isset.wrtcUnsubStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2101:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->whiteBoardJoinCenter.read(iprot);
          this->__isset.whiteBoardJoinCenter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2102:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->whiteBoardJoinEdge.read(iprot);
          this->__isset.whiteBoardJoinEdge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2103:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->whiteBoardJoinWebSocket.read(iprot);
          this->__isset.whiteBoardJoinWebSocket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2104:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->whiteBoardUploadFile.read(iprot);
          this->__isset.whiteBoardUploadFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2105:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->whiteBoardQuitWebSocket.read(iprot);
          this->__isset.whiteBoardQuitWebSocket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3000:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bcPushEvent.read(iprot);
          this->__isset.bcPushEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3001:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bcPeriodicUsage.read(iprot);
          this->__isset.bcPeriodicUsage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4000:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vosClientPeriodicState.read(iprot);
          this->__isset.vosClientPeriodicState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5000:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trackSpan.read(iprot);
          this->__isset.trackSpan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReportItem");

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uri);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.encryptedItem) {
    xfer += oprot->writeFieldBegin("encryptedItem", ::apache::thrift::protocol::T_STRUCT, 900);
    xfer += this->encryptedItem.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkCounter) {
    xfer += oprot->writeFieldBegin("vosdkCounter", ::apache::thrift::protocol::T_STRUCT, 1000);
    xfer += this->vosdkCounter.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkSession) {
    xfer += oprot->writeFieldBegin("vosdkSession", ::apache::thrift::protocol::T_STRUCT, 1001);
    xfer += this->vosdkSession.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVocs) {
    xfer += oprot->writeFieldBegin("vosdkVocs", ::apache::thrift::protocol::T_STRUCT, 1002);
    xfer += this->vosdkVocs.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVos) {
    xfer += oprot->writeFieldBegin("vosdkVos", ::apache::thrift::protocol::T_STRUCT, 1003);
    xfer += this->vosdkVos.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkChan) {
    xfer += oprot->writeFieldBegin("vosdkChan", ::apache::thrift::protocol::T_STRUCT, 1004);
    xfer += this->vosdkChan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkQuit) {
    xfer += oprot->writeFieldBegin("vosdkQuit", ::apache::thrift::protocol::T_STRUCT, 1005);
    xfer += this->vosdkQuit.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkPeer) {
    xfer += oprot->writeFieldBegin("vosdkPeer", ::apache::thrift::protocol::T_STRUCT, 1006);
    xfer += this->vosdkPeer.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkViLocalFrame) {
    xfer += oprot->writeFieldBegin("vosdkViLocalFrame", ::apache::thrift::protocol::T_STRUCT, 1007);
    xfer += this->vosdkViLocalFrame.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkViRemoteFrame) {
    xfer += oprot->writeFieldBegin("vosdkViRemoteFrame", ::apache::thrift::protocol::T_STRUCT, 1008);
    xfer += this->vosdkViRemoteFrame.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkRating) {
    xfer += oprot->writeFieldBegin("vosdkRating", ::apache::thrift::protocol::T_STRUCT, 1009);
    xfer += this->vosdkRating.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkACodec) {
    xfer += oprot->writeFieldBegin("vosdkACodec", ::apache::thrift::protocol::T_STRUCT, 1010);
    xfer += this->vosdkACodec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkNetOb) {
    xfer += oprot->writeFieldBegin("vosdkNetOb", ::apache::thrift::protocol::T_STRUCT, 1011);
    xfer += this->vosdkNetOb.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkStartStun) {
    xfer += oprot->writeFieldBegin("vosdkStartStun", ::apache::thrift::protocol::T_STRUCT, 1012);
    xfer += this->vosdkStartStun.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkSendDataBeginning) {
    xfer += oprot->writeFieldBegin("vosdkSendDataBeginning", ::apache::thrift::protocol::T_STRUCT, 1013);
    xfer += this->vosdkSendDataBeginning.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkJoinIce) {
    xfer += oprot->writeFieldBegin("vosdkJoinIce", ::apache::thrift::protocol::T_STRUCT, 1014);
    xfer += this->vosdkJoinIce.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkSuccStun) {
    xfer += oprot->writeFieldBegin("vosdkSuccStun", ::apache::thrift::protocol::T_STRUCT, 1015);
    xfer += this->vosdkSuccStun.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkP2POpen) {
    xfer += oprot->writeFieldBegin("vosdkP2POpen", ::apache::thrift::protocol::T_STRUCT, 1016);
    xfer += this->vosdkP2POpen.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkErrorCode) {
    xfer += oprot->writeFieldBegin("vosdkErrorCode", ::apache::thrift::protocol::T_STRUCT, 1017);
    xfer += this->vosdkErrorCode.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkP2PSwitch) {
    xfer += oprot->writeFieldBegin("vosdkP2PSwitch", ::apache::thrift::protocol::T_STRUCT, 1018);
    xfer += this->vosdkP2PSwitch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkP2PStunStat) {
    xfer += oprot->writeFieldBegin("vosdkP2PStunStat", ::apache::thrift::protocol::T_STRUCT, 1019);
    xfer += this->vosdkP2PStunStat.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkNetworkInformation) {
    xfer += oprot->writeFieldBegin("vosdkNetworkInformation", ::apache::thrift::protocol::T_STRUCT, 1020);
    xfer += this->vosdkNetworkInformation.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkNetOb2) {
    xfer += oprot->writeFieldBegin("vosdkNetOb2", ::apache::thrift::protocol::T_STRUCT, 1021);
    xfer += this->vosdkNetOb2.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkNetOb3) {
    xfer += oprot->writeFieldBegin("vosdkNetOb3", ::apache::thrift::protocol::T_STRUCT, 1022);
    xfer += this->vosdkNetOb3.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkNetOb4) {
    xfer += oprot->writeFieldBegin("vosdkNetOb4", ::apache::thrift::protocol::T_STRUCT, 1023);
    xfer += this->vosdkNetOb4.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkViRemoteFrameDecoded) {
    xfer += oprot->writeFieldBegin("vosdkViRemoteFrameDecoded", ::apache::thrift::protocol::T_STRUCT, 1024);
    xfer += this->vosdkViRemoteFrameDecoded.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkSwitchVideoStream) {
    xfer += oprot->writeFieldBegin("vosdkSwitchVideoStream", ::apache::thrift::protocol::T_STRUCT, 1025);
    xfer += this->vosdkSwitchVideoStream.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkDeviceStatChange) {
    xfer += oprot->writeFieldBegin("vosdkDeviceStatChange", ::apache::thrift::protocol::T_STRUCT, 1026);
    xfer += this->vosdkDeviceStatChange.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkLbes) {
    xfer += oprot->writeFieldBegin("vosdkLbes", ::apache::thrift::protocol::T_STRUCT, 1027);
    xfer += this->vosdkLbes.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkCameraInfos) {
    xfer += oprot->writeFieldBegin("vosdkCameraInfos", ::apache::thrift::protocol::T_STRUCT, 1030);
    xfer += this->vosdkCameraInfos.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkMaxVideoPayloadSet) {
    xfer += oprot->writeFieldBegin("vosdkMaxVideoPayloadSet", ::apache::thrift::protocol::T_STRUCT, 1031);
    xfer += this->vosdkMaxVideoPayloadSet.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkFirstAudioPacketSent) {
    xfer += oprot->writeFieldBegin("vosdkFirstAudioPacketSent", ::apache::thrift::protocol::T_STRUCT, 1032);
    xfer += this->vosdkFirstAudioPacketSent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkFirstAudioPacketReceived) {
    xfer += oprot->writeFieldBegin("vosdkFirstAudioPacketReceived", ::apache::thrift::protocol::T_STRUCT, 1033);
    xfer += this->vosdkFirstAudioPacketReceived.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkAudioSendingStopped) {
    xfer += oprot->writeFieldBegin("vosdkAudioSendingStopped", ::apache::thrift::protocol::T_STRUCT, 1034);
    xfer += this->vosdkAudioSendingStopped.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkAudioDisabled) {
    xfer += oprot->writeFieldBegin("vosdkAudioDisabled", ::apache::thrift::protocol::T_STRUCT, 1035);
    xfer += this->vosdkAudioDisabled.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkAudioEnabled) {
    xfer += oprot->writeFieldBegin("vosdkAudioEnabled", ::apache::thrift::protocol::T_STRUCT, 1036);
    xfer += this->vosdkAudioEnabled.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkFirstVideoPacketSent) {
    xfer += oprot->writeFieldBegin("vosdkFirstVideoPacketSent", ::apache::thrift::protocol::T_STRUCT, 1037);
    xfer += this->vosdkFirstVideoPacketSent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkFirstVideoPacketReceived) {
    xfer += oprot->writeFieldBegin("vosdkFirstVideoPacketReceived", ::apache::thrift::protocol::T_STRUCT, 1038);
    xfer += this->vosdkFirstVideoPacketReceived.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkFirstVideoFrameDecoded) {
    xfer += oprot->writeFieldBegin("vosdkFirstVideoFrameDecoded", ::apache::thrift::protocol::T_STRUCT, 1039);
    xfer += this->vosdkFirstVideoFrameDecoded.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkFirstVideoFrameDrawed) {
    xfer += oprot->writeFieldBegin("vosdkFirstVideoFrameDrawed", ::apache::thrift::protocol::T_STRUCT, 1040);
    xfer += this->vosdkFirstVideoFrameDrawed.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVideoSendingStopped) {
    xfer += oprot->writeFieldBegin("vosdkVideoSendingStopped", ::apache::thrift::protocol::T_STRUCT, 1041);
    xfer += this->vosdkVideoSendingStopped.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVideoDisabled) {
    xfer += oprot->writeFieldBegin("vosdkVideoDisabled", ::apache::thrift::protocol::T_STRUCT, 1042);
    xfer += this->vosdkVideoDisabled.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVideoEnabled) {
    xfer += oprot->writeFieldBegin("vosdkVideoEnabled", ::apache::thrift::protocol::T_STRUCT, 1043);
    xfer += this->vosdkVideoEnabled.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVideoStreamSelected) {
    xfer += oprot->writeFieldBegin("vosdkVideoStreamSelected", ::apache::thrift::protocol::T_STRUCT, 1044);
    xfer += this->vosdkVideoStreamSelected.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVideoStreamChangeRequest) {
    xfer += oprot->writeFieldBegin("vosdkVideoStreamChangeRequest", ::apache::thrift::protocol::T_STRUCT, 1045);
    xfer += this->vosdkVideoStreamChangeRequest.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkFirstDataPacketSent) {
    xfer += oprot->writeFieldBegin("vosdkFirstDataPacketSent", ::apache::thrift::protocol::T_STRUCT, 1046);
    xfer += this->vosdkFirstDataPacketSent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkFirstDataPacketReceived) {
    xfer += oprot->writeFieldBegin("vosdkFirstDataPacketReceived", ::apache::thrift::protocol::T_STRUCT, 1047);
    xfer += this->vosdkFirstDataPacketReceived.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkError) {
    xfer += oprot->writeFieldBegin("vosdkError", ::apache::thrift::protocol::T_STRUCT, 1048);
    xfer += this->vosdkError.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkPeerOnlineStatus) {
    xfer += oprot->writeFieldBegin("vosdkPeerOnlineStatus", ::apache::thrift::protocol::T_STRUCT, 1049);
    xfer += this->vosdkPeerOnlineStatus.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkPeerOfflineStatus) {
    xfer += oprot->writeFieldBegin("vosdkPeerOfflineStatus", ::apache::thrift::protocol::T_STRUCT, 1050);
    xfer += this->vosdkPeerOfflineStatus.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkAudioMutePeerStatus) {
    xfer += oprot->writeFieldBegin("vosdkAudioMutePeerStatus", ::apache::thrift::protocol::T_STRUCT, 1051);
    xfer += this->vosdkAudioMutePeerStatus.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVideoMutePeerStatus) {
    xfer += oprot->writeFieldBegin("vosdkVideoMutePeerStatus", ::apache::thrift::protocol::T_STRUCT, 1052);
    xfer += this->vosdkVideoMutePeerStatus.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkAudioMuteAllStatus) {
    xfer += oprot->writeFieldBegin("vosdkAudioMuteAllStatus", ::apache::thrift::protocol::T_STRUCT, 1053);
    xfer += this->vosdkAudioMuteAllStatus.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVideoMuteAllStatus) {
    xfer += oprot->writeFieldBegin("vosdkVideoMuteAllStatus", ::apache::thrift::protocol::T_STRUCT, 1054);
    xfer += this->vosdkVideoMuteAllStatus.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkDefaultPeerStatus) {
    xfer += oprot->writeFieldBegin("vosdkDefaultPeerStatus", ::apache::thrift::protocol::T_STRUCT, 1055);
    xfer += this->vosdkDefaultPeerStatus.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkP2PStunLoginSuccess) {
    xfer += oprot->writeFieldBegin("vosdkP2PStunLoginSuccess", ::apache::thrift::protocol::T_STRUCT, 1056);
    xfer += this->vosdkP2PStunLoginSuccess.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkP2PStunLoginFailed) {
    xfer += oprot->writeFieldBegin("vosdkP2PStunLoginFailed", ::apache::thrift::protocol::T_STRUCT, 1057);
    xfer += this->vosdkP2PStunLoginFailed.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkP2PPeerTryTouch) {
    xfer += oprot->writeFieldBegin("vosdkP2PPeerTryTouch", ::apache::thrift::protocol::T_STRUCT, 1058);
    xfer += this->vosdkP2PPeerTryTouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkP2PPeerConnected) {
    xfer += oprot->writeFieldBegin("vosdkP2PPeerConnected", ::apache::thrift::protocol::T_STRUCT, 1059);
    xfer += this->vosdkP2PPeerConnected.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkP2PPeerDisconnected) {
    xfer += oprot->writeFieldBegin("vosdkP2PPeerDisconnected", ::apache::thrift::protocol::T_STRUCT, 1060);
    xfer += this->vosdkP2PPeerDisconnected.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkP2PStart) {
    xfer += oprot->writeFieldBegin("vosdkP2PStart", ::apache::thrift::protocol::T_STRUCT, 1061);
    xfer += this->vosdkP2PStart.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkP2PStop) {
    xfer += oprot->writeFieldBegin("vosdkP2PStop", ::apache::thrift::protocol::T_STRUCT, 1062);
    xfer += this->vosdkP2PStop.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkAPEvent) {
    xfer += oprot->writeFieldBegin("vosdkAPEvent", ::apache::thrift::protocol::T_STRUCT, 1063);
    xfer += this->vosdkAPEvent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkReportStats) {
    xfer += oprot->writeFieldBegin("vosdkReportStats", ::apache::thrift::protocol::T_STRUCT, 1064);
    xfer += this->vosdkReportStats.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkRecordingJoin) {
    xfer += oprot->writeFieldBegin("vosdkRecordingJoin", ::apache::thrift::protocol::T_STRUCT, 1065);
    xfer += this->vosdkRecordingJoin.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkRecordingLeave) {
    xfer += oprot->writeFieldBegin("vosdkRecordingLeave", ::apache::thrift::protocol::T_STRUCT, 1066);
    xfer += this->vosdkRecordingLeave.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkPrivilegeWillExpire) {
    xfer += oprot->writeFieldBegin("vosdkPrivilegeWillExpire", ::apache::thrift::protocol::T_STRUCT, 1067);
    xfer += this->vosdkPrivilegeWillExpire.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkRenewToken) {
    xfer += oprot->writeFieldBegin("vosdkRenewToken", ::apache::thrift::protocol::T_STRUCT, 1068);
    xfer += this->vosdkRenewToken.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkRenewTokenRes) {
    xfer += oprot->writeFieldBegin("vosdkRenewTokenRes", ::apache::thrift::protocol::T_STRUCT, 1069);
    xfer += this->vosdkRenewTokenRes.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkSignalingMsgStat) {
    xfer += oprot->writeFieldBegin("vosdkSignalingMsgStat", ::apache::thrift::protocol::T_STRUCT, 1070);
    xfer += this->vosdkSignalingMsgStat.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkLocalFallbackStatus) {
    xfer += oprot->writeFieldBegin("vosdkLocalFallbackStatus", ::apache::thrift::protocol::T_STRUCT, 1072);
    xfer += this->vosdkLocalFallbackStatus.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkRemoteFallbackStatus) {
    xfer += oprot->writeFieldBegin("vosdkRemoteFallbackStatus", ::apache::thrift::protocol::T_STRUCT, 1073);
    xfer += this->vosdkRemoteFallbackStatus.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVideoBandwidthAggressiveLevel) {
    xfer += oprot->writeFieldBegin("vosdkVideoBandwidthAggressiveLevel", ::apache::thrift::protocol::T_STRUCT, 1074);
    xfer += this->vosdkVideoBandwidthAggressiveLevel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkAppSetMinPlayoutDelay) {
    xfer += oprot->writeFieldBegin("vosdkAppSetMinPlayoutDelay", ::apache::thrift::protocol::T_STRUCT, 1075);
    xfer += this->vosdkAppSetMinPlayoutDelay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkAppSetStartVideoBitRate) {
    xfer += oprot->writeFieldBegin("vosdkAppSetStartVideoBitRate", ::apache::thrift::protocol::T_STRUCT, 1076);
    xfer += this->vosdkAppSetStartVideoBitRate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkSendVideoPaced) {
    xfer += oprot->writeFieldBegin("vosdkSendVideoPaced", ::apache::thrift::protocol::T_STRUCT, 1077);
    xfer += this->vosdkSendVideoPaced.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkApiExec) {
    xfer += oprot->writeFieldBegin("vosdkApiExec", ::apache::thrift::protocol::T_STRUCT, 1078);
    xfer += this->vosdkApiExec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkABTest) {
    xfer += oprot->writeFieldBegin("vosdkABTest", ::apache::thrift::protocol::T_STRUCT, 1080);
    xfer += this->vosdkABTest.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkAPWorkerEvent) {
    xfer += oprot->writeFieldBegin("vosdkAPWorkerEvent", ::apache::thrift::protocol::T_STRUCT, 1081);
    xfer += this->vosdkAPWorkerEvent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVideoInitialOptions) {
    xfer += oprot->writeFieldBegin("vosdkVideoInitialOptions", ::apache::thrift::protocol::T_STRUCT, 1082);
    xfer += this->vosdkVideoInitialOptions.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkWorkerEvent) {
    xfer += oprot->writeFieldBegin("vosdkWorkerEvent", ::apache::thrift::protocol::T_STRUCT, 1084);
    xfer += this->vosdkWorkerEvent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosdkVqcStat) {
    xfer += oprot->writeFieldBegin("vosdkVqcStat", ::apache::thrift::protocol::T_STRUCT, 1085);
    xfer += this->vosdkVqcStat.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosB2s) {
    xfer += oprot->writeFieldBegin("vosB2s", ::apache::thrift::protocol::T_STRUCT, 2000);
    xfer += this->vosB2s.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcBrowser2Gateway) {
    xfer += oprot->writeFieldBegin("wrtcBrowser2Gateway", ::apache::thrift::protocol::T_STRUCT, 2001);
    xfer += this->wrtcBrowser2Gateway.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcProfile) {
    xfer += oprot->writeFieldBegin("wrtcProfile", ::apache::thrift::protocol::T_STRUCT, 2002);
    xfer += this->wrtcProfile.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcPubStream) {
    xfer += oprot->writeFieldBegin("wrtcPubStream", ::apache::thrift::protocol::T_STRUCT, 2003);
    xfer += this->wrtcPubStream.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcUnpubStream) {
    xfer += oprot->writeFieldBegin("wrtcUnpubStream", ::apache::thrift::protocol::T_STRUCT, 2004);
    xfer += this->wrtcUnpubStream.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcSubStream) {
    xfer += oprot->writeFieldBegin("wrtcSubStream", ::apache::thrift::protocol::T_STRUCT, 2005);
    xfer += this->wrtcSubStream.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wrtcUnsubStream) {
    xfer += oprot->writeFieldBegin("wrtcUnsubStream", ::apache::thrift::protocol::T_STRUCT, 2006);
    xfer += this->wrtcUnsubStream.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.whiteBoardJoinCenter) {
    xfer += oprot->writeFieldBegin("whiteBoardJoinCenter", ::apache::thrift::protocol::T_STRUCT, 2101);
    xfer += this->whiteBoardJoinCenter.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.whiteBoardJoinEdge) {
    xfer += oprot->writeFieldBegin("whiteBoardJoinEdge", ::apache::thrift::protocol::T_STRUCT, 2102);
    xfer += this->whiteBoardJoinEdge.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.whiteBoardJoinWebSocket) {
    xfer += oprot->writeFieldBegin("whiteBoardJoinWebSocket", ::apache::thrift::protocol::T_STRUCT, 2103);
    xfer += this->whiteBoardJoinWebSocket.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.whiteBoardUploadFile) {
    xfer += oprot->writeFieldBegin("whiteBoardUploadFile", ::apache::thrift::protocol::T_STRUCT, 2104);
    xfer += this->whiteBoardUploadFile.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.whiteBoardQuitWebSocket) {
    xfer += oprot->writeFieldBegin("whiteBoardQuitWebSocket", ::apache::thrift::protocol::T_STRUCT, 2105);
    xfer += this->whiteBoardQuitWebSocket.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bcPushEvent) {
    xfer += oprot->writeFieldBegin("bcPushEvent", ::apache::thrift::protocol::T_STRUCT, 3000);
    xfer += this->bcPushEvent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bcPeriodicUsage) {
    xfer += oprot->writeFieldBegin("bcPeriodicUsage", ::apache::thrift::protocol::T_STRUCT, 3001);
    xfer += this->bcPeriodicUsage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vosClientPeriodicState) {
    xfer += oprot->writeFieldBegin("vosClientPeriodicState", ::apache::thrift::protocol::T_STRUCT, 4000);
    xfer += this->vosClientPeriodicState.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.trackSpan) {
    xfer += oprot->writeFieldBegin("trackSpan", ::apache::thrift::protocol::T_STRUCT, 5000);
    xfer += this->trackSpan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReportItem &a, ReportItem &b) {
  using ::std::swap;
  swap(a.uri, b.uri);
  swap(a.encryptedItem, b.encryptedItem);
  swap(a.vosdkCounter, b.vosdkCounter);
  swap(a.vosdkSession, b.vosdkSession);
  swap(a.vosdkVocs, b.vosdkVocs);
  swap(a.vosdkVos, b.vosdkVos);
  swap(a.vosdkChan, b.vosdkChan);
  swap(a.vosdkQuit, b.vosdkQuit);
  swap(a.vosdkPeer, b.vosdkPeer);
  swap(a.vosdkViLocalFrame, b.vosdkViLocalFrame);
  swap(a.vosdkViRemoteFrame, b.vosdkViRemoteFrame);
  swap(a.vosdkRating, b.vosdkRating);
  swap(a.vosdkACodec, b.vosdkACodec);
  swap(a.vosdkNetOb, b.vosdkNetOb);
  swap(a.vosdkStartStun, b.vosdkStartStun);
  swap(a.vosdkSendDataBeginning, b.vosdkSendDataBeginning);
  swap(a.vosdkJoinIce, b.vosdkJoinIce);
  swap(a.vosdkSuccStun, b.vosdkSuccStun);
  swap(a.vosdkP2POpen, b.vosdkP2POpen);
  swap(a.vosdkErrorCode, b.vosdkErrorCode);
  swap(a.vosdkP2PSwitch, b.vosdkP2PSwitch);
  swap(a.vosdkP2PStunStat, b.vosdkP2PStunStat);
  swap(a.vosdkNetworkInformation, b.vosdkNetworkInformation);
  swap(a.vosdkNetOb2, b.vosdkNetOb2);
  swap(a.vosdkNetOb3, b.vosdkNetOb3);
  swap(a.vosdkNetOb4, b.vosdkNetOb4);
  swap(a.vosdkViRemoteFrameDecoded, b.vosdkViRemoteFrameDecoded);
  swap(a.vosdkSwitchVideoStream, b.vosdkSwitchVideoStream);
  swap(a.vosdkDeviceStatChange, b.vosdkDeviceStatChange);
  swap(a.vosdkLbes, b.vosdkLbes);
  swap(a.vosdkCameraInfos, b.vosdkCameraInfos);
  swap(a.vosdkMaxVideoPayloadSet, b.vosdkMaxVideoPayloadSet);
  swap(a.vosdkFirstAudioPacketSent, b.vosdkFirstAudioPacketSent);
  swap(a.vosdkFirstAudioPacketReceived, b.vosdkFirstAudioPacketReceived);
  swap(a.vosdkAudioSendingStopped, b.vosdkAudioSendingStopped);
  swap(a.vosdkAudioDisabled, b.vosdkAudioDisabled);
  swap(a.vosdkAudioEnabled, b.vosdkAudioEnabled);
  swap(a.vosdkFirstVideoPacketSent, b.vosdkFirstVideoPacketSent);
  swap(a.vosdkFirstVideoPacketReceived, b.vosdkFirstVideoPacketReceived);
  swap(a.vosdkFirstVideoFrameDecoded, b.vosdkFirstVideoFrameDecoded);
  swap(a.vosdkFirstVideoFrameDrawed, b.vosdkFirstVideoFrameDrawed);
  swap(a.vosdkVideoSendingStopped, b.vosdkVideoSendingStopped);
  swap(a.vosdkVideoDisabled, b.vosdkVideoDisabled);
  swap(a.vosdkVideoEnabled, b.vosdkVideoEnabled);
  swap(a.vosdkVideoStreamSelected, b.vosdkVideoStreamSelected);
  swap(a.vosdkVideoStreamChangeRequest, b.vosdkVideoStreamChangeRequest);
  swap(a.vosdkFirstDataPacketSent, b.vosdkFirstDataPacketSent);
  swap(a.vosdkFirstDataPacketReceived, b.vosdkFirstDataPacketReceived);
  swap(a.vosdkError, b.vosdkError);
  swap(a.vosdkPeerOnlineStatus, b.vosdkPeerOnlineStatus);
  swap(a.vosdkPeerOfflineStatus, b.vosdkPeerOfflineStatus);
  swap(a.vosdkAudioMutePeerStatus, b.vosdkAudioMutePeerStatus);
  swap(a.vosdkVideoMutePeerStatus, b.vosdkVideoMutePeerStatus);
  swap(a.vosdkAudioMuteAllStatus, b.vosdkAudioMuteAllStatus);
  swap(a.vosdkVideoMuteAllStatus, b.vosdkVideoMuteAllStatus);
  swap(a.vosdkDefaultPeerStatus, b.vosdkDefaultPeerStatus);
  swap(a.vosdkP2PStunLoginSuccess, b.vosdkP2PStunLoginSuccess);
  swap(a.vosdkP2PStunLoginFailed, b.vosdkP2PStunLoginFailed);
  swap(a.vosdkP2PPeerTryTouch, b.vosdkP2PPeerTryTouch);
  swap(a.vosdkP2PPeerConnected, b.vosdkP2PPeerConnected);
  swap(a.vosdkP2PPeerDisconnected, b.vosdkP2PPeerDisconnected);
  swap(a.vosdkP2PStart, b.vosdkP2PStart);
  swap(a.vosdkP2PStop, b.vosdkP2PStop);
  swap(a.vosdkAPEvent, b.vosdkAPEvent);
  swap(a.vosdkReportStats, b.vosdkReportStats);
  swap(a.vosdkRecordingJoin, b.vosdkRecordingJoin);
  swap(a.vosdkRecordingLeave, b.vosdkRecordingLeave);
  swap(a.vosdkPrivilegeWillExpire, b.vosdkPrivilegeWillExpire);
  swap(a.vosdkRenewToken, b.vosdkRenewToken);
  swap(a.vosdkRenewTokenRes, b.vosdkRenewTokenRes);
  swap(a.vosdkSignalingMsgStat, b.vosdkSignalingMsgStat);
  swap(a.vosdkLocalFallbackStatus, b.vosdkLocalFallbackStatus);
  swap(a.vosdkRemoteFallbackStatus, b.vosdkRemoteFallbackStatus);
  swap(a.vosdkVideoBandwidthAggressiveLevel, b.vosdkVideoBandwidthAggressiveLevel);
  swap(a.vosdkAppSetMinPlayoutDelay, b.vosdkAppSetMinPlayoutDelay);
  swap(a.vosdkAppSetStartVideoBitRate, b.vosdkAppSetStartVideoBitRate);
  swap(a.vosdkSendVideoPaced, b.vosdkSendVideoPaced);
  swap(a.vosdkApiExec, b.vosdkApiExec);
  swap(a.vosdkABTest, b.vosdkABTest);
  swap(a.vosdkAPWorkerEvent, b.vosdkAPWorkerEvent);
  swap(a.vosdkVideoInitialOptions, b.vosdkVideoInitialOptions);
  swap(a.vosdkWorkerEvent, b.vosdkWorkerEvent);
  swap(a.vosdkVqcStat, b.vosdkVqcStat);
  swap(a.vosB2s, b.vosB2s);
  swap(a.wrtcBrowser2Gateway, b.wrtcBrowser2Gateway);
  swap(a.wrtcProfile, b.wrtcProfile);
  swap(a.wrtcPubStream, b.wrtcPubStream);
  swap(a.wrtcUnpubStream, b.wrtcUnpubStream);
  swap(a.wrtcSubStream, b.wrtcSubStream);
  swap(a.wrtcUnsubStream, b.wrtcUnsubStream);
  swap(a.whiteBoardJoinCenter, b.whiteBoardJoinCenter);
  swap(a.whiteBoardJoinEdge, b.whiteBoardJoinEdge);
  swap(a.whiteBoardJoinWebSocket, b.whiteBoardJoinWebSocket);
  swap(a.whiteBoardUploadFile, b.whiteBoardUploadFile);
  swap(a.whiteBoardQuitWebSocket, b.whiteBoardQuitWebSocket);
  swap(a.bcPushEvent, b.bcPushEvent);
  swap(a.bcPeriodicUsage, b.bcPeriodicUsage);
  swap(a.vosClientPeriodicState, b.vosClientPeriodicState);
  swap(a.trackSpan, b.trackSpan);
  swap(a.__isset, b.__isset);
}

ReportItem::ReportItem(const ReportItem& other310) {
  uri = other310.uri;
  encryptedItem = other310.encryptedItem;
  vosdkCounter = other310.vosdkCounter;
  vosdkSession = other310.vosdkSession;
  vosdkVocs = other310.vosdkVocs;
  vosdkVos = other310.vosdkVos;
  vosdkChan = other310.vosdkChan;
  vosdkQuit = other310.vosdkQuit;
  vosdkPeer = other310.vosdkPeer;
  vosdkViLocalFrame = other310.vosdkViLocalFrame;
  vosdkViRemoteFrame = other310.vosdkViRemoteFrame;
  vosdkRating = other310.vosdkRating;
  vosdkACodec = other310.vosdkACodec;
  vosdkNetOb = other310.vosdkNetOb;
  vosdkStartStun = other310.vosdkStartStun;
  vosdkSendDataBeginning = other310.vosdkSendDataBeginning;
  vosdkJoinIce = other310.vosdkJoinIce;
  vosdkSuccStun = other310.vosdkSuccStun;
  vosdkP2POpen = other310.vosdkP2POpen;
  vosdkErrorCode = other310.vosdkErrorCode;
  vosdkP2PSwitch = other310.vosdkP2PSwitch;
  vosdkP2PStunStat = other310.vosdkP2PStunStat;
  vosdkNetworkInformation = other310.vosdkNetworkInformation;
  vosdkNetOb2 = other310.vosdkNetOb2;
  vosdkNetOb3 = other310.vosdkNetOb3;
  vosdkNetOb4 = other310.vosdkNetOb4;
  vosdkViRemoteFrameDecoded = other310.vosdkViRemoteFrameDecoded;
  vosdkSwitchVideoStream = other310.vosdkSwitchVideoStream;
  vosdkDeviceStatChange = other310.vosdkDeviceStatChange;
  vosdkLbes = other310.vosdkLbes;
  vosdkCameraInfos = other310.vosdkCameraInfos;
  vosdkMaxVideoPayloadSet = other310.vosdkMaxVideoPayloadSet;
  vosdkFirstAudioPacketSent = other310.vosdkFirstAudioPacketSent;
  vosdkFirstAudioPacketReceived = other310.vosdkFirstAudioPacketReceived;
  vosdkAudioSendingStopped = other310.vosdkAudioSendingStopped;
  vosdkAudioDisabled = other310.vosdkAudioDisabled;
  vosdkAudioEnabled = other310.vosdkAudioEnabled;
  vosdkFirstVideoPacketSent = other310.vosdkFirstVideoPacketSent;
  vosdkFirstVideoPacketReceived = other310.vosdkFirstVideoPacketReceived;
  vosdkFirstVideoFrameDecoded = other310.vosdkFirstVideoFrameDecoded;
  vosdkFirstVideoFrameDrawed = other310.vosdkFirstVideoFrameDrawed;
  vosdkVideoSendingStopped = other310.vosdkVideoSendingStopped;
  vosdkVideoDisabled = other310.vosdkVideoDisabled;
  vosdkVideoEnabled = other310.vosdkVideoEnabled;
  vosdkVideoStreamSelected = other310.vosdkVideoStreamSelected;
  vosdkVideoStreamChangeRequest = other310.vosdkVideoStreamChangeRequest;
  vosdkFirstDataPacketSent = other310.vosdkFirstDataPacketSent;
  vosdkFirstDataPacketReceived = other310.vosdkFirstDataPacketReceived;
  vosdkError = other310.vosdkError;
  vosdkPeerOnlineStatus = other310.vosdkPeerOnlineStatus;
  vosdkPeerOfflineStatus = other310.vosdkPeerOfflineStatus;
  vosdkAudioMutePeerStatus = other310.vosdkAudioMutePeerStatus;
  vosdkVideoMutePeerStatus = other310.vosdkVideoMutePeerStatus;
  vosdkAudioMuteAllStatus = other310.vosdkAudioMuteAllStatus;
  vosdkVideoMuteAllStatus = other310.vosdkVideoMuteAllStatus;
  vosdkDefaultPeerStatus = other310.vosdkDefaultPeerStatus;
  vosdkP2PStunLoginSuccess = other310.vosdkP2PStunLoginSuccess;
  vosdkP2PStunLoginFailed = other310.vosdkP2PStunLoginFailed;
  vosdkP2PPeerTryTouch = other310.vosdkP2PPeerTryTouch;
  vosdkP2PPeerConnected = other310.vosdkP2PPeerConnected;
  vosdkP2PPeerDisconnected = other310.vosdkP2PPeerDisconnected;
  vosdkP2PStart = other310.vosdkP2PStart;
  vosdkP2PStop = other310.vosdkP2PStop;
  vosdkAPEvent = other310.vosdkAPEvent;
  vosdkReportStats = other310.vosdkReportStats;
  vosdkRecordingJoin = other310.vosdkRecordingJoin;
  vosdkRecordingLeave = other310.vosdkRecordingLeave;
  vosdkPrivilegeWillExpire = other310.vosdkPrivilegeWillExpire;
  vosdkRenewToken = other310.vosdkRenewToken;
  vosdkRenewTokenRes = other310.vosdkRenewTokenRes;
  vosdkSignalingMsgStat = other310.vosdkSignalingMsgStat;
  vosdkLocalFallbackStatus = other310.vosdkLocalFallbackStatus;
  vosdkRemoteFallbackStatus = other310.vosdkRemoteFallbackStatus;
  vosdkVideoBandwidthAggressiveLevel = other310.vosdkVideoBandwidthAggressiveLevel;
  vosdkAppSetMinPlayoutDelay = other310.vosdkAppSetMinPlayoutDelay;
  vosdkAppSetStartVideoBitRate = other310.vosdkAppSetStartVideoBitRate;
  vosdkSendVideoPaced = other310.vosdkSendVideoPaced;
  vosdkApiExec = other310.vosdkApiExec;
  vosdkABTest = other310.vosdkABTest;
  vosdkAPWorkerEvent = other310.vosdkAPWorkerEvent;
  vosdkVideoInitialOptions = other310.vosdkVideoInitialOptions;
  vosdkWorkerEvent = other310.vosdkWorkerEvent;
  vosdkVqcStat = other310.vosdkVqcStat;
  vosB2s = other310.vosB2s;
  wrtcBrowser2Gateway = other310.wrtcBrowser2Gateway;
  wrtcProfile = other310.wrtcProfile;
  wrtcPubStream = other310.wrtcPubStream;
  wrtcUnpubStream = other310.wrtcUnpubStream;
  wrtcSubStream = other310.wrtcSubStream;
  wrtcUnsubStream = other310.wrtcUnsubStream;
  whiteBoardJoinCenter = other310.whiteBoardJoinCenter;
  whiteBoardJoinEdge = other310.whiteBoardJoinEdge;
  whiteBoardJoinWebSocket = other310.whiteBoardJoinWebSocket;
  whiteBoardUploadFile = other310.whiteBoardUploadFile;
  whiteBoardQuitWebSocket = other310.whiteBoardQuitWebSocket;
  bcPushEvent = other310.bcPushEvent;
  bcPeriodicUsage = other310.bcPeriodicUsage;
  vosClientPeriodicState = other310.vosClientPeriodicState;
  trackSpan = other310.trackSpan;
  __isset = other310.__isset;
}
ReportItem& ReportItem::operator=(const ReportItem& other311) {
  uri = other311.uri;
  encryptedItem = other311.encryptedItem;
  vosdkCounter = other311.vosdkCounter;
  vosdkSession = other311.vosdkSession;
  vosdkVocs = other311.vosdkVocs;
  vosdkVos = other311.vosdkVos;
  vosdkChan = other311.vosdkChan;
  vosdkQuit = other311.vosdkQuit;
  vosdkPeer = other311.vosdkPeer;
  vosdkViLocalFrame = other311.vosdkViLocalFrame;
  vosdkViRemoteFrame = other311.vosdkViRemoteFrame;
  vosdkRating = other311.vosdkRating;
  vosdkACodec = other311.vosdkACodec;
  vosdkNetOb = other311.vosdkNetOb;
  vosdkStartStun = other311.vosdkStartStun;
  vosdkSendDataBeginning = other311.vosdkSendDataBeginning;
  vosdkJoinIce = other311.vosdkJoinIce;
  vosdkSuccStun = other311.vosdkSuccStun;
  vosdkP2POpen = other311.vosdkP2POpen;
  vosdkErrorCode = other311.vosdkErrorCode;
  vosdkP2PSwitch = other311.vosdkP2PSwitch;
  vosdkP2PStunStat = other311.vosdkP2PStunStat;
  vosdkNetworkInformation = other311.vosdkNetworkInformation;
  vosdkNetOb2 = other311.vosdkNetOb2;
  vosdkNetOb3 = other311.vosdkNetOb3;
  vosdkNetOb4 = other311.vosdkNetOb4;
  vosdkViRemoteFrameDecoded = other311.vosdkViRemoteFrameDecoded;
  vosdkSwitchVideoStream = other311.vosdkSwitchVideoStream;
  vosdkDeviceStatChange = other311.vosdkDeviceStatChange;
  vosdkLbes = other311.vosdkLbes;
  vosdkCameraInfos = other311.vosdkCameraInfos;
  vosdkMaxVideoPayloadSet = other311.vosdkMaxVideoPayloadSet;
  vosdkFirstAudioPacketSent = other311.vosdkFirstAudioPacketSent;
  vosdkFirstAudioPacketReceived = other311.vosdkFirstAudioPacketReceived;
  vosdkAudioSendingStopped = other311.vosdkAudioSendingStopped;
  vosdkAudioDisabled = other311.vosdkAudioDisabled;
  vosdkAudioEnabled = other311.vosdkAudioEnabled;
  vosdkFirstVideoPacketSent = other311.vosdkFirstVideoPacketSent;
  vosdkFirstVideoPacketReceived = other311.vosdkFirstVideoPacketReceived;
  vosdkFirstVideoFrameDecoded = other311.vosdkFirstVideoFrameDecoded;
  vosdkFirstVideoFrameDrawed = other311.vosdkFirstVideoFrameDrawed;
  vosdkVideoSendingStopped = other311.vosdkVideoSendingStopped;
  vosdkVideoDisabled = other311.vosdkVideoDisabled;
  vosdkVideoEnabled = other311.vosdkVideoEnabled;
  vosdkVideoStreamSelected = other311.vosdkVideoStreamSelected;
  vosdkVideoStreamChangeRequest = other311.vosdkVideoStreamChangeRequest;
  vosdkFirstDataPacketSent = other311.vosdkFirstDataPacketSent;
  vosdkFirstDataPacketReceived = other311.vosdkFirstDataPacketReceived;
  vosdkError = other311.vosdkError;
  vosdkPeerOnlineStatus = other311.vosdkPeerOnlineStatus;
  vosdkPeerOfflineStatus = other311.vosdkPeerOfflineStatus;
  vosdkAudioMutePeerStatus = other311.vosdkAudioMutePeerStatus;
  vosdkVideoMutePeerStatus = other311.vosdkVideoMutePeerStatus;
  vosdkAudioMuteAllStatus = other311.vosdkAudioMuteAllStatus;
  vosdkVideoMuteAllStatus = other311.vosdkVideoMuteAllStatus;
  vosdkDefaultPeerStatus = other311.vosdkDefaultPeerStatus;
  vosdkP2PStunLoginSuccess = other311.vosdkP2PStunLoginSuccess;
  vosdkP2PStunLoginFailed = other311.vosdkP2PStunLoginFailed;
  vosdkP2PPeerTryTouch = other311.vosdkP2PPeerTryTouch;
  vosdkP2PPeerConnected = other311.vosdkP2PPeerConnected;
  vosdkP2PPeerDisconnected = other311.vosdkP2PPeerDisconnected;
  vosdkP2PStart = other311.vosdkP2PStart;
  vosdkP2PStop = other311.vosdkP2PStop;
  vosdkAPEvent = other311.vosdkAPEvent;
  vosdkReportStats = other311.vosdkReportStats;
  vosdkRecordingJoin = other311.vosdkRecordingJoin;
  vosdkRecordingLeave = other311.vosdkRecordingLeave;
  vosdkPrivilegeWillExpire = other311.vosdkPrivilegeWillExpire;
  vosdkRenewToken = other311.vosdkRenewToken;
  vosdkRenewTokenRes = other311.vosdkRenewTokenRes;
  vosdkSignalingMsgStat = other311.vosdkSignalingMsgStat;
  vosdkLocalFallbackStatus = other311.vosdkLocalFallbackStatus;
  vosdkRemoteFallbackStatus = other311.vosdkRemoteFallbackStatus;
  vosdkVideoBandwidthAggressiveLevel = other311.vosdkVideoBandwidthAggressiveLevel;
  vosdkAppSetMinPlayoutDelay = other311.vosdkAppSetMinPlayoutDelay;
  vosdkAppSetStartVideoBitRate = other311.vosdkAppSetStartVideoBitRate;
  vosdkSendVideoPaced = other311.vosdkSendVideoPaced;
  vosdkApiExec = other311.vosdkApiExec;
  vosdkABTest = other311.vosdkABTest;
  vosdkAPWorkerEvent = other311.vosdkAPWorkerEvent;
  vosdkVideoInitialOptions = other311.vosdkVideoInitialOptions;
  vosdkWorkerEvent = other311.vosdkWorkerEvent;
  vosdkVqcStat = other311.vosdkVqcStat;
  vosB2s = other311.vosB2s;
  wrtcBrowser2Gateway = other311.wrtcBrowser2Gateway;
  wrtcProfile = other311.wrtcProfile;
  wrtcPubStream = other311.wrtcPubStream;
  wrtcUnpubStream = other311.wrtcUnpubStream;
  wrtcSubStream = other311.wrtcSubStream;
  wrtcUnsubStream = other311.wrtcUnsubStream;
  whiteBoardJoinCenter = other311.whiteBoardJoinCenter;
  whiteBoardJoinEdge = other311.whiteBoardJoinEdge;
  whiteBoardJoinWebSocket = other311.whiteBoardJoinWebSocket;
  whiteBoardUploadFile = other311.whiteBoardUploadFile;
  whiteBoardQuitWebSocket = other311.whiteBoardQuitWebSocket;
  bcPushEvent = other311.bcPushEvent;
  bcPeriodicUsage = other311.bcPeriodicUsage;
  vosClientPeriodicState = other311.vosClientPeriodicState;
  trackSpan = other311.trackSpan;
  __isset = other311.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReportItem& obj) {
  using apache::thrift::to_string;
  out << "ReportItem(";
  out << "uri=" << to_string(obj.uri);
  out << ", " << "encryptedItem="; (obj.__isset.encryptedItem ? (out << to_string(obj.encryptedItem)) : (out << "<null>"));
  out << ", " << "vosdkCounter="; (obj.__isset.vosdkCounter ? (out << to_string(obj.vosdkCounter)) : (out << "<null>"));
  out << ", " << "vosdkSession="; (obj.__isset.vosdkSession ? (out << to_string(obj.vosdkSession)) : (out << "<null>"));
  out << ", " << "vosdkVocs="; (obj.__isset.vosdkVocs ? (out << to_string(obj.vosdkVocs)) : (out << "<null>"));
  out << ", " << "vosdkVos="; (obj.__isset.vosdkVos ? (out << to_string(obj.vosdkVos)) : (out << "<null>"));
  out << ", " << "vosdkChan="; (obj.__isset.vosdkChan ? (out << to_string(obj.vosdkChan)) : (out << "<null>"));
  out << ", " << "vosdkQuit="; (obj.__isset.vosdkQuit ? (out << to_string(obj.vosdkQuit)) : (out << "<null>"));
  out << ", " << "vosdkPeer="; (obj.__isset.vosdkPeer ? (out << to_string(obj.vosdkPeer)) : (out << "<null>"));
  out << ", " << "vosdkViLocalFrame="; (obj.__isset.vosdkViLocalFrame ? (out << to_string(obj.vosdkViLocalFrame)) : (out << "<null>"));
  out << ", " << "vosdkViRemoteFrame="; (obj.__isset.vosdkViRemoteFrame ? (out << to_string(obj.vosdkViRemoteFrame)) : (out << "<null>"));
  out << ", " << "vosdkRating="; (obj.__isset.vosdkRating ? (out << to_string(obj.vosdkRating)) : (out << "<null>"));
  out << ", " << "vosdkACodec="; (obj.__isset.vosdkACodec ? (out << to_string(obj.vosdkACodec)) : (out << "<null>"));
  out << ", " << "vosdkNetOb="; (obj.__isset.vosdkNetOb ? (out << to_string(obj.vosdkNetOb)) : (out << "<null>"));
  out << ", " << "vosdkStartStun="; (obj.__isset.vosdkStartStun ? (out << to_string(obj.vosdkStartStun)) : (out << "<null>"));
  out << ", " << "vosdkSendDataBeginning="; (obj.__isset.vosdkSendDataBeginning ? (out << to_string(obj.vosdkSendDataBeginning)) : (out << "<null>"));
  out << ", " << "vosdkJoinIce="; (obj.__isset.vosdkJoinIce ? (out << to_string(obj.vosdkJoinIce)) : (out << "<null>"));
  out << ", " << "vosdkSuccStun="; (obj.__isset.vosdkSuccStun ? (out << to_string(obj.vosdkSuccStun)) : (out << "<null>"));
  out << ", " << "vosdkP2POpen="; (obj.__isset.vosdkP2POpen ? (out << to_string(obj.vosdkP2POpen)) : (out << "<null>"));
  out << ", " << "vosdkErrorCode="; (obj.__isset.vosdkErrorCode ? (out << to_string(obj.vosdkErrorCode)) : (out << "<null>"));
  out << ", " << "vosdkP2PSwitch="; (obj.__isset.vosdkP2PSwitch ? (out << to_string(obj.vosdkP2PSwitch)) : (out << "<null>"));
  out << ", " << "vosdkP2PStunStat="; (obj.__isset.vosdkP2PStunStat ? (out << to_string(obj.vosdkP2PStunStat)) : (out << "<null>"));
  out << ", " << "vosdkNetworkInformation="; (obj.__isset.vosdkNetworkInformation ? (out << to_string(obj.vosdkNetworkInformation)) : (out << "<null>"));
  out << ", " << "vosdkNetOb2="; (obj.__isset.vosdkNetOb2 ? (out << to_string(obj.vosdkNetOb2)) : (out << "<null>"));
  out << ", " << "vosdkNetOb3="; (obj.__isset.vosdkNetOb3 ? (out << to_string(obj.vosdkNetOb3)) : (out << "<null>"));
  out << ", " << "vosdkNetOb4="; (obj.__isset.vosdkNetOb4 ? (out << to_string(obj.vosdkNetOb4)) : (out << "<null>"));
  out << ", " << "vosdkViRemoteFrameDecoded="; (obj.__isset.vosdkViRemoteFrameDecoded ? (out << to_string(obj.vosdkViRemoteFrameDecoded)) : (out << "<null>"));
  out << ", " << "vosdkSwitchVideoStream="; (obj.__isset.vosdkSwitchVideoStream ? (out << to_string(obj.vosdkSwitchVideoStream)) : (out << "<null>"));
  out << ", " << "vosdkDeviceStatChange="; (obj.__isset.vosdkDeviceStatChange ? (out << to_string(obj.vosdkDeviceStatChange)) : (out << "<null>"));
  out << ", " << "vosdkLbes="; (obj.__isset.vosdkLbes ? (out << to_string(obj.vosdkLbes)) : (out << "<null>"));
  out << ", " << "vosdkCameraInfos="; (obj.__isset.vosdkCameraInfos ? (out << to_string(obj.vosdkCameraInfos)) : (out << "<null>"));
  out << ", " << "vosdkMaxVideoPayloadSet="; (obj.__isset.vosdkMaxVideoPayloadSet ? (out << to_string(obj.vosdkMaxVideoPayloadSet)) : (out << "<null>"));
  out << ", " << "vosdkFirstAudioPacketSent="; (obj.__isset.vosdkFirstAudioPacketSent ? (out << to_string(obj.vosdkFirstAudioPacketSent)) : (out << "<null>"));
  out << ", " << "vosdkFirstAudioPacketReceived="; (obj.__isset.vosdkFirstAudioPacketReceived ? (out << to_string(obj.vosdkFirstAudioPacketReceived)) : (out << "<null>"));
  out << ", " << "vosdkAudioSendingStopped="; (obj.__isset.vosdkAudioSendingStopped ? (out << to_string(obj.vosdkAudioSendingStopped)) : (out << "<null>"));
  out << ", " << "vosdkAudioDisabled="; (obj.__isset.vosdkAudioDisabled ? (out << to_string(obj.vosdkAudioDisabled)) : (out << "<null>"));
  out << ", " << "vosdkAudioEnabled="; (obj.__isset.vosdkAudioEnabled ? (out << to_string(obj.vosdkAudioEnabled)) : (out << "<null>"));
  out << ", " << "vosdkFirstVideoPacketSent="; (obj.__isset.vosdkFirstVideoPacketSent ? (out << to_string(obj.vosdkFirstVideoPacketSent)) : (out << "<null>"));
  out << ", " << "vosdkFirstVideoPacketReceived="; (obj.__isset.vosdkFirstVideoPacketReceived ? (out << to_string(obj.vosdkFirstVideoPacketReceived)) : (out << "<null>"));
  out << ", " << "vosdkFirstVideoFrameDecoded="; (obj.__isset.vosdkFirstVideoFrameDecoded ? (out << to_string(obj.vosdkFirstVideoFrameDecoded)) : (out << "<null>"));
  out << ", " << "vosdkFirstVideoFrameDrawed="; (obj.__isset.vosdkFirstVideoFrameDrawed ? (out << to_string(obj.vosdkFirstVideoFrameDrawed)) : (out << "<null>"));
  out << ", " << "vosdkVideoSendingStopped="; (obj.__isset.vosdkVideoSendingStopped ? (out << to_string(obj.vosdkVideoSendingStopped)) : (out << "<null>"));
  out << ", " << "vosdkVideoDisabled="; (obj.__isset.vosdkVideoDisabled ? (out << to_string(obj.vosdkVideoDisabled)) : (out << "<null>"));
  out << ", " << "vosdkVideoEnabled="; (obj.__isset.vosdkVideoEnabled ? (out << to_string(obj.vosdkVideoEnabled)) : (out << "<null>"));
  out << ", " << "vosdkVideoStreamSelected="; (obj.__isset.vosdkVideoStreamSelected ? (out << to_string(obj.vosdkVideoStreamSelected)) : (out << "<null>"));
  out << ", " << "vosdkVideoStreamChangeRequest="; (obj.__isset.vosdkVideoStreamChangeRequest ? (out << to_string(obj.vosdkVideoStreamChangeRequest)) : (out << "<null>"));
  out << ", " << "vosdkFirstDataPacketSent="; (obj.__isset.vosdkFirstDataPacketSent ? (out << to_string(obj.vosdkFirstDataPacketSent)) : (out << "<null>"));
  out << ", " << "vosdkFirstDataPacketReceived="; (obj.__isset.vosdkFirstDataPacketReceived ? (out << to_string(obj.vosdkFirstDataPacketReceived)) : (out << "<null>"));
  out << ", " << "vosdkError="; (obj.__isset.vosdkError ? (out << to_string(obj.vosdkError)) : (out << "<null>"));
  out << ", " << "vosdkPeerOnlineStatus="; (obj.__isset.vosdkPeerOnlineStatus ? (out << to_string(obj.vosdkPeerOnlineStatus)) : (out << "<null>"));
  out << ", " << "vosdkPeerOfflineStatus="; (obj.__isset.vosdkPeerOfflineStatus ? (out << to_string(obj.vosdkPeerOfflineStatus)) : (out << "<null>"));
  out << ", " << "vosdkAudioMutePeerStatus="; (obj.__isset.vosdkAudioMutePeerStatus ? (out << to_string(obj.vosdkAudioMutePeerStatus)) : (out << "<null>"));
  out << ", " << "vosdkVideoMutePeerStatus="; (obj.__isset.vosdkVideoMutePeerStatus ? (out << to_string(obj.vosdkVideoMutePeerStatus)) : (out << "<null>"));
  out << ", " << "vosdkAudioMuteAllStatus="; (obj.__isset.vosdkAudioMuteAllStatus ? (out << to_string(obj.vosdkAudioMuteAllStatus)) : (out << "<null>"));
  out << ", " << "vosdkVideoMuteAllStatus="; (obj.__isset.vosdkVideoMuteAllStatus ? (out << to_string(obj.vosdkVideoMuteAllStatus)) : (out << "<null>"));
  out << ", " << "vosdkDefaultPeerStatus="; (obj.__isset.vosdkDefaultPeerStatus ? (out << to_string(obj.vosdkDefaultPeerStatus)) : (out << "<null>"));
  out << ", " << "vosdkP2PStunLoginSuccess="; (obj.__isset.vosdkP2PStunLoginSuccess ? (out << to_string(obj.vosdkP2PStunLoginSuccess)) : (out << "<null>"));
  out << ", " << "vosdkP2PStunLoginFailed="; (obj.__isset.vosdkP2PStunLoginFailed ? (out << to_string(obj.vosdkP2PStunLoginFailed)) : (out << "<null>"));
  out << ", " << "vosdkP2PPeerTryTouch="; (obj.__isset.vosdkP2PPeerTryTouch ? (out << to_string(obj.vosdkP2PPeerTryTouch)) : (out << "<null>"));
  out << ", " << "vosdkP2PPeerConnected="; (obj.__isset.vosdkP2PPeerConnected ? (out << to_string(obj.vosdkP2PPeerConnected)) : (out << "<null>"));
  out << ", " << "vosdkP2PPeerDisconnected="; (obj.__isset.vosdkP2PPeerDisconnected ? (out << to_string(obj.vosdkP2PPeerDisconnected)) : (out << "<null>"));
  out << ", " << "vosdkP2PStart="; (obj.__isset.vosdkP2PStart ? (out << to_string(obj.vosdkP2PStart)) : (out << "<null>"));
  out << ", " << "vosdkP2PStop="; (obj.__isset.vosdkP2PStop ? (out << to_string(obj.vosdkP2PStop)) : (out << "<null>"));
  out << ", " << "vosdkAPEvent="; (obj.__isset.vosdkAPEvent ? (out << to_string(obj.vosdkAPEvent)) : (out << "<null>"));
  out << ", " << "vosdkReportStats="; (obj.__isset.vosdkReportStats ? (out << to_string(obj.vosdkReportStats)) : (out << "<null>"));
  out << ", " << "vosdkRecordingJoin="; (obj.__isset.vosdkRecordingJoin ? (out << to_string(obj.vosdkRecordingJoin)) : (out << "<null>"));
  out << ", " << "vosdkRecordingLeave="; (obj.__isset.vosdkRecordingLeave ? (out << to_string(obj.vosdkRecordingLeave)) : (out << "<null>"));
  out << ", " << "vosdkPrivilegeWillExpire="; (obj.__isset.vosdkPrivilegeWillExpire ? (out << to_string(obj.vosdkPrivilegeWillExpire)) : (out << "<null>"));
  out << ", " << "vosdkRenewToken="; (obj.__isset.vosdkRenewToken ? (out << to_string(obj.vosdkRenewToken)) : (out << "<null>"));
  out << ", " << "vosdkRenewTokenRes="; (obj.__isset.vosdkRenewTokenRes ? (out << to_string(obj.vosdkRenewTokenRes)) : (out << "<null>"));
  out << ", " << "vosdkSignalingMsgStat="; (obj.__isset.vosdkSignalingMsgStat ? (out << to_string(obj.vosdkSignalingMsgStat)) : (out << "<null>"));
  out << ", " << "vosdkLocalFallbackStatus="; (obj.__isset.vosdkLocalFallbackStatus ? (out << to_string(obj.vosdkLocalFallbackStatus)) : (out << "<null>"));
  out << ", " << "vosdkRemoteFallbackStatus="; (obj.__isset.vosdkRemoteFallbackStatus ? (out << to_string(obj.vosdkRemoteFallbackStatus)) : (out << "<null>"));
  out << ", " << "vosdkVideoBandwidthAggressiveLevel="; (obj.__isset.vosdkVideoBandwidthAggressiveLevel ? (out << to_string(obj.vosdkVideoBandwidthAggressiveLevel)) : (out << "<null>"));
  out << ", " << "vosdkAppSetMinPlayoutDelay="; (obj.__isset.vosdkAppSetMinPlayoutDelay ? (out << to_string(obj.vosdkAppSetMinPlayoutDelay)) : (out << "<null>"));
  out << ", " << "vosdkAppSetStartVideoBitRate="; (obj.__isset.vosdkAppSetStartVideoBitRate ? (out << to_string(obj.vosdkAppSetStartVideoBitRate)) : (out << "<null>"));
  out << ", " << "vosdkSendVideoPaced="; (obj.__isset.vosdkSendVideoPaced ? (out << to_string(obj.vosdkSendVideoPaced)) : (out << "<null>"));
  out << ", " << "vosdkApiExec="; (obj.__isset.vosdkApiExec ? (out << to_string(obj.vosdkApiExec)) : (out << "<null>"));
  out << ", " << "vosdkABTest="; (obj.__isset.vosdkABTest ? (out << to_string(obj.vosdkABTest)) : (out << "<null>"));
  out << ", " << "vosdkAPWorkerEvent="; (obj.__isset.vosdkAPWorkerEvent ? (out << to_string(obj.vosdkAPWorkerEvent)) : (out << "<null>"));
  out << ", " << "vosdkVideoInitialOptions="; (obj.__isset.vosdkVideoInitialOptions ? (out << to_string(obj.vosdkVideoInitialOptions)) : (out << "<null>"));
  out << ", " << "vosdkWorkerEvent="; (obj.__isset.vosdkWorkerEvent ? (out << to_string(obj.vosdkWorkerEvent)) : (out << "<null>"));
  out << ", " << "vosdkVqcStat="; (obj.__isset.vosdkVqcStat ? (out << to_string(obj.vosdkVqcStat)) : (out << "<null>"));
  out << ", " << "vosB2s="; (obj.__isset.vosB2s ? (out << to_string(obj.vosB2s)) : (out << "<null>"));
  out << ", " << "wrtcBrowser2Gateway="; (obj.__isset.wrtcBrowser2Gateway ? (out << to_string(obj.wrtcBrowser2Gateway)) : (out << "<null>"));
  out << ", " << "wrtcProfile="; (obj.__isset.wrtcProfile ? (out << to_string(obj.wrtcProfile)) : (out << "<null>"));
  out << ", " << "wrtcPubStream="; (obj.__isset.wrtcPubStream ? (out << to_string(obj.wrtcPubStream)) : (out << "<null>"));
  out << ", " << "wrtcUnpubStream="; (obj.__isset.wrtcUnpubStream ? (out << to_string(obj.wrtcUnpubStream)) : (out << "<null>"));
  out << ", " << "wrtcSubStream="; (obj.__isset.wrtcSubStream ? (out << to_string(obj.wrtcSubStream)) : (out << "<null>"));
  out << ", " << "wrtcUnsubStream="; (obj.__isset.wrtcUnsubStream ? (out << to_string(obj.wrtcUnsubStream)) : (out << "<null>"));
  out << ", " << "whiteBoardJoinCenter="; (obj.__isset.whiteBoardJoinCenter ? (out << to_string(obj.whiteBoardJoinCenter)) : (out << "<null>"));
  out << ", " << "whiteBoardJoinEdge="; (obj.__isset.whiteBoardJoinEdge ? (out << to_string(obj.whiteBoardJoinEdge)) : (out << "<null>"));
  out << ", " << "whiteBoardJoinWebSocket="; (obj.__isset.whiteBoardJoinWebSocket ? (out << to_string(obj.whiteBoardJoinWebSocket)) : (out << "<null>"));
  out << ", " << "whiteBoardUploadFile="; (obj.__isset.whiteBoardUploadFile ? (out << to_string(obj.whiteBoardUploadFile)) : (out << "<null>"));
  out << ", " << "whiteBoardQuitWebSocket="; (obj.__isset.whiteBoardQuitWebSocket ? (out << to_string(obj.whiteBoardQuitWebSocket)) : (out << "<null>"));
  out << ", " << "bcPushEvent="; (obj.__isset.bcPushEvent ? (out << to_string(obj.bcPushEvent)) : (out << "<null>"));
  out << ", " << "bcPeriodicUsage="; (obj.__isset.bcPeriodicUsage ? (out << to_string(obj.bcPeriodicUsage)) : (out << "<null>"));
  out << ", " << "vosClientPeriodicState="; (obj.__isset.vosClientPeriodicState ? (out << to_string(obj.vosClientPeriodicState)) : (out << "<null>"));
  out << ", " << "trackSpan="; (obj.__isset.trackSpan ? (out << to_string(obj.trackSpan)) : (out << "<null>"));
  out << ")";
  return out;
}

}}} // namespace
