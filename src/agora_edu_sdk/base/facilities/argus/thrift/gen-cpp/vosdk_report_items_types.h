/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef vosdk_report_items_TYPES_H
#define vosdk_report_items_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace io { namespace agora { namespace argus {

class EncryptedItem;

class VosdkHeader;

class VosdkCounterItem;

class VosdkCounter;

class VosdkSession;

class VosdkVocs;

class VosdkVos;

class VosdkChan;

class VosdkQuit;

class VosdkPeer;

class VosdkViLocalFrame;

class VosdkViRemoteFrame;

class VosdkRating;

class VosdkACodec;

class VosdkNetOb;

class VosdkDeviceStatChange;

class VosdkCameraInfoItem;

class VosdkCameraInfos;

class Vosb2s;

class WrtcBrowser2Gateway;

class WrtcProfile;

class WrtcPubStream;

class WrtcUnpubStream;

class WrtcSubStream;

class WrtcUnsubStream;

class VosdkP2PStartStun;

class VosdkP2PSendDataBeginning;

class VosdkP2PJoinIce;

class VosdkP2PSuccStun;

class VosdkP2POpen;

class VosdkErrorCodeItem;

class VosdkErrorCode;

class VosdkP2PSwitch;

class VosdkP2PStunStat;

class VosdkNetworkInformation;

class VosdkNetOb2;

class VosdkNetOb3;

class VosdkNetOb4;

class VosdkViRemoteFrameDecoded;

class VosdkSwitchVideoStream;

class VosdkLbes;

class VosdkMaxVideoPayloadSet;

class VosdkFirstAudioPacketSent;

class VosdkFirstAudioPacketReceived;

class VosdkAudioSendingStopped;

class VosdkAudioDisabled;

class VosdkAudioEnabled;

class VosdkFirstVideoPacketSent;

class VosdkFirstVideoPacketReceived;

class VosdkFirstVideoFrameDecoded;

class VosdkFirstVideoFrameDrawed;

class VosdkVideoSendingStopped;

class VosdkVideoDisabled;

class VosdkVideoEnabled;

class VosdkVideoStreamSelected;

class VosdkVideoStreamChangeRequest;

class VosdkFirstDataPacketSent;

class VosdkFirstDataPacketReceived;

class VosdkError;

class VosdkPeerOnlineStatus;

class VosdkPeerOfflineStatus;

class VosdkAudioMutePeerStatus;

class VosdkVideoMutePeerStatus;

class VosdkAudioMuteAllStatus;

class VosdkVideoMuteAllStatus;

class VosdkDefaultPeerStatus;

class VosdkP2PStunLoginSuccess;

class VosdkP2PStunLoginFailed;

class VosdkP2PPeerTryTouch;

class VosdkP2PPeerConnected;

class VosdkP2PPeerDisconnected;

class VosdkP2PStart;

class VosdkP2PStop;

class VosdkAPEvent;

class VosdkReportStats;

class VosdkAPWorkerEvent;

class VosdkWorkerEvent;

class VosdkRecordingMixModeProperty;

class VosdkRecordingJoin;

class VosdkRecordingLeave;

class VosdkPrivilegeExpireInfo;

class VosdkPrivilegeWillExpire;

class VosdkRenewToken;

class VosdkRenewTokenRes;

class VosdkSignalingMsgStat;

class VosdkLocalFallbackStatus;

class VosdkRemoteFallbackStatus;

class VosdkVideoBandwidthAggressiveLevel;

class VosdkAppSetMinPlayoutDelay;

class VosdkAppSetStartVideoBitRate;

class VosdkSendVideoPaced;

class VosdkApiExec;

class VosdkABTest;

class VosdkVideoInitialOptions;

class VosdkVqcStat;

class WhiteBoardJoinCenter;

class WhiteBoardJoinEdge;

class WhiteBoardJoinWebSocket;

class WhiteBoardUploadFile;

class WhiteBoardQuitWebSocket;

class BCPushEvent;

class BCPeriodicUsage;

class TrackSpan;

class Endpoint;

class Annotation;

class BinaryAnnotation;

class VOSClientPeriodicState;

class ReportItem;

typedef struct _EncryptedItem__isset {
  _EncryptedItem__isset() : encType(false), key1(false), key2(false), key3(false), key4(false), payload(false) {}
  bool encType :1;
  bool key1 :1;
  bool key2 :1;
  bool key3 :1;
  bool key4 :1;
  bool payload :1;
} _EncryptedItem__isset;

class EncryptedItem {
 public:

  static const char* ascii_fingerprint; // = "E63460C7200B1019E702905930F39D30";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0x34,0x60,0xC7,0x20,0x0B,0x10,0x19,0xE7,0x02,0x90,0x59,0x30,0xF3,0x9D,0x30};

  EncryptedItem(const EncryptedItem&);
  EncryptedItem& operator=(const EncryptedItem&);
  EncryptedItem() : encType(0), key1(), key2(), key3(), key4(), payload() {
  }

  virtual ~EncryptedItem() throw();
  int32_t encType;
  std::string key1;
  std::string key2;
  std::string key3;
  std::string key4;
  std::string payload;

  _EncryptedItem__isset __isset;

  void __set_encType(const int32_t val);

  void __set_key1(const std::string& val);

  void __set_key2(const std::string& val);

  void __set_key3(const std::string& val);

  void __set_key4(const std::string& val);

  void __set_payload(const std::string& val);

  bool operator == (const EncryptedItem & rhs) const
  {
    if (__isset.encType != rhs.__isset.encType)
      return false;
    else if (__isset.encType && !(encType == rhs.encType))
      return false;
    if (__isset.key1 != rhs.__isset.key1)
      return false;
    else if (__isset.key1 && !(key1 == rhs.key1))
      return false;
    if (__isset.key2 != rhs.__isset.key2)
      return false;
    else if (__isset.key2 && !(key2 == rhs.key2))
      return false;
    if (__isset.key3 != rhs.__isset.key3)
      return false;
    else if (__isset.key3 && !(key3 == rhs.key3))
      return false;
    if (__isset.key4 != rhs.__isset.key4)
      return false;
    else if (__isset.key4 && !(key4 == rhs.key4))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const EncryptedItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EncryptedItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EncryptedItem& obj);
};

void swap(EncryptedItem &a, EncryptedItem &b);

typedef struct _VosdkHeader__isset {
  _VosdkHeader__isset() : sid(false), cname(false), cid(false), lts(false), ip(false), uid(false), success(false), elapse(false), peer(false) {}
  bool sid :1;
  bool cname :1;
  bool cid :1;
  bool lts :1;
  bool ip :1;
  bool uid :1;
  bool success :1;
  bool elapse :1;
  bool peer :1;
} _VosdkHeader__isset;

class VosdkHeader {
 public:

  static const char* ascii_fingerprint; // = "3C6FBB1DBFDAB67A445B617A09875A7F";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x6F,0xBB,0x1D,0xBF,0xDA,0xB6,0x7A,0x44,0x5B,0x61,0x7A,0x09,0x87,0x5A,0x7F};

  VosdkHeader(const VosdkHeader&);
  VosdkHeader& operator=(const VosdkHeader&);
  VosdkHeader() : sid(), cname(), cid(0), lts(0), ip(), uid(0), success(0), elapse(0), peer(0) {
  }

  virtual ~VosdkHeader() throw();
  std::string sid;
  std::string cname;
  int64_t cid;
  int64_t lts;
  std::string ip;
  int64_t uid;
  bool success;
  int64_t elapse;
  int64_t peer;

  _VosdkHeader__isset __isset;

  void __set_sid(const std::string& val);

  void __set_cname(const std::string& val);

  void __set_cid(const int64_t val);

  void __set_lts(const int64_t val);

  void __set_ip(const std::string& val);

  void __set_uid(const int64_t val);

  void __set_success(const bool val);

  void __set_elapse(const int64_t val);

  void __set_peer(const int64_t val);

  bool operator == (const VosdkHeader & rhs) const
  {
    if (__isset.sid != rhs.__isset.sid)
      return false;
    else if (__isset.sid && !(sid == rhs.sid))
      return false;
    if (__isset.cname != rhs.__isset.cname)
      return false;
    else if (__isset.cname && !(cname == rhs.cname))
      return false;
    if (__isset.cid != rhs.__isset.cid)
      return false;
    else if (__isset.cid && !(cid == rhs.cid))
      return false;
    if (__isset.lts != rhs.__isset.lts)
      return false;
    else if (__isset.lts && !(lts == rhs.lts))
      return false;
    if (__isset.ip != rhs.__isset.ip)
      return false;
    else if (__isset.ip && !(ip == rhs.ip))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.success != rhs.__isset.success)
      return false;
    else if (__isset.success && !(success == rhs.success))
      return false;
    if (__isset.elapse != rhs.__isset.elapse)
      return false;
    else if (__isset.elapse && !(elapse == rhs.elapse))
      return false;
    if (__isset.peer != rhs.__isset.peer)
      return false;
    else if (__isset.peer && !(peer == rhs.peer))
      return false;
    return true;
  }
  bool operator != (const VosdkHeader &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkHeader & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkHeader& obj);
};

void swap(VosdkHeader &a, VosdkHeader &b);

typedef struct _VosdkCounterItem__isset {
  _VosdkCounterItem__isset() : name(false), lts(false), value(false), id(false), tagErrorCode(false) {}
  bool name :1;
  bool lts :1;
  bool value :1;
  bool id :1;
  bool tagErrorCode :1;
} _VosdkCounterItem__isset;

class VosdkCounterItem {
 public:

  static const char* ascii_fingerprint; // = "C019BD9C5C74062EF1B7E51D59FB3E2B";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x19,0xBD,0x9C,0x5C,0x74,0x06,0x2E,0xF1,0xB7,0xE5,0x1D,0x59,0xFB,0x3E,0x2B};

  VosdkCounterItem(const VosdkCounterItem&);
  VosdkCounterItem& operator=(const VosdkCounterItem&);
  VosdkCounterItem() : name(), lts(0), value(0), id(0), tagErrorCode(0) {
  }

  virtual ~VosdkCounterItem() throw();
  std::string name;
  int64_t lts;
  int32_t value;
  int32_t id;
  int32_t tagErrorCode;

  _VosdkCounterItem__isset __isset;

  void __set_name(const std::string& val);

  void __set_lts(const int64_t val);

  void __set_value(const int32_t val);

  void __set_id(const int32_t val);

  void __set_tagErrorCode(const int32_t val);

  bool operator == (const VosdkCounterItem & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.lts != rhs.__isset.lts)
      return false;
    else if (__isset.lts && !(lts == rhs.lts))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.tagErrorCode != rhs.__isset.tagErrorCode)
      return false;
    else if (__isset.tagErrorCode && !(tagErrorCode == rhs.tagErrorCode))
      return false;
    return true;
  }
  bool operator != (const VosdkCounterItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkCounterItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkCounterItem& obj);
};

void swap(VosdkCounterItem &a, VosdkCounterItem &b);

typedef struct _VosdkCounter__isset {
  _VosdkCounter__isset() : header(false), items(false) {}
  bool header :1;
  bool items :1;
} _VosdkCounter__isset;

class VosdkCounter {
 public:

  static const char* ascii_fingerprint; // = "E5A7E3E543C757C392DAAD0A8C4AC992";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0xA7,0xE3,0xE5,0x43,0xC7,0x57,0xC3,0x92,0xDA,0xAD,0x0A,0x8C,0x4A,0xC9,0x92};

  VosdkCounter(const VosdkCounter&);
  VosdkCounter& operator=(const VosdkCounter&);
  VosdkCounter() {
  }

  virtual ~VosdkCounter() throw();
  VosdkHeader header;
  std::vector<VosdkCounterItem>  items;

  _VosdkCounter__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_items(const std::vector<VosdkCounterItem> & val);

  bool operator == (const VosdkCounter & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.items != rhs.__isset.items)
      return false;
    else if (__isset.items && !(items == rhs.items))
      return false;
    return true;
  }
  bool operator != (const VosdkCounter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkCounter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkCounter& obj);
};

void swap(VosdkCounter &a, VosdkCounter &b);

typedef struct _VosdkSession__isset {
  _VosdkSession__isset() : header(false), vk(false), ver(false), net1(false), net2(false), localIp(false), ssid(false), bssid(false), siglevel(false), rssi(false), os1(false), did(false), pnq(false), lost(false), info(false), lsid(false), channelMode(false), cheVer(false), sdkBuildNumber(false), cheBuildNumber(false), fsid(false), channelProfile(false), netSubType(false), clientType(false), appCategory(false), clientRole(false), installId(false), stringUid(false), jitter(false), verExtraInfo(false), cpuid(false), configServiceVersion(false), serviceId(false), configElapsed(false), isABTestSuccess(false) {}
  bool header :1;
  bool vk :1;
  bool ver :1;
  bool net1 :1;
  bool net2 :1;
  bool localIp :1;
  bool ssid :1;
  bool bssid :1;
  bool siglevel :1;
  bool rssi :1;
  bool os1 :1;
  bool did :1;
  bool pnq :1;
  bool lost :1;
  bool info :1;
  bool lsid :1;
  bool channelMode :1;
  bool cheVer :1;
  bool sdkBuildNumber :1;
  bool cheBuildNumber :1;
  bool fsid :1;
  bool channelProfile :1;
  bool netSubType :1;
  bool clientType :1;
  bool appCategory :1;
  bool clientRole :1;
  bool installId :1;
  bool stringUid :1;
  bool jitter :1;
  bool verExtraInfo :1;
  bool cpuid :1;
  bool configServiceVersion :1;
  bool serviceId :1;
  bool configElapsed :1;
  bool isABTestSuccess :1;
} _VosdkSession__isset;

class VosdkSession {
 public:

  static const char* ascii_fingerprint; // = "8D9C694E9FC7BC54DBA7BA8A91E493B8";
  static const uint8_t binary_fingerprint[16]; // = {0x8D,0x9C,0x69,0x4E,0x9F,0xC7,0xBC,0x54,0xDB,0xA7,0xBA,0x8A,0x91,0xE4,0x93,0xB8};

  VosdkSession(const VosdkSession&);
  VosdkSession& operator=(const VosdkSession&);
  VosdkSession() : vk(), ver(), net1(0), net2(0), localIp(), ssid(), bssid(), siglevel(0), rssi(0), os1(0), did(), pnq(0), lost(0), info(), lsid(), channelMode(0), cheVer(), sdkBuildNumber(0), cheBuildNumber(0), fsid(), channelProfile(0), netSubType(0), clientType(0), appCategory(0), clientRole(0), installId(), stringUid(), jitter(0), verExtraInfo(), cpuid(), configServiceVersion(), serviceId(), configElapsed(0), isABTestSuccess(0) {
  }

  virtual ~VosdkSession() throw();
  VosdkHeader header;
  std::string vk;
  std::string ver;
  int32_t net1;
  int32_t net2;
  std::string localIp;
  std::string ssid;
  std::string bssid;
  int32_t siglevel;
  int32_t rssi;
  int32_t os1;
  std::string did;
  int32_t pnq;
  int32_t lost;
  std::string info;
  std::string lsid;
  int32_t channelMode;
  std::string cheVer;
  int32_t sdkBuildNumber;
  int32_t cheBuildNumber;
  std::string fsid;
  int32_t channelProfile;
  int32_t netSubType;
  int32_t clientType;
  int32_t appCategory;
  int32_t clientRole;
  std::string installId;
  std::string stringUid;
  int32_t jitter;
  std::string verExtraInfo;
  std::string cpuid;
  std::string configServiceVersion;
  std::string serviceId;
  int32_t configElapsed;
  bool isABTestSuccess;

  _VosdkSession__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_vk(const std::string& val);

  void __set_ver(const std::string& val);

  void __set_net1(const int32_t val);

  void __set_net2(const int32_t val);

  void __set_localIp(const std::string& val);

  void __set_ssid(const std::string& val);

  void __set_bssid(const std::string& val);

  void __set_siglevel(const int32_t val);

  void __set_rssi(const int32_t val);

  void __set_os1(const int32_t val);

  void __set_did(const std::string& val);

  void __set_pnq(const int32_t val);

  void __set_lost(const int32_t val);

  void __set_info(const std::string& val);

  void __set_lsid(const std::string& val);

  void __set_channelMode(const int32_t val);

  void __set_cheVer(const std::string& val);

  void __set_sdkBuildNumber(const int32_t val);

  void __set_cheBuildNumber(const int32_t val);

  void __set_fsid(const std::string& val);

  void __set_channelProfile(const int32_t val);

  void __set_netSubType(const int32_t val);

  void __set_clientType(const int32_t val);

  void __set_appCategory(const int32_t val);

  void __set_clientRole(const int32_t val);

  void __set_installId(const std::string& val);

  void __set_stringUid(const std::string& val);

  void __set_jitter(const int32_t val);

  void __set_verExtraInfo(const std::string& val);

  void __set_cpuid(const std::string& val);

  void __set_configServiceVersion(const std::string& val);

  void __set_serviceId(const std::string& val);

  void __set_configElapsed(const int32_t val);

  void __set_isABTestSuccess(const bool val);

  bool operator == (const VosdkSession & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.vk != rhs.__isset.vk)
      return false;
    else if (__isset.vk && !(vk == rhs.vk))
      return false;
    if (__isset.ver != rhs.__isset.ver)
      return false;
    else if (__isset.ver && !(ver == rhs.ver))
      return false;
    if (__isset.net1 != rhs.__isset.net1)
      return false;
    else if (__isset.net1 && !(net1 == rhs.net1))
      return false;
    if (__isset.net2 != rhs.__isset.net2)
      return false;
    else if (__isset.net2 && !(net2 == rhs.net2))
      return false;
    if (__isset.localIp != rhs.__isset.localIp)
      return false;
    else if (__isset.localIp && !(localIp == rhs.localIp))
      return false;
    if (__isset.ssid != rhs.__isset.ssid)
      return false;
    else if (__isset.ssid && !(ssid == rhs.ssid))
      return false;
    if (__isset.bssid != rhs.__isset.bssid)
      return false;
    else if (__isset.bssid && !(bssid == rhs.bssid))
      return false;
    if (__isset.siglevel != rhs.__isset.siglevel)
      return false;
    else if (__isset.siglevel && !(siglevel == rhs.siglevel))
      return false;
    if (__isset.rssi != rhs.__isset.rssi)
      return false;
    else if (__isset.rssi && !(rssi == rhs.rssi))
      return false;
    if (__isset.os1 != rhs.__isset.os1)
      return false;
    else if (__isset.os1 && !(os1 == rhs.os1))
      return false;
    if (__isset.did != rhs.__isset.did)
      return false;
    else if (__isset.did && !(did == rhs.did))
      return false;
    if (__isset.pnq != rhs.__isset.pnq)
      return false;
    else if (__isset.pnq && !(pnq == rhs.pnq))
      return false;
    if (__isset.lost != rhs.__isset.lost)
      return false;
    else if (__isset.lost && !(lost == rhs.lost))
      return false;
    if (__isset.info != rhs.__isset.info)
      return false;
    else if (__isset.info && !(info == rhs.info))
      return false;
    if (__isset.lsid != rhs.__isset.lsid)
      return false;
    else if (__isset.lsid && !(lsid == rhs.lsid))
      return false;
    if (__isset.channelMode != rhs.__isset.channelMode)
      return false;
    else if (__isset.channelMode && !(channelMode == rhs.channelMode))
      return false;
    if (__isset.cheVer != rhs.__isset.cheVer)
      return false;
    else if (__isset.cheVer && !(cheVer == rhs.cheVer))
      return false;
    if (__isset.sdkBuildNumber != rhs.__isset.sdkBuildNumber)
      return false;
    else if (__isset.sdkBuildNumber && !(sdkBuildNumber == rhs.sdkBuildNumber))
      return false;
    if (__isset.cheBuildNumber != rhs.__isset.cheBuildNumber)
      return false;
    else if (__isset.cheBuildNumber && !(cheBuildNumber == rhs.cheBuildNumber))
      return false;
    if (__isset.fsid != rhs.__isset.fsid)
      return false;
    else if (__isset.fsid && !(fsid == rhs.fsid))
      return false;
    if (__isset.channelProfile != rhs.__isset.channelProfile)
      return false;
    else if (__isset.channelProfile && !(channelProfile == rhs.channelProfile))
      return false;
    if (__isset.netSubType != rhs.__isset.netSubType)
      return false;
    else if (__isset.netSubType && !(netSubType == rhs.netSubType))
      return false;
    if (__isset.clientType != rhs.__isset.clientType)
      return false;
    else if (__isset.clientType && !(clientType == rhs.clientType))
      return false;
    if (__isset.appCategory != rhs.__isset.appCategory)
      return false;
    else if (__isset.appCategory && !(appCategory == rhs.appCategory))
      return false;
    if (__isset.clientRole != rhs.__isset.clientRole)
      return false;
    else if (__isset.clientRole && !(clientRole == rhs.clientRole))
      return false;
    if (__isset.installId != rhs.__isset.installId)
      return false;
    else if (__isset.installId && !(installId == rhs.installId))
      return false;
    if (__isset.stringUid != rhs.__isset.stringUid)
      return false;
    else if (__isset.stringUid && !(stringUid == rhs.stringUid))
      return false;
    if (__isset.jitter != rhs.__isset.jitter)
      return false;
    else if (__isset.jitter && !(jitter == rhs.jitter))
      return false;
    if (__isset.verExtraInfo != rhs.__isset.verExtraInfo)
      return false;
    else if (__isset.verExtraInfo && !(verExtraInfo == rhs.verExtraInfo))
      return false;
    if (__isset.cpuid != rhs.__isset.cpuid)
      return false;
    else if (__isset.cpuid && !(cpuid == rhs.cpuid))
      return false;
    if (__isset.configServiceVersion != rhs.__isset.configServiceVersion)
      return false;
    else if (__isset.configServiceVersion && !(configServiceVersion == rhs.configServiceVersion))
      return false;
    if (__isset.serviceId != rhs.__isset.serviceId)
      return false;
    else if (__isset.serviceId && !(serviceId == rhs.serviceId))
      return false;
    if (__isset.configElapsed != rhs.__isset.configElapsed)
      return false;
    else if (__isset.configElapsed && !(configElapsed == rhs.configElapsed))
      return false;
    if (__isset.isABTestSuccess != rhs.__isset.isABTestSuccess)
      return false;
    else if (__isset.isABTestSuccess && !(isABTestSuccess == rhs.isABTestSuccess))
      return false;
    return true;
  }
  bool operator != (const VosdkSession &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkSession & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkSession& obj);
};

void swap(VosdkSession &a, VosdkSession &b);

typedef struct _VosdkVocs__isset {
  _VosdkVocs__isset() : header(false), ec(false), sc(false), serverIp(false), firstSuccess(false), responseTime(false), serverIpList(false), ssid(false), bssid(false), localWanIp(false), ispName(false), minorIsp(false) {}
  bool header :1;
  bool ec :1;
  bool sc :1;
  bool serverIp :1;
  bool firstSuccess :1;
  bool responseTime :1;
  bool serverIpList :1;
  bool ssid :1;
  bool bssid :1;
  bool localWanIp :1;
  bool ispName :1;
  bool minorIsp :1;
} _VosdkVocs__isset;

class VosdkVocs {
 public:

  static const char* ascii_fingerprint; // = "AB2655934AC948A3AF53F439E3B96741";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x26,0x55,0x93,0x4A,0xC9,0x48,0xA3,0xAF,0x53,0xF4,0x39,0xE3,0xB9,0x67,0x41};

  VosdkVocs(const VosdkVocs&);
  VosdkVocs& operator=(const VosdkVocs&);
  VosdkVocs() : ec(0), sc(0), serverIp(), firstSuccess(0), responseTime(0), ssid(), bssid(), localWanIp(), ispName(), minorIsp(0) {
  }

  virtual ~VosdkVocs() throw();
  VosdkHeader header;
  int32_t ec;
  int32_t sc;
  std::string serverIp;
  bool firstSuccess;
  int32_t responseTime;
  std::vector<std::string>  serverIpList;
  std::string ssid;
  std::string bssid;
  std::string localWanIp;
  std::string ispName;
  bool minorIsp;

  _VosdkVocs__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_ec(const int32_t val);

  void __set_sc(const int32_t val);

  void __set_serverIp(const std::string& val);

  void __set_firstSuccess(const bool val);

  void __set_responseTime(const int32_t val);

  void __set_serverIpList(const std::vector<std::string> & val);

  void __set_ssid(const std::string& val);

  void __set_bssid(const std::string& val);

  void __set_localWanIp(const std::string& val);

  void __set_ispName(const std::string& val);

  void __set_minorIsp(const bool val);

  bool operator == (const VosdkVocs & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.ec != rhs.__isset.ec)
      return false;
    else if (__isset.ec && !(ec == rhs.ec))
      return false;
    if (__isset.sc != rhs.__isset.sc)
      return false;
    else if (__isset.sc && !(sc == rhs.sc))
      return false;
    if (__isset.serverIp != rhs.__isset.serverIp)
      return false;
    else if (__isset.serverIp && !(serverIp == rhs.serverIp))
      return false;
    if (__isset.firstSuccess != rhs.__isset.firstSuccess)
      return false;
    else if (__isset.firstSuccess && !(firstSuccess == rhs.firstSuccess))
      return false;
    if (__isset.responseTime != rhs.__isset.responseTime)
      return false;
    else if (__isset.responseTime && !(responseTime == rhs.responseTime))
      return false;
    if (__isset.serverIpList != rhs.__isset.serverIpList)
      return false;
    else if (__isset.serverIpList && !(serverIpList == rhs.serverIpList))
      return false;
    if (__isset.ssid != rhs.__isset.ssid)
      return false;
    else if (__isset.ssid && !(ssid == rhs.ssid))
      return false;
    if (__isset.bssid != rhs.__isset.bssid)
      return false;
    else if (__isset.bssid && !(bssid == rhs.bssid))
      return false;
    if (__isset.localWanIp != rhs.__isset.localWanIp)
      return false;
    else if (__isset.localWanIp && !(localWanIp == rhs.localWanIp))
      return false;
    if (__isset.ispName != rhs.__isset.ispName)
      return false;
    else if (__isset.ispName && !(ispName == rhs.ispName))
      return false;
    if (__isset.minorIsp != rhs.__isset.minorIsp)
      return false;
    else if (__isset.minorIsp && !(minorIsp == rhs.minorIsp))
      return false;
    return true;
  }
  bool operator != (const VosdkVocs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVocs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVocs& obj);
};

void swap(VosdkVocs &a, VosdkVocs &b);

typedef struct _VosdkVos__isset {
  _VosdkVos__isset() : header(false), ec(false), sc(false), serverIp(false), vosList(false), firstSuccess(false), channelCount(false), responseTime(false), ackedLoginServerIp(false) {}
  bool header :1;
  bool ec :1;
  bool sc :1;
  bool serverIp :1;
  bool vosList :1;
  bool firstSuccess :1;
  bool channelCount :1;
  bool responseTime :1;
  bool ackedLoginServerIp :1;
} _VosdkVos__isset;

class VosdkVos {
 public:

  static const char* ascii_fingerprint; // = "E7AFFB9DAA27990C978A83997A826375";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xAF,0xFB,0x9D,0xAA,0x27,0x99,0x0C,0x97,0x8A,0x83,0x99,0x7A,0x82,0x63,0x75};

  VosdkVos(const VosdkVos&);
  VosdkVos& operator=(const VosdkVos&);
  VosdkVos() : ec(0), sc(0), serverIp(), firstSuccess(0), channelCount(0), responseTime(0), ackedLoginServerIp() {
  }

  virtual ~VosdkVos() throw();
  VosdkHeader header;
  int32_t ec;
  int32_t sc;
  std::string serverIp;
  std::vector<std::string>  vosList;
  bool firstSuccess;
  int32_t channelCount;
  int32_t responseTime;
  std::string ackedLoginServerIp;

  _VosdkVos__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_ec(const int32_t val);

  void __set_sc(const int32_t val);

  void __set_serverIp(const std::string& val);

  void __set_vosList(const std::vector<std::string> & val);

  void __set_firstSuccess(const bool val);

  void __set_channelCount(const int32_t val);

  void __set_responseTime(const int32_t val);

  void __set_ackedLoginServerIp(const std::string& val);

  bool operator == (const VosdkVos & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.ec != rhs.__isset.ec)
      return false;
    else if (__isset.ec && !(ec == rhs.ec))
      return false;
    if (__isset.sc != rhs.__isset.sc)
      return false;
    else if (__isset.sc && !(sc == rhs.sc))
      return false;
    if (__isset.serverIp != rhs.__isset.serverIp)
      return false;
    else if (__isset.serverIp && !(serverIp == rhs.serverIp))
      return false;
    if (__isset.vosList != rhs.__isset.vosList)
      return false;
    else if (__isset.vosList && !(vosList == rhs.vosList))
      return false;
    if (__isset.firstSuccess != rhs.__isset.firstSuccess)
      return false;
    else if (__isset.firstSuccess && !(firstSuccess == rhs.firstSuccess))
      return false;
    if (__isset.channelCount != rhs.__isset.channelCount)
      return false;
    else if (__isset.channelCount && !(channelCount == rhs.channelCount))
      return false;
    if (__isset.responseTime != rhs.__isset.responseTime)
      return false;
    else if (__isset.responseTime && !(responseTime == rhs.responseTime))
      return false;
    if (__isset.ackedLoginServerIp != rhs.__isset.ackedLoginServerIp)
      return false;
    else if (__isset.ackedLoginServerIp && !(ackedLoginServerIp == rhs.ackedLoginServerIp))
      return false;
    return true;
  }
  bool operator != (const VosdkVos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVos& obj);
};

void swap(VosdkVos &a, VosdkVos &b);

typedef struct _VosdkChan__isset {
  _VosdkChan__isset() : header(false), chm(false) {}
  bool header :1;
  bool chm :1;
} _VosdkChan__isset;

class VosdkChan {
 public:

  static const char* ascii_fingerprint; // = "A3C125E9D4C2CE588E8B4FA1A55E8113";
  static const uint8_t binary_fingerprint[16]; // = {0xA3,0xC1,0x25,0xE9,0xD4,0xC2,0xCE,0x58,0x8E,0x8B,0x4F,0xA1,0xA5,0x5E,0x81,0x13};

  VosdkChan(const VosdkChan&);
  VosdkChan& operator=(const VosdkChan&);
  VosdkChan() : chm(0) {
  }

  virtual ~VosdkChan() throw();
  VosdkHeader header;
  int32_t chm;

  _VosdkChan__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_chm(const int32_t val);

  bool operator == (const VosdkChan & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.chm != rhs.__isset.chm)
      return false;
    else if (__isset.chm && !(chm == rhs.chm))
      return false;
    return true;
  }
  bool operator != (const VosdkChan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkChan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkChan& obj);
};

void swap(VosdkChan &a, VosdkChan &b);

typedef struct _VosdkQuit__isset {
  _VosdkQuit__isset() : header(false), dnsParsedTime(false) {}
  bool header :1;
  bool dnsParsedTime :1;
} _VosdkQuit__isset;

class VosdkQuit {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkQuit(const VosdkQuit&);
  VosdkQuit& operator=(const VosdkQuit&);
  VosdkQuit() : dnsParsedTime(0) {
  }

  virtual ~VosdkQuit() throw();
  VosdkHeader header;
  int32_t dnsParsedTime;

  _VosdkQuit__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_dnsParsedTime(const int32_t val);

  bool operator == (const VosdkQuit & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.dnsParsedTime != rhs.__isset.dnsParsedTime)
      return false;
    else if (__isset.dnsParsedTime && !(dnsParsedTime == rhs.dnsParsedTime))
      return false;
    return true;
  }
  bool operator != (const VosdkQuit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkQuit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkQuit& obj);
};

void swap(VosdkQuit &a, VosdkQuit &b);

typedef struct _VosdkPeer__isset {
  _VosdkPeer__isset() : header(false), peerUid(false) {}
  bool header :1;
  bool peerUid :1;
} _VosdkPeer__isset;

class VosdkPeer {
 public:

  static const char* ascii_fingerprint; // = "1DDE93193DBC99C1A6290B4A983847BB";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0xDE,0x93,0x19,0x3D,0xBC,0x99,0xC1,0xA6,0x29,0x0B,0x4A,0x98,0x38,0x47,0xBB};

  VosdkPeer(const VosdkPeer&);
  VosdkPeer& operator=(const VosdkPeer&);
  VosdkPeer() : peerUid(0) {
  }

  virtual ~VosdkPeer() throw();
  VosdkHeader header;
  int64_t peerUid;

  _VosdkPeer__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerUid(const int64_t val);

  bool operator == (const VosdkPeer & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerUid != rhs.__isset.peerUid)
      return false;
    else if (__isset.peerUid && !(peerUid == rhs.peerUid))
      return false;
    return true;
  }
  bool operator != (const VosdkPeer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkPeer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkPeer& obj);
};

void swap(VosdkPeer &a, VosdkPeer &b);

typedef struct _VosdkViLocalFrame__isset {
  _VosdkViLocalFrame__isset() : header(false), height(false), width(false) {}
  bool header :1;
  bool height :1;
  bool width :1;
} _VosdkViLocalFrame__isset;

class VosdkViLocalFrame {
 public:

  static const char* ascii_fingerprint; // = "C2AA7695D2D8E54277BD0F7525CE4E28";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xAA,0x76,0x95,0xD2,0xD8,0xE5,0x42,0x77,0xBD,0x0F,0x75,0x25,0xCE,0x4E,0x28};

  VosdkViLocalFrame(const VosdkViLocalFrame&);
  VosdkViLocalFrame& operator=(const VosdkViLocalFrame&);
  VosdkViLocalFrame() : height(0), width(0) {
  }

  virtual ~VosdkViLocalFrame() throw();
  VosdkHeader header;
  int32_t height;
  int32_t width;

  _VosdkViLocalFrame__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_height(const int32_t val);

  void __set_width(const int32_t val);

  bool operator == (const VosdkViLocalFrame & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    return true;
  }
  bool operator != (const VosdkViLocalFrame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkViLocalFrame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkViLocalFrame& obj);
};

void swap(VosdkViLocalFrame &a, VosdkViLocalFrame &b);

typedef struct _VosdkViRemoteFrame__isset {
  _VosdkViRemoteFrame__isset() : header(false), peerUid(false), height(false), width(false), codec(false) {}
  bool header :1;
  bool peerUid :1;
  bool height :1;
  bool width :1;
  bool codec :1;
} _VosdkViRemoteFrame__isset;

class VosdkViRemoteFrame {
 public:

  static const char* ascii_fingerprint; // = "6CB918F11F86611AC4009DCEDDFFD419";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0xB9,0x18,0xF1,0x1F,0x86,0x61,0x1A,0xC4,0x00,0x9D,0xCE,0xDD,0xFF,0xD4,0x19};

  VosdkViRemoteFrame(const VosdkViRemoteFrame&);
  VosdkViRemoteFrame& operator=(const VosdkViRemoteFrame&);
  VosdkViRemoteFrame() : peerUid(0), height(0), width(0), codec() {
  }

  virtual ~VosdkViRemoteFrame() throw();
  VosdkHeader header;
  int64_t peerUid;
  int32_t height;
  int32_t width;
  std::string codec;

  _VosdkViRemoteFrame__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerUid(const int64_t val);

  void __set_height(const int32_t val);

  void __set_width(const int32_t val);

  void __set_codec(const std::string& val);

  bool operator == (const VosdkViRemoteFrame & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerUid != rhs.__isset.peerUid)
      return false;
    else if (__isset.peerUid && !(peerUid == rhs.peerUid))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    if (__isset.codec != rhs.__isset.codec)
      return false;
    else if (__isset.codec && !(codec == rhs.codec))
      return false;
    return true;
  }
  bool operator != (const VosdkViRemoteFrame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkViRemoteFrame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkViRemoteFrame& obj);
};

void swap(VosdkViRemoteFrame &a, VosdkViRemoteFrame &b);

typedef struct _VosdkRating__isset {
  _VosdkRating__isset() : header(false), vk(false), rating(false), description(false) {}
  bool header :1;
  bool vk :1;
  bool rating :1;
  bool description :1;
} _VosdkRating__isset;

class VosdkRating {
 public:

  static const char* ascii_fingerprint; // = "9AE436FBDA836057ED20FAC6F6DFD029";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0xE4,0x36,0xFB,0xDA,0x83,0x60,0x57,0xED,0x20,0xFA,0xC6,0xF6,0xDF,0xD0,0x29};

  VosdkRating(const VosdkRating&);
  VosdkRating& operator=(const VosdkRating&);
  VosdkRating() : vk(), rating(0), description() {
  }

  virtual ~VosdkRating() throw();
  VosdkHeader header;
  std::string vk;
  int32_t rating;
  std::string description;

  _VosdkRating__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_vk(const std::string& val);

  void __set_rating(const int32_t val);

  void __set_description(const std::string& val);

  bool operator == (const VosdkRating & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.vk != rhs.__isset.vk)
      return false;
    else if (__isset.vk && !(vk == rhs.vk))
      return false;
    if (__isset.rating != rhs.__isset.rating)
      return false;
    else if (__isset.rating && !(rating == rhs.rating))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const VosdkRating &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkRating & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkRating& obj);
};

void swap(VosdkRating &a, VosdkRating &b);

typedef struct _VosdkACodec__isset {
  _VosdkACodec__isset() : header(false), codec(false), frames(false), interleaves(false) {}
  bool header :1;
  bool codec :1;
  bool frames :1;
  bool interleaves :1;
} _VosdkACodec__isset;

class VosdkACodec {
 public:

  static const char* ascii_fingerprint; // = "3539E5156CD68721059FAFADBFC753F2";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0x39,0xE5,0x15,0x6C,0xD6,0x87,0x21,0x05,0x9F,0xAF,0xAD,0xBF,0xC7,0x53,0xF2};

  VosdkACodec(const VosdkACodec&);
  VosdkACodec& operator=(const VosdkACodec&);
  VosdkACodec() : codec(), frames(0), interleaves(0) {
  }

  virtual ~VosdkACodec() throw();
  VosdkHeader header;
  std::string codec;
  int32_t frames;
  int32_t interleaves;

  _VosdkACodec__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_codec(const std::string& val);

  void __set_frames(const int32_t val);

  void __set_interleaves(const int32_t val);

  bool operator == (const VosdkACodec & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.codec != rhs.__isset.codec)
      return false;
    else if (__isset.codec && !(codec == rhs.codec))
      return false;
    if (__isset.frames != rhs.__isset.frames)
      return false;
    else if (__isset.frames && !(frames == rhs.frames))
      return false;
    if (__isset.interleaves != rhs.__isset.interleaves)
      return false;
    else if (__isset.interleaves && !(interleaves == rhs.interleaves))
      return false;
    return true;
  }
  bool operator != (const VosdkACodec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkACodec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkACodec& obj);
};

void swap(VosdkACodec &a, VosdkACodec &b);

typedef struct _VosdkNetOb__isset {
  _VosdkNetOb__isset() : header(false), payload(false) {}
  bool header :1;
  bool payload :1;
} _VosdkNetOb__isset;

class VosdkNetOb {
 public:

  static const char* ascii_fingerprint; // = "7643AB8C86D47EFC29C9DADBFB748150";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

  VosdkNetOb(const VosdkNetOb&);
  VosdkNetOb& operator=(const VosdkNetOb&);
  VosdkNetOb() : payload() {
  }

  virtual ~VosdkNetOb() throw();
  VosdkHeader header;
  std::string payload;

  _VosdkNetOb__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_payload(const std::string& val);

  bool operator == (const VosdkNetOb & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const VosdkNetOb &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkNetOb & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkNetOb& obj);
};

void swap(VosdkNetOb &a, VosdkNetOb &b);

typedef struct _VosdkDeviceStatChange__isset {
  _VosdkDeviceStatChange__isset() : header(false), deviceType(false), StateType(false), deviceId(false), deviceName(false) {}
  bool header :1;
  bool deviceType :1;
  bool StateType :1;
  bool deviceId :1;
  bool deviceName :1;
} _VosdkDeviceStatChange__isset;

class VosdkDeviceStatChange {
 public:

  static const char* ascii_fingerprint; // = "6D7C0B2CCDC035DA6FB336A2E7D6CDE2";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0x7C,0x0B,0x2C,0xCD,0xC0,0x35,0xDA,0x6F,0xB3,0x36,0xA2,0xE7,0xD6,0xCD,0xE2};

  VosdkDeviceStatChange(const VosdkDeviceStatChange&);
  VosdkDeviceStatChange& operator=(const VosdkDeviceStatChange&);
  VosdkDeviceStatChange() : deviceType(0), StateType(0), deviceId(), deviceName() {
  }

  virtual ~VosdkDeviceStatChange() throw();
  VosdkHeader header;
  int32_t deviceType;
  int32_t StateType;
  std::string deviceId;
  std::string deviceName;

  _VosdkDeviceStatChange__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_deviceType(const int32_t val);

  void __set_StateType(const int32_t val);

  void __set_deviceId(const std::string& val);

  void __set_deviceName(const std::string& val);

  bool operator == (const VosdkDeviceStatChange & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.deviceType != rhs.__isset.deviceType)
      return false;
    else if (__isset.deviceType && !(deviceType == rhs.deviceType))
      return false;
    if (__isset.StateType != rhs.__isset.StateType)
      return false;
    else if (__isset.StateType && !(StateType == rhs.StateType))
      return false;
    if (__isset.deviceId != rhs.__isset.deviceId)
      return false;
    else if (__isset.deviceId && !(deviceId == rhs.deviceId))
      return false;
    if (__isset.deviceName != rhs.__isset.deviceName)
      return false;
    else if (__isset.deviceName && !(deviceName == rhs.deviceName))
      return false;
    return true;
  }
  bool operator != (const VosdkDeviceStatChange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkDeviceStatChange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkDeviceStatChange& obj);
};

void swap(VosdkDeviceStatChange &a, VosdkDeviceStatChange &b);

typedef struct _VosdkCameraInfoItem__isset {
  _VosdkCameraInfoItem__isset() : friendName(false), deviceId(false), bUse(false) {}
  bool friendName :1;
  bool deviceId :1;
  bool bUse :1;
} _VosdkCameraInfoItem__isset;

class VosdkCameraInfoItem {
 public:

  static const char* ascii_fingerprint; // = "D30446A4EF4CBC44073B8453AED65C54";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x04,0x46,0xA4,0xEF,0x4C,0xBC,0x44,0x07,0x3B,0x84,0x53,0xAE,0xD6,0x5C,0x54};

  VosdkCameraInfoItem(const VosdkCameraInfoItem&);
  VosdkCameraInfoItem& operator=(const VosdkCameraInfoItem&);
  VosdkCameraInfoItem() : friendName(), deviceId(), bUse(0) {
  }

  virtual ~VosdkCameraInfoItem() throw();
  std::string friendName;
  std::string deviceId;
  bool bUse;

  _VosdkCameraInfoItem__isset __isset;

  void __set_friendName(const std::string& val);

  void __set_deviceId(const std::string& val);

  void __set_bUse(const bool val);

  bool operator == (const VosdkCameraInfoItem & rhs) const
  {
    if (__isset.friendName != rhs.__isset.friendName)
      return false;
    else if (__isset.friendName && !(friendName == rhs.friendName))
      return false;
    if (__isset.deviceId != rhs.__isset.deviceId)
      return false;
    else if (__isset.deviceId && !(deviceId == rhs.deviceId))
      return false;
    if (__isset.bUse != rhs.__isset.bUse)
      return false;
    else if (__isset.bUse && !(bUse == rhs.bUse))
      return false;
    return true;
  }
  bool operator != (const VosdkCameraInfoItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkCameraInfoItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkCameraInfoItem& obj);
};

void swap(VosdkCameraInfoItem &a, VosdkCameraInfoItem &b);

typedef struct _VosdkCameraInfos__isset {
  _VosdkCameraInfos__isset() : header(false), items(false) {}
  bool header :1;
  bool items :1;
} _VosdkCameraInfos__isset;

class VosdkCameraInfos {
 public:

  static const char* ascii_fingerprint; // = "107C4AB929D6266C3D0B54AC934D0CD9";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x7C,0x4A,0xB9,0x29,0xD6,0x26,0x6C,0x3D,0x0B,0x54,0xAC,0x93,0x4D,0x0C,0xD9};

  VosdkCameraInfos(const VosdkCameraInfos&);
  VosdkCameraInfos& operator=(const VosdkCameraInfos&);
  VosdkCameraInfos() {
  }

  virtual ~VosdkCameraInfos() throw();
  VosdkHeader header;
  std::vector<VosdkCameraInfoItem>  items;

  _VosdkCameraInfos__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_items(const std::vector<VosdkCameraInfoItem> & val);

  bool operator == (const VosdkCameraInfos & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.items != rhs.__isset.items)
      return false;
    else if (__isset.items && !(items == rhs.items))
      return false;
    return true;
  }
  bool operator != (const VosdkCameraInfos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkCameraInfos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkCameraInfos& obj);
};

void swap(VosdkCameraInfos &a, VosdkCameraInfos &b);

typedef struct _Vosb2s__isset {
  _Vosb2s__isset() : vid(false), cid(false), uid(false), vos_id(false), source_ip(false), source_port(false), dest_ip(false), dest_port(false), delay(false), jitter100(false), jitter95(false), jitter90(false), lost_ratio(false), lost_ratio2(false), lost_ratio3(false), lts(false) {}
  bool vid :1;
  bool cid :1;
  bool uid :1;
  bool vos_id :1;
  bool source_ip :1;
  bool source_port :1;
  bool dest_ip :1;
  bool dest_port :1;
  bool delay :1;
  bool jitter100 :1;
  bool jitter95 :1;
  bool jitter90 :1;
  bool lost_ratio :1;
  bool lost_ratio2 :1;
  bool lost_ratio3 :1;
  bool lts :1;
} _Vosb2s__isset;

class Vosb2s {
 public:

  static const char* ascii_fingerprint; // = "F907E8B0823F6A24D16532680D9FE79E";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0x07,0xE8,0xB0,0x82,0x3F,0x6A,0x24,0xD1,0x65,0x32,0x68,0x0D,0x9F,0xE7,0x9E};

  Vosb2s(const Vosb2s&);
  Vosb2s& operator=(const Vosb2s&);
  Vosb2s() : vid(0), cid(0), uid(0), vos_id(0), source_ip(0), source_port(0), dest_ip(0), dest_port(0), delay(0), jitter100(0), jitter95(0), jitter90(0), lost_ratio(0), lost_ratio2(0), lost_ratio3(0), lts(0) {
  }

  virtual ~Vosb2s() throw();
  int32_t vid;
  int64_t cid;
  int64_t uid;
  int32_t vos_id;
  int32_t source_ip;
  int16_t source_port;
  int32_t dest_ip;
  int16_t dest_port;
  int16_t delay;
  int16_t jitter100;
  int16_t jitter95;
  int16_t jitter90;
  int16_t lost_ratio;
  int16_t lost_ratio2;
  int16_t lost_ratio3;
  int64_t lts;

  _Vosb2s__isset __isset;

  void __set_vid(const int32_t val);

  void __set_cid(const int64_t val);

  void __set_uid(const int64_t val);

  void __set_vos_id(const int32_t val);

  void __set_source_ip(const int32_t val);

  void __set_source_port(const int16_t val);

  void __set_dest_ip(const int32_t val);

  void __set_dest_port(const int16_t val);

  void __set_delay(const int16_t val);

  void __set_jitter100(const int16_t val);

  void __set_jitter95(const int16_t val);

  void __set_jitter90(const int16_t val);

  void __set_lost_ratio(const int16_t val);

  void __set_lost_ratio2(const int16_t val);

  void __set_lost_ratio3(const int16_t val);

  void __set_lts(const int64_t val);

  bool operator == (const Vosb2s & rhs) const
  {
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    if (__isset.cid != rhs.__isset.cid)
      return false;
    else if (__isset.cid && !(cid == rhs.cid))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.vos_id != rhs.__isset.vos_id)
      return false;
    else if (__isset.vos_id && !(vos_id == rhs.vos_id))
      return false;
    if (__isset.source_ip != rhs.__isset.source_ip)
      return false;
    else if (__isset.source_ip && !(source_ip == rhs.source_ip))
      return false;
    if (__isset.source_port != rhs.__isset.source_port)
      return false;
    else if (__isset.source_port && !(source_port == rhs.source_port))
      return false;
    if (__isset.dest_ip != rhs.__isset.dest_ip)
      return false;
    else if (__isset.dest_ip && !(dest_ip == rhs.dest_ip))
      return false;
    if (__isset.dest_port != rhs.__isset.dest_port)
      return false;
    else if (__isset.dest_port && !(dest_port == rhs.dest_port))
      return false;
    if (__isset.delay != rhs.__isset.delay)
      return false;
    else if (__isset.delay && !(delay == rhs.delay))
      return false;
    if (__isset.jitter100 != rhs.__isset.jitter100)
      return false;
    else if (__isset.jitter100 && !(jitter100 == rhs.jitter100))
      return false;
    if (__isset.jitter95 != rhs.__isset.jitter95)
      return false;
    else if (__isset.jitter95 && !(jitter95 == rhs.jitter95))
      return false;
    if (__isset.jitter90 != rhs.__isset.jitter90)
      return false;
    else if (__isset.jitter90 && !(jitter90 == rhs.jitter90))
      return false;
    if (__isset.lost_ratio != rhs.__isset.lost_ratio)
      return false;
    else if (__isset.lost_ratio && !(lost_ratio == rhs.lost_ratio))
      return false;
    if (__isset.lost_ratio2 != rhs.__isset.lost_ratio2)
      return false;
    else if (__isset.lost_ratio2 && !(lost_ratio2 == rhs.lost_ratio2))
      return false;
    if (__isset.lost_ratio3 != rhs.__isset.lost_ratio3)
      return false;
    else if (__isset.lost_ratio3 && !(lost_ratio3 == rhs.lost_ratio3))
      return false;
    if (__isset.lts != rhs.__isset.lts)
      return false;
    else if (__isset.lts && !(lts == rhs.lts))
      return false;
    return true;
  }
  bool operator != (const Vosb2s &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Vosb2s & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Vosb2s& obj);
};

void swap(Vosb2s &a, Vosb2s &b);

typedef struct _WrtcBrowser2Gateway__isset {
  _WrtcBrowser2Gateway__isset() : vid(false), cid(false), uid(false), vos_id(false), source_ip(false), source_port(false), dest_ip(false), dest_port(false), delay(false), jitter100(false), jitter95(false), jitter90(false), lost_ratio(false), lost_ratio2(false), lost_ratio3(false), lts(false) {}
  bool vid :1;
  bool cid :1;
  bool uid :1;
  bool vos_id :1;
  bool source_ip :1;
  bool source_port :1;
  bool dest_ip :1;
  bool dest_port :1;
  bool delay :1;
  bool jitter100 :1;
  bool jitter95 :1;
  bool jitter90 :1;
  bool lost_ratio :1;
  bool lost_ratio2 :1;
  bool lost_ratio3 :1;
  bool lts :1;
} _WrtcBrowser2Gateway__isset;

class WrtcBrowser2Gateway {
 public:

  static const char* ascii_fingerprint; // = "F907E8B0823F6A24D16532680D9FE79E";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0x07,0xE8,0xB0,0x82,0x3F,0x6A,0x24,0xD1,0x65,0x32,0x68,0x0D,0x9F,0xE7,0x9E};

  WrtcBrowser2Gateway(const WrtcBrowser2Gateway&);
  WrtcBrowser2Gateway& operator=(const WrtcBrowser2Gateway&);
  WrtcBrowser2Gateway() : vid(0), cid(0), uid(0), vos_id(0), source_ip(0), source_port(0), dest_ip(0), dest_port(0), delay(0), jitter100(0), jitter95(0), jitter90(0), lost_ratio(0), lost_ratio2(0), lost_ratio3(0), lts(0) {
  }

  virtual ~WrtcBrowser2Gateway() throw();
  int32_t vid;
  int64_t cid;
  int64_t uid;
  int32_t vos_id;
  int32_t source_ip;
  int16_t source_port;
  int32_t dest_ip;
  int16_t dest_port;
  int16_t delay;
  int16_t jitter100;
  int16_t jitter95;
  int16_t jitter90;
  int16_t lost_ratio;
  int16_t lost_ratio2;
  int16_t lost_ratio3;
  int64_t lts;

  _WrtcBrowser2Gateway__isset __isset;

  void __set_vid(const int32_t val);

  void __set_cid(const int64_t val);

  void __set_uid(const int64_t val);

  void __set_vos_id(const int32_t val);

  void __set_source_ip(const int32_t val);

  void __set_source_port(const int16_t val);

  void __set_dest_ip(const int32_t val);

  void __set_dest_port(const int16_t val);

  void __set_delay(const int16_t val);

  void __set_jitter100(const int16_t val);

  void __set_jitter95(const int16_t val);

  void __set_jitter90(const int16_t val);

  void __set_lost_ratio(const int16_t val);

  void __set_lost_ratio2(const int16_t val);

  void __set_lost_ratio3(const int16_t val);

  void __set_lts(const int64_t val);

  bool operator == (const WrtcBrowser2Gateway & rhs) const
  {
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    if (__isset.cid != rhs.__isset.cid)
      return false;
    else if (__isset.cid && !(cid == rhs.cid))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.vos_id != rhs.__isset.vos_id)
      return false;
    else if (__isset.vos_id && !(vos_id == rhs.vos_id))
      return false;
    if (__isset.source_ip != rhs.__isset.source_ip)
      return false;
    else if (__isset.source_ip && !(source_ip == rhs.source_ip))
      return false;
    if (__isset.source_port != rhs.__isset.source_port)
      return false;
    else if (__isset.source_port && !(source_port == rhs.source_port))
      return false;
    if (__isset.dest_ip != rhs.__isset.dest_ip)
      return false;
    else if (__isset.dest_ip && !(dest_ip == rhs.dest_ip))
      return false;
    if (__isset.dest_port != rhs.__isset.dest_port)
      return false;
    else if (__isset.dest_port && !(dest_port == rhs.dest_port))
      return false;
    if (__isset.delay != rhs.__isset.delay)
      return false;
    else if (__isset.delay && !(delay == rhs.delay))
      return false;
    if (__isset.jitter100 != rhs.__isset.jitter100)
      return false;
    else if (__isset.jitter100 && !(jitter100 == rhs.jitter100))
      return false;
    if (__isset.jitter95 != rhs.__isset.jitter95)
      return false;
    else if (__isset.jitter95 && !(jitter95 == rhs.jitter95))
      return false;
    if (__isset.jitter90 != rhs.__isset.jitter90)
      return false;
    else if (__isset.jitter90 && !(jitter90 == rhs.jitter90))
      return false;
    if (__isset.lost_ratio != rhs.__isset.lost_ratio)
      return false;
    else if (__isset.lost_ratio && !(lost_ratio == rhs.lost_ratio))
      return false;
    if (__isset.lost_ratio2 != rhs.__isset.lost_ratio2)
      return false;
    else if (__isset.lost_ratio2 && !(lost_ratio2 == rhs.lost_ratio2))
      return false;
    if (__isset.lost_ratio3 != rhs.__isset.lost_ratio3)
      return false;
    else if (__isset.lost_ratio3 && !(lost_ratio3 == rhs.lost_ratio3))
      return false;
    if (__isset.lts != rhs.__isset.lts)
      return false;
    else if (__isset.lts && !(lts == rhs.lts))
      return false;
    return true;
  }
  bool operator != (const WrtcBrowser2Gateway &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcBrowser2Gateway & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcBrowser2Gateway& obj);
};

void swap(WrtcBrowser2Gateway &a, WrtcBrowser2Gateway &b);

typedef struct _WrtcProfile__isset {
  _WrtcProfile__isset() : header(false), framerate(false), bitrate(false), width(false), height(false) {}
  bool header :1;
  bool framerate :1;
  bool bitrate :1;
  bool width :1;
  bool height :1;
} _WrtcProfile__isset;

class WrtcProfile {
 public:

  static const char* ascii_fingerprint; // = "18DF9D190D8E9E00A48E0285B6130426";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0xDF,0x9D,0x19,0x0D,0x8E,0x9E,0x00,0xA4,0x8E,0x02,0x85,0xB6,0x13,0x04,0x26};

  WrtcProfile(const WrtcProfile&);
  WrtcProfile& operator=(const WrtcProfile&);
  WrtcProfile() : framerate(0), bitrate(0), width(0), height(0) {
  }

  virtual ~WrtcProfile() throw();
  VosdkHeader header;
  int16_t framerate;
  int32_t bitrate;
  int32_t width;
  int32_t height;

  _WrtcProfile__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_framerate(const int16_t val);

  void __set_bitrate(const int32_t val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  bool operator == (const WrtcProfile & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.framerate != rhs.__isset.framerate)
      return false;
    else if (__isset.framerate && !(framerate == rhs.framerate))
      return false;
    if (__isset.bitrate != rhs.__isset.bitrate)
      return false;
    else if (__isset.bitrate && !(bitrate == rhs.bitrate))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const WrtcProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcProfile& obj);
};

void swap(WrtcProfile &a, WrtcProfile &b);

typedef struct _WrtcPubStream__isset {
  _WrtcPubStream__isset() : header(false), audio(false), video(false) {}
  bool header :1;
  bool audio :1;
  bool video :1;
} _WrtcPubStream__isset;

class WrtcPubStream {
 public:

  static const char* ascii_fingerprint; // = "D9ACD16268569EC75DBC65313B619291";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xAC,0xD1,0x62,0x68,0x56,0x9E,0xC7,0x5D,0xBC,0x65,0x31,0x3B,0x61,0x92,0x91};

  WrtcPubStream(const WrtcPubStream&);
  WrtcPubStream& operator=(const WrtcPubStream&);
  WrtcPubStream() : audio(0), video(0) {
  }

  virtual ~WrtcPubStream() throw();
  VosdkHeader header;
  bool audio;
  bool video;

  _WrtcPubStream__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_audio(const bool val);

  void __set_video(const bool val);

  bool operator == (const WrtcPubStream & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.audio != rhs.__isset.audio)
      return false;
    else if (__isset.audio && !(audio == rhs.audio))
      return false;
    if (__isset.video != rhs.__isset.video)
      return false;
    else if (__isset.video && !(video == rhs.video))
      return false;
    return true;
  }
  bool operator != (const WrtcPubStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcPubStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcPubStream& obj);
};

void swap(WrtcPubStream &a, WrtcPubStream &b);

typedef struct _WrtcUnpubStream__isset {
  _WrtcUnpubStream__isset() : header(false) {}
  bool header :1;
} _WrtcUnpubStream__isset;

class WrtcUnpubStream {
 public:

  static const char* ascii_fingerprint; // = "C3D41A67DB60E8E4C8D244D93F311688";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

  WrtcUnpubStream(const WrtcUnpubStream&);
  WrtcUnpubStream& operator=(const WrtcUnpubStream&);
  WrtcUnpubStream() {
  }

  virtual ~WrtcUnpubStream() throw();
  VosdkHeader header;

  _WrtcUnpubStream__isset __isset;

  void __set_header(const VosdkHeader& val);

  bool operator == (const WrtcUnpubStream & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const WrtcUnpubStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcUnpubStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcUnpubStream& obj);
};

void swap(WrtcUnpubStream &a, WrtcUnpubStream &b);

typedef struct _WrtcSubStream__isset {
  _WrtcSubStream__isset() : header(false), peerUid(false) {}
  bool header :1;
  bool peerUid :1;
} _WrtcSubStream__isset;

class WrtcSubStream {
 public:

  static const char* ascii_fingerprint; // = "1DDE93193DBC99C1A6290B4A983847BB";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0xDE,0x93,0x19,0x3D,0xBC,0x99,0xC1,0xA6,0x29,0x0B,0x4A,0x98,0x38,0x47,0xBB};

  WrtcSubStream(const WrtcSubStream&);
  WrtcSubStream& operator=(const WrtcSubStream&);
  WrtcSubStream() : peerUid(0) {
  }

  virtual ~WrtcSubStream() throw();
  VosdkHeader header;
  int64_t peerUid;

  _WrtcSubStream__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerUid(const int64_t val);

  bool operator == (const WrtcSubStream & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerUid != rhs.__isset.peerUid)
      return false;
    else if (__isset.peerUid && !(peerUid == rhs.peerUid))
      return false;
    return true;
  }
  bool operator != (const WrtcSubStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcSubStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcSubStream& obj);
};

void swap(WrtcSubStream &a, WrtcSubStream &b);

typedef struct _WrtcUnsubStream__isset {
  _WrtcUnsubStream__isset() : header(false), peerUid(false) {}
  bool header :1;
  bool peerUid :1;
} _WrtcUnsubStream__isset;

class WrtcUnsubStream {
 public:

  static const char* ascii_fingerprint; // = "1DDE93193DBC99C1A6290B4A983847BB";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0xDE,0x93,0x19,0x3D,0xBC,0x99,0xC1,0xA6,0x29,0x0B,0x4A,0x98,0x38,0x47,0xBB};

  WrtcUnsubStream(const WrtcUnsubStream&);
  WrtcUnsubStream& operator=(const WrtcUnsubStream&);
  WrtcUnsubStream() : peerUid(0) {
  }

  virtual ~WrtcUnsubStream() throw();
  VosdkHeader header;
  int64_t peerUid;

  _WrtcUnsubStream__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerUid(const int64_t val);

  bool operator == (const WrtcUnsubStream & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerUid != rhs.__isset.peerUid)
      return false;
    else if (__isset.peerUid && !(peerUid == rhs.peerUid))
      return false;
    return true;
  }
  bool operator != (const WrtcUnsubStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WrtcUnsubStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WrtcUnsubStream& obj);
};

void swap(WrtcUnsubStream &a, WrtcUnsubStream &b);

typedef struct _VosdkP2PStartStun__isset {
  _VosdkP2PStartStun__isset() : header(false), peerUid(false), openTs(false), joinIceTs(false) {}
  bool header :1;
  bool peerUid :1;
  bool openTs :1;
  bool joinIceTs :1;
} _VosdkP2PStartStun__isset;

class VosdkP2PStartStun {
 public:

  static const char* ascii_fingerprint; // = "619018CD0DCDD45F7B45508E3E6F21CA";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x90,0x18,0xCD,0x0D,0xCD,0xD4,0x5F,0x7B,0x45,0x50,0x8E,0x3E,0x6F,0x21,0xCA};

  VosdkP2PStartStun(const VosdkP2PStartStun&);
  VosdkP2PStartStun& operator=(const VosdkP2PStartStun&);
  VosdkP2PStartStun() : peerUid(0), openTs(0), joinIceTs(0) {
  }

  virtual ~VosdkP2PStartStun() throw();
  VosdkHeader header;
  int64_t peerUid;
  int64_t openTs;
  int64_t joinIceTs;

  _VosdkP2PStartStun__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerUid(const int64_t val);

  void __set_openTs(const int64_t val);

  void __set_joinIceTs(const int64_t val);

  bool operator == (const VosdkP2PStartStun & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerUid != rhs.__isset.peerUid)
      return false;
    else if (__isset.peerUid && !(peerUid == rhs.peerUid))
      return false;
    if (__isset.openTs != rhs.__isset.openTs)
      return false;
    else if (__isset.openTs && !(openTs == rhs.openTs))
      return false;
    if (__isset.joinIceTs != rhs.__isset.joinIceTs)
      return false;
    else if (__isset.joinIceTs && !(joinIceTs == rhs.joinIceTs))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PStartStun &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PStartStun & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PStartStun& obj);
};

void swap(VosdkP2PStartStun &a, VosdkP2PStartStun &b);

typedef struct _VosdkP2PSendDataBeginning__isset {
  _VosdkP2PSendDataBeginning__isset() : header(false), peerUid(false), openTs(false), joinIceTs(false), startStunTs(false), succStunTs(false) {}
  bool header :1;
  bool peerUid :1;
  bool openTs :1;
  bool joinIceTs :1;
  bool startStunTs :1;
  bool succStunTs :1;
} _VosdkP2PSendDataBeginning__isset;

class VosdkP2PSendDataBeginning {
 public:

  static const char* ascii_fingerprint; // = "EE81139DF93BE0BF4A532F267E1F5FA3";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x81,0x13,0x9D,0xF9,0x3B,0xE0,0xBF,0x4A,0x53,0x2F,0x26,0x7E,0x1F,0x5F,0xA3};

  VosdkP2PSendDataBeginning(const VosdkP2PSendDataBeginning&);
  VosdkP2PSendDataBeginning& operator=(const VosdkP2PSendDataBeginning&);
  VosdkP2PSendDataBeginning() : peerUid(0), openTs(0), joinIceTs(0), startStunTs(0), succStunTs(0) {
  }

  virtual ~VosdkP2PSendDataBeginning() throw();
  VosdkHeader header;
  int64_t peerUid;
  int64_t openTs;
  int64_t joinIceTs;
  int64_t startStunTs;
  int64_t succStunTs;

  _VosdkP2PSendDataBeginning__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerUid(const int64_t val);

  void __set_openTs(const int64_t val);

  void __set_joinIceTs(const int64_t val);

  void __set_startStunTs(const int64_t val);

  void __set_succStunTs(const int64_t val);

  bool operator == (const VosdkP2PSendDataBeginning & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerUid != rhs.__isset.peerUid)
      return false;
    else if (__isset.peerUid && !(peerUid == rhs.peerUid))
      return false;
    if (__isset.openTs != rhs.__isset.openTs)
      return false;
    else if (__isset.openTs && !(openTs == rhs.openTs))
      return false;
    if (__isset.joinIceTs != rhs.__isset.joinIceTs)
      return false;
    else if (__isset.joinIceTs && !(joinIceTs == rhs.joinIceTs))
      return false;
    if (__isset.startStunTs != rhs.__isset.startStunTs)
      return false;
    else if (__isset.startStunTs && !(startStunTs == rhs.startStunTs))
      return false;
    if (__isset.succStunTs != rhs.__isset.succStunTs)
      return false;
    else if (__isset.succStunTs && !(succStunTs == rhs.succStunTs))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PSendDataBeginning &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PSendDataBeginning & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PSendDataBeginning& obj);
};

void swap(VosdkP2PSendDataBeginning &a, VosdkP2PSendDataBeginning &b);

typedef struct _VosdkP2PJoinIce__isset {
  _VosdkP2PJoinIce__isset() : header(false), peerUid(false), openTs(false), externalAddresses(false), localAddress(false) {}
  bool header :1;
  bool peerUid :1;
  bool openTs :1;
  bool externalAddresses :1;
  bool localAddress :1;
} _VosdkP2PJoinIce__isset;

class VosdkP2PJoinIce {
 public:

  static const char* ascii_fingerprint; // = "41D4FB8E26A3BC4CF6964C6562FDEC13";
  static const uint8_t binary_fingerprint[16]; // = {0x41,0xD4,0xFB,0x8E,0x26,0xA3,0xBC,0x4C,0xF6,0x96,0x4C,0x65,0x62,0xFD,0xEC,0x13};

  VosdkP2PJoinIce(const VosdkP2PJoinIce&);
  VosdkP2PJoinIce& operator=(const VosdkP2PJoinIce&);
  VosdkP2PJoinIce() : peerUid(0), openTs(0) {
  }

  virtual ~VosdkP2PJoinIce() throw();
  VosdkHeader header;
  int64_t peerUid;
  int64_t openTs;
  std::map<std::string, std::string>  externalAddresses;
  std::vector<std::string>  localAddress;

  _VosdkP2PJoinIce__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerUid(const int64_t val);

  void __set_openTs(const int64_t val);

  void __set_externalAddresses(const std::map<std::string, std::string> & val);

  void __set_localAddress(const std::vector<std::string> & val);

  bool operator == (const VosdkP2PJoinIce & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerUid != rhs.__isset.peerUid)
      return false;
    else if (__isset.peerUid && !(peerUid == rhs.peerUid))
      return false;
    if (__isset.openTs != rhs.__isset.openTs)
      return false;
    else if (__isset.openTs && !(openTs == rhs.openTs))
      return false;
    if (__isset.externalAddresses != rhs.__isset.externalAddresses)
      return false;
    else if (__isset.externalAddresses && !(externalAddresses == rhs.externalAddresses))
      return false;
    if (__isset.localAddress != rhs.__isset.localAddress)
      return false;
    else if (__isset.localAddress && !(localAddress == rhs.localAddress))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PJoinIce &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PJoinIce & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PJoinIce& obj);
};

void swap(VosdkP2PJoinIce &a, VosdkP2PJoinIce &b);

typedef struct _VosdkP2PSuccStun__isset {
  _VosdkP2PSuccStun__isset() : header(false), peerUid(false), openTs(false), joinIceTs(false), startStunTs(false), peerIP(false), peerPort(false), peerAddr(false) {}
  bool header :1;
  bool peerUid :1;
  bool openTs :1;
  bool joinIceTs :1;
  bool startStunTs :1;
  bool peerIP :1;
  bool peerPort :1;
  bool peerAddr :1;
} _VosdkP2PSuccStun__isset;

class VosdkP2PSuccStun {
 public:

  static const char* ascii_fingerprint; // = "17169BA2EDE4A993FA6D5B909F5E7F90";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x16,0x9B,0xA2,0xED,0xE4,0xA9,0x93,0xFA,0x6D,0x5B,0x90,0x9F,0x5E,0x7F,0x90};

  VosdkP2PSuccStun(const VosdkP2PSuccStun&);
  VosdkP2PSuccStun& operator=(const VosdkP2PSuccStun&);
  VosdkP2PSuccStun() : peerUid(0), openTs(0), joinIceTs(0), startStunTs(0), peerIP(0), peerPort(0), peerAddr() {
  }

  virtual ~VosdkP2PSuccStun() throw();
  VosdkHeader header;
  int64_t peerUid;
  int64_t openTs;
  int64_t joinIceTs;
  int64_t startStunTs;
  int32_t peerIP;
  int16_t peerPort;
  std::string peerAddr;

  _VosdkP2PSuccStun__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerUid(const int64_t val);

  void __set_openTs(const int64_t val);

  void __set_joinIceTs(const int64_t val);

  void __set_startStunTs(const int64_t val);

  void __set_peerIP(const int32_t val);

  void __set_peerPort(const int16_t val);

  void __set_peerAddr(const std::string& val);

  bool operator == (const VosdkP2PSuccStun & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerUid != rhs.__isset.peerUid)
      return false;
    else if (__isset.peerUid && !(peerUid == rhs.peerUid))
      return false;
    if (__isset.openTs != rhs.__isset.openTs)
      return false;
    else if (__isset.openTs && !(openTs == rhs.openTs))
      return false;
    if (__isset.joinIceTs != rhs.__isset.joinIceTs)
      return false;
    else if (__isset.joinIceTs && !(joinIceTs == rhs.joinIceTs))
      return false;
    if (__isset.startStunTs != rhs.__isset.startStunTs)
      return false;
    else if (__isset.startStunTs && !(startStunTs == rhs.startStunTs))
      return false;
    if (__isset.peerIP != rhs.__isset.peerIP)
      return false;
    else if (__isset.peerIP && !(peerIP == rhs.peerIP))
      return false;
    if (__isset.peerPort != rhs.__isset.peerPort)
      return false;
    else if (__isset.peerPort && !(peerPort == rhs.peerPort))
      return false;
    if (__isset.peerAddr != rhs.__isset.peerAddr)
      return false;
    else if (__isset.peerAddr && !(peerAddr == rhs.peerAddr))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PSuccStun &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PSuccStun & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PSuccStun& obj);
};

void swap(VosdkP2PSuccStun &a, VosdkP2PSuccStun &b);

typedef struct _VosdkP2POpen__isset {
  _VosdkP2POpen__isset() : header(false) {}
  bool header :1;
} _VosdkP2POpen__isset;

class VosdkP2POpen {
 public:

  static const char* ascii_fingerprint; // = "C3D41A67DB60E8E4C8D244D93F311688";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

  VosdkP2POpen(const VosdkP2POpen&);
  VosdkP2POpen& operator=(const VosdkP2POpen&);
  VosdkP2POpen() {
  }

  virtual ~VosdkP2POpen() throw();
  VosdkHeader header;

  _VosdkP2POpen__isset __isset;

  void __set_header(const VosdkHeader& val);

  bool operator == (const VosdkP2POpen & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const VosdkP2POpen &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2POpen & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2POpen& obj);
};

void swap(VosdkP2POpen &a, VosdkP2POpen &b);

typedef struct _VosdkErrorCodeItem__isset {
  _VosdkErrorCodeItem__isset() : lts(false), error(false) {}
  bool lts :1;
  bool error :1;
} _VosdkErrorCodeItem__isset;

class VosdkErrorCodeItem {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  VosdkErrorCodeItem(const VosdkErrorCodeItem&);
  VosdkErrorCodeItem& operator=(const VosdkErrorCodeItem&);
  VosdkErrorCodeItem() : lts(0), error(0) {
  }

  virtual ~VosdkErrorCodeItem() throw();
  int64_t lts;
  int32_t error;

  _VosdkErrorCodeItem__isset __isset;

  void __set_lts(const int64_t val);

  void __set_error(const int32_t val);

  bool operator == (const VosdkErrorCodeItem & rhs) const
  {
    if (!(lts == rhs.lts))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const VosdkErrorCodeItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkErrorCodeItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkErrorCodeItem& obj);
};

void swap(VosdkErrorCodeItem &a, VosdkErrorCodeItem &b);

typedef struct _VosdkErrorCode__isset {
  _VosdkErrorCode__isset() : header(false), errorList(false) {}
  bool header :1;
  bool errorList :1;
} _VosdkErrorCode__isset;

class VosdkErrorCode {
 public:

  static const char* ascii_fingerprint; // = "0A567F187B1C5E4769B7A50908559940";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x56,0x7F,0x18,0x7B,0x1C,0x5E,0x47,0x69,0xB7,0xA5,0x09,0x08,0x55,0x99,0x40};

  VosdkErrorCode(const VosdkErrorCode&);
  VosdkErrorCode& operator=(const VosdkErrorCode&);
  VosdkErrorCode() {
  }

  virtual ~VosdkErrorCode() throw();
  VosdkHeader header;
  std::vector<VosdkErrorCodeItem>  errorList;

  _VosdkErrorCode__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_errorList(const std::vector<VosdkErrorCodeItem> & val);

  bool operator == (const VosdkErrorCode & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.errorList != rhs.__isset.errorList)
      return false;
    else if (__isset.errorList && !(errorList == rhs.errorList))
      return false;
    return true;
  }
  bool operator != (const VosdkErrorCode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkErrorCode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkErrorCode& obj);
};

void swap(VosdkErrorCode &a, VosdkErrorCode &b);

typedef struct _VosdkP2PSwitch__isset {
  _VosdkP2PSwitch__isset() : header(false), status(false), reportTs(false) {}
  bool header :1;
  bool status :1;
  bool reportTs :1;
} _VosdkP2PSwitch__isset;

class VosdkP2PSwitch {
 public:

  static const char* ascii_fingerprint; // = "D229B80A80AEC0825116409206F8CCDD";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x29,0xB8,0x0A,0x80,0xAE,0xC0,0x82,0x51,0x16,0x40,0x92,0x06,0xF8,0xCC,0xDD};

  VosdkP2PSwitch(const VosdkP2PSwitch&);
  VosdkP2PSwitch& operator=(const VosdkP2PSwitch&);
  VosdkP2PSwitch() : status(0), reportTs(0) {
  }

  virtual ~VosdkP2PSwitch() throw();
  VosdkHeader header;
  int16_t status;
  int64_t reportTs;

  _VosdkP2PSwitch__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_status(const int16_t val);

  void __set_reportTs(const int64_t val);

  bool operator == (const VosdkP2PSwitch & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.reportTs != rhs.__isset.reportTs)
      return false;
    else if (__isset.reportTs && !(reportTs == rhs.reportTs))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PSwitch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PSwitch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PSwitch& obj);
};

void swap(VosdkP2PSwitch &a, VosdkP2PSwitch &b);

typedef struct _VosdkP2PStunStat__isset {
  _VosdkP2PStunStat__isset() : header(false), code(false), stunId(false), resource(false), fromId(false), toId(false), sourceIp(false), destIp(false) {}
  bool header :1;
  bool code :1;
  bool stunId :1;
  bool resource :1;
  bool fromId :1;
  bool toId :1;
  bool sourceIp :1;
  bool destIp :1;
} _VosdkP2PStunStat__isset;

class VosdkP2PStunStat {
 public:

  static const char* ascii_fingerprint; // = "6B2B1BCA54513B8C94915386793D1546";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x2B,0x1B,0xCA,0x54,0x51,0x3B,0x8C,0x94,0x91,0x53,0x86,0x79,0x3D,0x15,0x46};

  VosdkP2PStunStat(const VosdkP2PStunStat&);
  VosdkP2PStunStat& operator=(const VosdkP2PStunStat&);
  VosdkP2PStunStat() : code(0), stunId(), resource(), fromId(), toId(), sourceIp(), destIp() {
  }

  virtual ~VosdkP2PStunStat() throw();
  VosdkHeader header;
  int16_t code;
  std::string stunId;
  std::string resource;
  std::string fromId;
  std::string toId;
  std::string sourceIp;
  std::string destIp;

  _VosdkP2PStunStat__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_code(const int16_t val);

  void __set_stunId(const std::string& val);

  void __set_resource(const std::string& val);

  void __set_fromId(const std::string& val);

  void __set_toId(const std::string& val);

  void __set_sourceIp(const std::string& val);

  void __set_destIp(const std::string& val);

  bool operator == (const VosdkP2PStunStat & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.code != rhs.__isset.code)
      return false;
    else if (__isset.code && !(code == rhs.code))
      return false;
    if (__isset.stunId != rhs.__isset.stunId)
      return false;
    else if (__isset.stunId && !(stunId == rhs.stunId))
      return false;
    if (__isset.resource != rhs.__isset.resource)
      return false;
    else if (__isset.resource && !(resource == rhs.resource))
      return false;
    if (__isset.fromId != rhs.__isset.fromId)
      return false;
    else if (__isset.fromId && !(fromId == rhs.fromId))
      return false;
    if (__isset.toId != rhs.__isset.toId)
      return false;
    else if (__isset.toId && !(toId == rhs.toId))
      return false;
    if (__isset.sourceIp != rhs.__isset.sourceIp)
      return false;
    else if (__isset.sourceIp && !(sourceIp == rhs.sourceIp))
      return false;
    if (__isset.destIp != rhs.__isset.destIp)
      return false;
    else if (__isset.destIp && !(destIp == rhs.destIp))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PStunStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PStunStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PStunStat& obj);
};

void swap(VosdkP2PStunStat &a, VosdkP2PStunStat &b);

typedef struct _VosdkNetworkInformation__isset {
  _VosdkNetworkInformation__isset() : header(false), networkType(false), networkSubType(false), localIp(false), ssid(false), bssid(false), siglevel(false), rssi(false) {}
  bool header :1;
  bool networkType :1;
  bool networkSubType :1;
  bool localIp :1;
  bool ssid :1;
  bool bssid :1;
  bool siglevel :1;
  bool rssi :1;
} _VosdkNetworkInformation__isset;

class VosdkNetworkInformation {
 public:

  static const char* ascii_fingerprint; // = "AB342F1233CFEA49CAECD6F6A8E30259";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x34,0x2F,0x12,0x33,0xCF,0xEA,0x49,0xCA,0xEC,0xD6,0xF6,0xA8,0xE3,0x02,0x59};

  VosdkNetworkInformation(const VosdkNetworkInformation&);
  VosdkNetworkInformation& operator=(const VosdkNetworkInformation&);
  VosdkNetworkInformation() : networkType(0), networkSubType(0), localIp(), ssid(), bssid(), siglevel(0), rssi(0) {
  }

  virtual ~VosdkNetworkInformation() throw();
  VosdkHeader header;
  int32_t networkType;
  int32_t networkSubType;
  std::string localIp;
  std::string ssid;
  std::string bssid;
  int32_t siglevel;
  int32_t rssi;

  _VosdkNetworkInformation__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_networkType(const int32_t val);

  void __set_networkSubType(const int32_t val);

  void __set_localIp(const std::string& val);

  void __set_ssid(const std::string& val);

  void __set_bssid(const std::string& val);

  void __set_siglevel(const int32_t val);

  void __set_rssi(const int32_t val);

  bool operator == (const VosdkNetworkInformation & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.networkType != rhs.__isset.networkType)
      return false;
    else if (__isset.networkType && !(networkType == rhs.networkType))
      return false;
    if (__isset.networkSubType != rhs.__isset.networkSubType)
      return false;
    else if (__isset.networkSubType && !(networkSubType == rhs.networkSubType))
      return false;
    if (__isset.localIp != rhs.__isset.localIp)
      return false;
    else if (__isset.localIp && !(localIp == rhs.localIp))
      return false;
    if (__isset.ssid != rhs.__isset.ssid)
      return false;
    else if (__isset.ssid && !(ssid == rhs.ssid))
      return false;
    if (__isset.bssid != rhs.__isset.bssid)
      return false;
    else if (__isset.bssid && !(bssid == rhs.bssid))
      return false;
    if (__isset.siglevel != rhs.__isset.siglevel)
      return false;
    else if (__isset.siglevel && !(siglevel == rhs.siglevel))
      return false;
    if (__isset.rssi != rhs.__isset.rssi)
      return false;
    else if (__isset.rssi && !(rssi == rhs.rssi))
      return false;
    return true;
  }
  bool operator != (const VosdkNetworkInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkNetworkInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkNetworkInformation& obj);
};

void swap(VosdkNetworkInformation &a, VosdkNetworkInformation &b);

typedef struct _VosdkNetOb2__isset {
  _VosdkNetOb2__isset() : header(false), payload(false) {}
  bool header :1;
  bool payload :1;
} _VosdkNetOb2__isset;

class VosdkNetOb2 {
 public:

  static const char* ascii_fingerprint; // = "7643AB8C86D47EFC29C9DADBFB748150";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

  VosdkNetOb2(const VosdkNetOb2&);
  VosdkNetOb2& operator=(const VosdkNetOb2&);
  VosdkNetOb2() : payload() {
  }

  virtual ~VosdkNetOb2() throw();
  VosdkHeader header;
  std::string payload;

  _VosdkNetOb2__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_payload(const std::string& val);

  bool operator == (const VosdkNetOb2 & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const VosdkNetOb2 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkNetOb2 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkNetOb2& obj);
};

void swap(VosdkNetOb2 &a, VosdkNetOb2 &b);

typedef struct _VosdkNetOb3__isset {
  _VosdkNetOb3__isset() : header(false), payload(false) {}
  bool header :1;
  bool payload :1;
} _VosdkNetOb3__isset;

class VosdkNetOb3 {
 public:

  static const char* ascii_fingerprint; // = "E08CB57DFE00075800F6E9302D24319A";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x8C,0xB5,0x7D,0xFE,0x00,0x07,0x58,0x00,0xF6,0xE9,0x30,0x2D,0x24,0x31,0x9A};

  VosdkNetOb3(const VosdkNetOb3&);
  VosdkNetOb3& operator=(const VosdkNetOb3&);
  VosdkNetOb3() {
  }

  virtual ~VosdkNetOb3() throw();
  VosdkHeader header;
  std::vector<int8_t>  payload;

  _VosdkNetOb3__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_payload(const std::vector<int8_t> & val);

  bool operator == (const VosdkNetOb3 & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const VosdkNetOb3 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkNetOb3 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkNetOb3& obj);
};

void swap(VosdkNetOb3 &a, VosdkNetOb3 &b);

typedef struct _VosdkNetOb4__isset {
  _VosdkNetOb4__isset() : header(false), payload(false) {}
  bool header :1;
  bool payload :1;
} _VosdkNetOb4__isset;

class VosdkNetOb4 {
 public:

  static const char* ascii_fingerprint; // = "E08CB57DFE00075800F6E9302D24319A";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x8C,0xB5,0x7D,0xFE,0x00,0x07,0x58,0x00,0xF6,0xE9,0x30,0x2D,0x24,0x31,0x9A};

  VosdkNetOb4(const VosdkNetOb4&);
  VosdkNetOb4& operator=(const VosdkNetOb4&);
  VosdkNetOb4() {
  }

  virtual ~VosdkNetOb4() throw();
  VosdkHeader header;
  std::vector<int8_t>  payload;

  _VosdkNetOb4__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_payload(const std::vector<int8_t> & val);

  bool operator == (const VosdkNetOb4 & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const VosdkNetOb4 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkNetOb4 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkNetOb4& obj);
};

void swap(VosdkNetOb4 &a, VosdkNetOb4 &b);

typedef struct _VosdkViRemoteFrameDecoded__isset {
  _VosdkViRemoteFrameDecoded__isset() : header(false), peerUid(false), height(false), width(false) {}
  bool header :1;
  bool peerUid :1;
  bool height :1;
  bool width :1;
} _VosdkViRemoteFrameDecoded__isset;

class VosdkViRemoteFrameDecoded {
 public:

  static const char* ascii_fingerprint; // = "14217423B7A9C72C02236E56CE9BB46A";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x21,0x74,0x23,0xB7,0xA9,0xC7,0x2C,0x02,0x23,0x6E,0x56,0xCE,0x9B,0xB4,0x6A};

  VosdkViRemoteFrameDecoded(const VosdkViRemoteFrameDecoded&);
  VosdkViRemoteFrameDecoded& operator=(const VosdkViRemoteFrameDecoded&);
  VosdkViRemoteFrameDecoded() : peerUid(0), height(0), width(0) {
  }

  virtual ~VosdkViRemoteFrameDecoded() throw();
  VosdkHeader header;
  int64_t peerUid;
  int32_t height;
  int32_t width;

  _VosdkViRemoteFrameDecoded__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerUid(const int64_t val);

  void __set_height(const int32_t val);

  void __set_width(const int32_t val);

  bool operator == (const VosdkViRemoteFrameDecoded & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerUid != rhs.__isset.peerUid)
      return false;
    else if (__isset.peerUid && !(peerUid == rhs.peerUid))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    return true;
  }
  bool operator != (const VosdkViRemoteFrameDecoded &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkViRemoteFrameDecoded & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkViRemoteFrameDecoded& obj);
};

void swap(VosdkViRemoteFrameDecoded &a, VosdkViRemoteFrameDecoded &b);

typedef struct _VosdkSwitchVideoStream__isset {
  _VosdkSwitchVideoStream__isset() : header(false), eventType(false), expectedStream(false), requestId(false), beginTs(false), endTs(false) {}
  bool header :1;
  bool eventType :1;
  bool expectedStream :1;
  bool requestId :1;
  bool beginTs :1;
  bool endTs :1;
} _VosdkSwitchVideoStream__isset;

class VosdkSwitchVideoStream {
 public:

  static const char* ascii_fingerprint; // = "CB4E8E1529561BFF497250E470DEA940";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0x4E,0x8E,0x15,0x29,0x56,0x1B,0xFF,0x49,0x72,0x50,0xE4,0x70,0xDE,0xA9,0x40};

  VosdkSwitchVideoStream(const VosdkSwitchVideoStream&);
  VosdkSwitchVideoStream& operator=(const VosdkSwitchVideoStream&);
  VosdkSwitchVideoStream() : eventType(0), expectedStream(0), requestId(0), beginTs(0), endTs(0) {
  }

  virtual ~VosdkSwitchVideoStream() throw();
  VosdkHeader header;
  int16_t eventType;
  int16_t expectedStream;
  int32_t requestId;
  int64_t beginTs;
  int64_t endTs;

  _VosdkSwitchVideoStream__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_eventType(const int16_t val);

  void __set_expectedStream(const int16_t val);

  void __set_requestId(const int32_t val);

  void __set_beginTs(const int64_t val);

  void __set_endTs(const int64_t val);

  bool operator == (const VosdkSwitchVideoStream & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.eventType != rhs.__isset.eventType)
      return false;
    else if (__isset.eventType && !(eventType == rhs.eventType))
      return false;
    if (__isset.expectedStream != rhs.__isset.expectedStream)
      return false;
    else if (__isset.expectedStream && !(expectedStream == rhs.expectedStream))
      return false;
    if (__isset.requestId != rhs.__isset.requestId)
      return false;
    else if (__isset.requestId && !(requestId == rhs.requestId))
      return false;
    if (__isset.beginTs != rhs.__isset.beginTs)
      return false;
    else if (__isset.beginTs && !(beginTs == rhs.beginTs))
      return false;
    if (__isset.endTs != rhs.__isset.endTs)
      return false;
    else if (__isset.endTs && !(endTs == rhs.endTs))
      return false;
    return true;
  }
  bool operator != (const VosdkSwitchVideoStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkSwitchVideoStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkSwitchVideoStream& obj);
};

void swap(VosdkSwitchVideoStream &a, VosdkSwitchVideoStream &b);

typedef struct _VosdkLbes__isset {
  _VosdkLbes__isset() : header(false), lbesUri(false), url(false), payload(false), server_code(false), code(false), traceId(false) {}
  bool header :1;
  bool lbesUri :1;
  bool url :1;
  bool payload :1;
  bool server_code :1;
  bool code :1;
  bool traceId :1;
} _VosdkLbes__isset;

class VosdkLbes {
 public:

  static const char* ascii_fingerprint; // = "B6750047E7006D4E1DB98BE81C48688E";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x75,0x00,0x47,0xE7,0x00,0x6D,0x4E,0x1D,0xB9,0x8B,0xE8,0x1C,0x48,0x68,0x8E};

  VosdkLbes(const VosdkLbes&);
  VosdkLbes& operator=(const VosdkLbes&);
  VosdkLbes() : lbesUri(0), url(), payload(), server_code(0), code(0), traceId() {
  }

  virtual ~VosdkLbes() throw();
  VosdkHeader header;
  int16_t lbesUri;
  std::string url;
  std::string payload;
  int16_t server_code;
  int16_t code;
  std::string traceId;

  _VosdkLbes__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_lbesUri(const int16_t val);

  void __set_url(const std::string& val);

  void __set_payload(const std::string& val);

  void __set_server_code(const int16_t val);

  void __set_code(const int16_t val);

  void __set_traceId(const std::string& val);

  bool operator == (const VosdkLbes & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.lbesUri != rhs.__isset.lbesUri)
      return false;
    else if (__isset.lbesUri && !(lbesUri == rhs.lbesUri))
      return false;
    if (__isset.url != rhs.__isset.url)
      return false;
    else if (__isset.url && !(url == rhs.url))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    if (__isset.server_code != rhs.__isset.server_code)
      return false;
    else if (__isset.server_code && !(server_code == rhs.server_code))
      return false;
    if (__isset.code != rhs.__isset.code)
      return false;
    else if (__isset.code && !(code == rhs.code))
      return false;
    if (__isset.traceId != rhs.__isset.traceId)
      return false;
    else if (__isset.traceId && !(traceId == rhs.traceId))
      return false;
    return true;
  }
  bool operator != (const VosdkLbes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkLbes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkLbes& obj);
};

void swap(VosdkLbes &a, VosdkLbes &b);

typedef struct _VosdkMaxVideoPayloadSet__isset {
  _VosdkMaxVideoPayloadSet__isset() : header(false), maxPayload(false) {}
  bool header :1;
  bool maxPayload :1;
} _VosdkMaxVideoPayloadSet__isset;

class VosdkMaxVideoPayloadSet {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkMaxVideoPayloadSet(const VosdkMaxVideoPayloadSet&);
  VosdkMaxVideoPayloadSet& operator=(const VosdkMaxVideoPayloadSet&);
  VosdkMaxVideoPayloadSet() : maxPayload(0) {
  }

  virtual ~VosdkMaxVideoPayloadSet() throw();
  VosdkHeader header;
  int32_t maxPayload;

  _VosdkMaxVideoPayloadSet__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_maxPayload(const int32_t val);

  bool operator == (const VosdkMaxVideoPayloadSet & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.maxPayload != rhs.__isset.maxPayload)
      return false;
    else if (__isset.maxPayload && !(maxPayload == rhs.maxPayload))
      return false;
    return true;
  }
  bool operator != (const VosdkMaxVideoPayloadSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkMaxVideoPayloadSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkMaxVideoPayloadSet& obj);
};

void swap(VosdkMaxVideoPayloadSet &a, VosdkMaxVideoPayloadSet &b);

typedef struct _VosdkFirstAudioPacketSent__isset {
  _VosdkFirstAudioPacketSent__isset() : header(false), codec(false) {}
  bool header :1;
  bool codec :1;
} _VosdkFirstAudioPacketSent__isset;

class VosdkFirstAudioPacketSent {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkFirstAudioPacketSent(const VosdkFirstAudioPacketSent&);
  VosdkFirstAudioPacketSent& operator=(const VosdkFirstAudioPacketSent&);
  VosdkFirstAudioPacketSent() : codec(0) {
  }

  virtual ~VosdkFirstAudioPacketSent() throw();
  VosdkHeader header;
  int32_t codec;

  _VosdkFirstAudioPacketSent__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_codec(const int32_t val);

  bool operator == (const VosdkFirstAudioPacketSent & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.codec != rhs.__isset.codec)
      return false;
    else if (__isset.codec && !(codec == rhs.codec))
      return false;
    return true;
  }
  bool operator != (const VosdkFirstAudioPacketSent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkFirstAudioPacketSent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkFirstAudioPacketSent& obj);
};

void swap(VosdkFirstAudioPacketSent &a, VosdkFirstAudioPacketSent &b);

typedef struct _VosdkFirstAudioPacketReceived__isset {
  _VosdkFirstAudioPacketReceived__isset() : header(false), codec(false) {}
  bool header :1;
  bool codec :1;
} _VosdkFirstAudioPacketReceived__isset;

class VosdkFirstAudioPacketReceived {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkFirstAudioPacketReceived(const VosdkFirstAudioPacketReceived&);
  VosdkFirstAudioPacketReceived& operator=(const VosdkFirstAudioPacketReceived&);
  VosdkFirstAudioPacketReceived() : codec(0) {
  }

  virtual ~VosdkFirstAudioPacketReceived() throw();
  VosdkHeader header;
  int32_t codec;

  _VosdkFirstAudioPacketReceived__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_codec(const int32_t val);

  bool operator == (const VosdkFirstAudioPacketReceived & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.codec != rhs.__isset.codec)
      return false;
    else if (__isset.codec && !(codec == rhs.codec))
      return false;
    return true;
  }
  bool operator != (const VosdkFirstAudioPacketReceived &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkFirstAudioPacketReceived & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkFirstAudioPacketReceived& obj);
};

void swap(VosdkFirstAudioPacketReceived &a, VosdkFirstAudioPacketReceived &b);

typedef struct _VosdkAudioSendingStopped__isset {
  _VosdkAudioSendingStopped__isset() : header(false), reason(false) {}
  bool header :1;
  bool reason :1;
} _VosdkAudioSendingStopped__isset;

class VosdkAudioSendingStopped {
 public:

  static const char* ascii_fingerprint; // = "7643AB8C86D47EFC29C9DADBFB748150";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

  VosdkAudioSendingStopped(const VosdkAudioSendingStopped&);
  VosdkAudioSendingStopped& operator=(const VosdkAudioSendingStopped&);
  VosdkAudioSendingStopped() : reason() {
  }

  virtual ~VosdkAudioSendingStopped() throw();
  VosdkHeader header;
  std::string reason;

  _VosdkAudioSendingStopped__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_reason(const std::string& val);

  bool operator == (const VosdkAudioSendingStopped & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.reason != rhs.__isset.reason)
      return false;
    else if (__isset.reason && !(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const VosdkAudioSendingStopped &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkAudioSendingStopped & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkAudioSendingStopped& obj);
};

void swap(VosdkAudioSendingStopped &a, VosdkAudioSendingStopped &b);

typedef struct _VosdkAudioDisabled__isset {
  _VosdkAudioDisabled__isset() : header(false) {}
  bool header :1;
} _VosdkAudioDisabled__isset;

class VosdkAudioDisabled {
 public:

  static const char* ascii_fingerprint; // = "C3D41A67DB60E8E4C8D244D93F311688";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

  VosdkAudioDisabled(const VosdkAudioDisabled&);
  VosdkAudioDisabled& operator=(const VosdkAudioDisabled&);
  VosdkAudioDisabled() {
  }

  virtual ~VosdkAudioDisabled() throw();
  VosdkHeader header;

  _VosdkAudioDisabled__isset __isset;

  void __set_header(const VosdkHeader& val);

  bool operator == (const VosdkAudioDisabled & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const VosdkAudioDisabled &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkAudioDisabled & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkAudioDisabled& obj);
};

void swap(VosdkAudioDisabled &a, VosdkAudioDisabled &b);

typedef struct _VosdkAudioEnabled__isset {
  _VosdkAudioEnabled__isset() : header(false) {}
  bool header :1;
} _VosdkAudioEnabled__isset;

class VosdkAudioEnabled {
 public:

  static const char* ascii_fingerprint; // = "C3D41A67DB60E8E4C8D244D93F311688";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

  VosdkAudioEnabled(const VosdkAudioEnabled&);
  VosdkAudioEnabled& operator=(const VosdkAudioEnabled&);
  VosdkAudioEnabled() {
  }

  virtual ~VosdkAudioEnabled() throw();
  VosdkHeader header;

  _VosdkAudioEnabled__isset __isset;

  void __set_header(const VosdkHeader& val);

  bool operator == (const VosdkAudioEnabled & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const VosdkAudioEnabled &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkAudioEnabled & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkAudioEnabled& obj);
};

void swap(VosdkAudioEnabled &a, VosdkAudioEnabled &b);

typedef struct _VosdkFirstVideoPacketSent__isset {
  _VosdkFirstVideoPacketSent__isset() : header(false), codec(false) {}
  bool header :1;
  bool codec :1;
} _VosdkFirstVideoPacketSent__isset;

class VosdkFirstVideoPacketSent {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkFirstVideoPacketSent(const VosdkFirstVideoPacketSent&);
  VosdkFirstVideoPacketSent& operator=(const VosdkFirstVideoPacketSent&);
  VosdkFirstVideoPacketSent() : codec(0) {
  }

  virtual ~VosdkFirstVideoPacketSent() throw();
  VosdkHeader header;
  int32_t codec;

  _VosdkFirstVideoPacketSent__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_codec(const int32_t val);

  bool operator == (const VosdkFirstVideoPacketSent & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.codec != rhs.__isset.codec)
      return false;
    else if (__isset.codec && !(codec == rhs.codec))
      return false;
    return true;
  }
  bool operator != (const VosdkFirstVideoPacketSent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkFirstVideoPacketSent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkFirstVideoPacketSent& obj);
};

void swap(VosdkFirstVideoPacketSent &a, VosdkFirstVideoPacketSent &b);

typedef struct _VosdkFirstVideoPacketReceived__isset {
  _VosdkFirstVideoPacketReceived__isset() : header(false), codec(false) {}
  bool header :1;
  bool codec :1;
} _VosdkFirstVideoPacketReceived__isset;

class VosdkFirstVideoPacketReceived {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkFirstVideoPacketReceived(const VosdkFirstVideoPacketReceived&);
  VosdkFirstVideoPacketReceived& operator=(const VosdkFirstVideoPacketReceived&);
  VosdkFirstVideoPacketReceived() : codec(0) {
  }

  virtual ~VosdkFirstVideoPacketReceived() throw();
  VosdkHeader header;
  int32_t codec;

  _VosdkFirstVideoPacketReceived__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_codec(const int32_t val);

  bool operator == (const VosdkFirstVideoPacketReceived & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.codec != rhs.__isset.codec)
      return false;
    else if (__isset.codec && !(codec == rhs.codec))
      return false;
    return true;
  }
  bool operator != (const VosdkFirstVideoPacketReceived &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkFirstVideoPacketReceived & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkFirstVideoPacketReceived& obj);
};

void swap(VosdkFirstVideoPacketReceived &a, VosdkFirstVideoPacketReceived &b);

typedef struct _VosdkFirstVideoFrameDecoded__isset {
  _VosdkFirstVideoFrameDecoded__isset() : header(false), width(false), height(false) {}
  bool header :1;
  bool width :1;
  bool height :1;
} _VosdkFirstVideoFrameDecoded__isset;

class VosdkFirstVideoFrameDecoded {
 public:

  static const char* ascii_fingerprint; // = "C2AA7695D2D8E54277BD0F7525CE4E28";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xAA,0x76,0x95,0xD2,0xD8,0xE5,0x42,0x77,0xBD,0x0F,0x75,0x25,0xCE,0x4E,0x28};

  VosdkFirstVideoFrameDecoded(const VosdkFirstVideoFrameDecoded&);
  VosdkFirstVideoFrameDecoded& operator=(const VosdkFirstVideoFrameDecoded&);
  VosdkFirstVideoFrameDecoded() : width(0), height(0) {
  }

  virtual ~VosdkFirstVideoFrameDecoded() throw();
  VosdkHeader header;
  int32_t width;
  int32_t height;

  _VosdkFirstVideoFrameDecoded__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  bool operator == (const VosdkFirstVideoFrameDecoded & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const VosdkFirstVideoFrameDecoded &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkFirstVideoFrameDecoded & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkFirstVideoFrameDecoded& obj);
};

void swap(VosdkFirstVideoFrameDecoded &a, VosdkFirstVideoFrameDecoded &b);

typedef struct _VosdkFirstVideoFrameDrawed__isset {
  _VosdkFirstVideoFrameDrawed__isset() : header(false), width(false), height(false) {}
  bool header :1;
  bool width :1;
  bool height :1;
} _VosdkFirstVideoFrameDrawed__isset;

class VosdkFirstVideoFrameDrawed {
 public:

  static const char* ascii_fingerprint; // = "C2AA7695D2D8E54277BD0F7525CE4E28";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xAA,0x76,0x95,0xD2,0xD8,0xE5,0x42,0x77,0xBD,0x0F,0x75,0x25,0xCE,0x4E,0x28};

  VosdkFirstVideoFrameDrawed(const VosdkFirstVideoFrameDrawed&);
  VosdkFirstVideoFrameDrawed& operator=(const VosdkFirstVideoFrameDrawed&);
  VosdkFirstVideoFrameDrawed() : width(0), height(0) {
  }

  virtual ~VosdkFirstVideoFrameDrawed() throw();
  VosdkHeader header;
  int32_t width;
  int32_t height;

  _VosdkFirstVideoFrameDrawed__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  bool operator == (const VosdkFirstVideoFrameDrawed & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const VosdkFirstVideoFrameDrawed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkFirstVideoFrameDrawed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkFirstVideoFrameDrawed& obj);
};

void swap(VosdkFirstVideoFrameDrawed &a, VosdkFirstVideoFrameDrawed &b);

typedef struct _VosdkVideoSendingStopped__isset {
  _VosdkVideoSendingStopped__isset() : header(false), reason(false) {}
  bool header :1;
  bool reason :1;
} _VosdkVideoSendingStopped__isset;

class VosdkVideoSendingStopped {
 public:

  static const char* ascii_fingerprint; // = "7643AB8C86D47EFC29C9DADBFB748150";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

  VosdkVideoSendingStopped(const VosdkVideoSendingStopped&);
  VosdkVideoSendingStopped& operator=(const VosdkVideoSendingStopped&);
  VosdkVideoSendingStopped() : reason() {
  }

  virtual ~VosdkVideoSendingStopped() throw();
  VosdkHeader header;
  std::string reason;

  _VosdkVideoSendingStopped__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_reason(const std::string& val);

  bool operator == (const VosdkVideoSendingStopped & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.reason != rhs.__isset.reason)
      return false;
    else if (__isset.reason && !(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const VosdkVideoSendingStopped &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVideoSendingStopped & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVideoSendingStopped& obj);
};

void swap(VosdkVideoSendingStopped &a, VosdkVideoSendingStopped &b);

typedef struct _VosdkVideoDisabled__isset {
  _VosdkVideoDisabled__isset() : header(false) {}
  bool header :1;
} _VosdkVideoDisabled__isset;

class VosdkVideoDisabled {
 public:

  static const char* ascii_fingerprint; // = "C3D41A67DB60E8E4C8D244D93F311688";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

  VosdkVideoDisabled(const VosdkVideoDisabled&);
  VosdkVideoDisabled& operator=(const VosdkVideoDisabled&);
  VosdkVideoDisabled() {
  }

  virtual ~VosdkVideoDisabled() throw();
  VosdkHeader header;

  _VosdkVideoDisabled__isset __isset;

  void __set_header(const VosdkHeader& val);

  bool operator == (const VosdkVideoDisabled & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const VosdkVideoDisabled &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVideoDisabled & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVideoDisabled& obj);
};

void swap(VosdkVideoDisabled &a, VosdkVideoDisabled &b);

typedef struct _VosdkVideoEnabled__isset {
  _VosdkVideoEnabled__isset() : header(false) {}
  bool header :1;
} _VosdkVideoEnabled__isset;

class VosdkVideoEnabled {
 public:

  static const char* ascii_fingerprint; // = "C3D41A67DB60E8E4C8D244D93F311688";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

  VosdkVideoEnabled(const VosdkVideoEnabled&);
  VosdkVideoEnabled& operator=(const VosdkVideoEnabled&);
  VosdkVideoEnabled() {
  }

  virtual ~VosdkVideoEnabled() throw();
  VosdkHeader header;

  _VosdkVideoEnabled__isset __isset;

  void __set_header(const VosdkHeader& val);

  bool operator == (const VosdkVideoEnabled & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const VosdkVideoEnabled &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVideoEnabled & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVideoEnabled& obj);
};

void swap(VosdkVideoEnabled &a, VosdkVideoEnabled &b);

typedef struct _VosdkVideoStreamSelected__isset {
  _VosdkVideoStreamSelected__isset() : header(false), streamType(false) {}
  bool header :1;
  bool streamType :1;
} _VosdkVideoStreamSelected__isset;

class VosdkVideoStreamSelected {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkVideoStreamSelected(const VosdkVideoStreamSelected&);
  VosdkVideoStreamSelected& operator=(const VosdkVideoStreamSelected&);
  VosdkVideoStreamSelected() : streamType(0) {
  }

  virtual ~VosdkVideoStreamSelected() throw();
  VosdkHeader header;
  int32_t streamType;

  _VosdkVideoStreamSelected__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_streamType(const int32_t val);

  bool operator == (const VosdkVideoStreamSelected & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.streamType != rhs.__isset.streamType)
      return false;
    else if (__isset.streamType && !(streamType == rhs.streamType))
      return false;
    return true;
  }
  bool operator != (const VosdkVideoStreamSelected &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVideoStreamSelected & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVideoStreamSelected& obj);
};

void swap(VosdkVideoStreamSelected &a, VosdkVideoStreamSelected &b);

typedef struct _VosdkVideoStreamChangeRequest__isset {
  _VosdkVideoStreamChangeRequest__isset() : header(false), streamType(false) {}
  bool header :1;
  bool streamType :1;
} _VosdkVideoStreamChangeRequest__isset;

class VosdkVideoStreamChangeRequest {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkVideoStreamChangeRequest(const VosdkVideoStreamChangeRequest&);
  VosdkVideoStreamChangeRequest& operator=(const VosdkVideoStreamChangeRequest&);
  VosdkVideoStreamChangeRequest() : streamType(0) {
  }

  virtual ~VosdkVideoStreamChangeRequest() throw();
  VosdkHeader header;
  int32_t streamType;

  _VosdkVideoStreamChangeRequest__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_streamType(const int32_t val);

  bool operator == (const VosdkVideoStreamChangeRequest & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.streamType != rhs.__isset.streamType)
      return false;
    else if (__isset.streamType && !(streamType == rhs.streamType))
      return false;
    return true;
  }
  bool operator != (const VosdkVideoStreamChangeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVideoStreamChangeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVideoStreamChangeRequest& obj);
};

void swap(VosdkVideoStreamChangeRequest &a, VosdkVideoStreamChangeRequest &b);

typedef struct _VosdkFirstDataPacketSent__isset {
  _VosdkFirstDataPacketSent__isset() : header(false), transportType(false) {}
  bool header :1;
  bool transportType :1;
} _VosdkFirstDataPacketSent__isset;

class VosdkFirstDataPacketSent {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkFirstDataPacketSent(const VosdkFirstDataPacketSent&);
  VosdkFirstDataPacketSent& operator=(const VosdkFirstDataPacketSent&);
  VosdkFirstDataPacketSent() : transportType(0) {
  }

  virtual ~VosdkFirstDataPacketSent() throw();
  VosdkHeader header;
  int32_t transportType;

  _VosdkFirstDataPacketSent__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_transportType(const int32_t val);

  bool operator == (const VosdkFirstDataPacketSent & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.transportType != rhs.__isset.transportType)
      return false;
    else if (__isset.transportType && !(transportType == rhs.transportType))
      return false;
    return true;
  }
  bool operator != (const VosdkFirstDataPacketSent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkFirstDataPacketSent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkFirstDataPacketSent& obj);
};

void swap(VosdkFirstDataPacketSent &a, VosdkFirstDataPacketSent &b);

typedef struct _VosdkFirstDataPacketReceived__isset {
  _VosdkFirstDataPacketReceived__isset() : header(false), transportType(false) {}
  bool header :1;
  bool transportType :1;
} _VosdkFirstDataPacketReceived__isset;

class VosdkFirstDataPacketReceived {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkFirstDataPacketReceived(const VosdkFirstDataPacketReceived&);
  VosdkFirstDataPacketReceived& operator=(const VosdkFirstDataPacketReceived&);
  VosdkFirstDataPacketReceived() : transportType(0) {
  }

  virtual ~VosdkFirstDataPacketReceived() throw();
  VosdkHeader header;
  int32_t transportType;

  _VosdkFirstDataPacketReceived__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_transportType(const int32_t val);

  bool operator == (const VosdkFirstDataPacketReceived & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.transportType != rhs.__isset.transportType)
      return false;
    else if (__isset.transportType && !(transportType == rhs.transportType))
      return false;
    return true;
  }
  bool operator != (const VosdkFirstDataPacketReceived &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkFirstDataPacketReceived & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkFirstDataPacketReceived& obj);
};

void swap(VosdkFirstDataPacketReceived &a, VosdkFirstDataPacketReceived &b);

typedef struct _VosdkError__isset {
  _VosdkError__isset() : header(false), errorNo(false), description(false) {}
  bool header :1;
  bool errorNo :1;
  bool description :1;
} _VosdkError__isset;

class VosdkError {
 public:

  static const char* ascii_fingerprint; // = "15CE969B3D2A87224C3746EA3116329C";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xCE,0x96,0x9B,0x3D,0x2A,0x87,0x22,0x4C,0x37,0x46,0xEA,0x31,0x16,0x32,0x9C};

  VosdkError(const VosdkError&);
  VosdkError& operator=(const VosdkError&);
  VosdkError() : errorNo(0), description() {
  }

  virtual ~VosdkError() throw();
  VosdkHeader header;
  int32_t errorNo;
  std::string description;

  _VosdkError__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_errorNo(const int32_t val);

  void __set_description(const std::string& val);

  bool operator == (const VosdkError & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.errorNo != rhs.__isset.errorNo)
      return false;
    else if (__isset.errorNo && !(errorNo == rhs.errorNo))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const VosdkError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkError& obj);
};

void swap(VosdkError &a, VosdkError &b);

typedef struct _VosdkPeerOnlineStatus__isset {
  _VosdkPeerOnlineStatus__isset() : header(false) {}
  bool header :1;
} _VosdkPeerOnlineStatus__isset;

class VosdkPeerOnlineStatus {
 public:

  static const char* ascii_fingerprint; // = "C3D41A67DB60E8E4C8D244D93F311688";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xD4,0x1A,0x67,0xDB,0x60,0xE8,0xE4,0xC8,0xD2,0x44,0xD9,0x3F,0x31,0x16,0x88};

  VosdkPeerOnlineStatus(const VosdkPeerOnlineStatus&);
  VosdkPeerOnlineStatus& operator=(const VosdkPeerOnlineStatus&);
  VosdkPeerOnlineStatus() {
  }

  virtual ~VosdkPeerOnlineStatus() throw();
  VosdkHeader header;

  _VosdkPeerOnlineStatus__isset __isset;

  void __set_header(const VosdkHeader& val);

  bool operator == (const VosdkPeerOnlineStatus & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const VosdkPeerOnlineStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkPeerOnlineStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkPeerOnlineStatus& obj);
};

void swap(VosdkPeerOnlineStatus &a, VosdkPeerOnlineStatus &b);

typedef struct _VosdkPeerOfflineStatus__isset {
  _VosdkPeerOfflineStatus__isset() : header(false), reason(false) {}
  bool header :1;
  bool reason :1;
} _VosdkPeerOfflineStatus__isset;

class VosdkPeerOfflineStatus {
 public:

  static const char* ascii_fingerprint; // = "7643AB8C86D47EFC29C9DADBFB748150";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

  VosdkPeerOfflineStatus(const VosdkPeerOfflineStatus&);
  VosdkPeerOfflineStatus& operator=(const VosdkPeerOfflineStatus&);
  VosdkPeerOfflineStatus() : reason() {
  }

  virtual ~VosdkPeerOfflineStatus() throw();
  VosdkHeader header;
  std::string reason;

  _VosdkPeerOfflineStatus__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_reason(const std::string& val);

  bool operator == (const VosdkPeerOfflineStatus & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.reason != rhs.__isset.reason)
      return false;
    else if (__isset.reason && !(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const VosdkPeerOfflineStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkPeerOfflineStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkPeerOfflineStatus& obj);
};

void swap(VosdkPeerOfflineStatus &a, VosdkPeerOfflineStatus &b);

typedef struct _VosdkAudioMutePeerStatus__isset {
  _VosdkAudioMutePeerStatus__isset() : header(false), muted(false) {}
  bool header :1;
  bool muted :1;
} _VosdkAudioMutePeerStatus__isset;

class VosdkAudioMutePeerStatus {
 public:

  static const char* ascii_fingerprint; // = "B3BD93EBB5756141F0719C1251165BAA";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xBD,0x93,0xEB,0xB5,0x75,0x61,0x41,0xF0,0x71,0x9C,0x12,0x51,0x16,0x5B,0xAA};

  VosdkAudioMutePeerStatus(const VosdkAudioMutePeerStatus&);
  VosdkAudioMutePeerStatus& operator=(const VosdkAudioMutePeerStatus&);
  VosdkAudioMutePeerStatus() : muted(0) {
  }

  virtual ~VosdkAudioMutePeerStatus() throw();
  VosdkHeader header;
  bool muted;

  _VosdkAudioMutePeerStatus__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_muted(const bool val);

  bool operator == (const VosdkAudioMutePeerStatus & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.muted != rhs.__isset.muted)
      return false;
    else if (__isset.muted && !(muted == rhs.muted))
      return false;
    return true;
  }
  bool operator != (const VosdkAudioMutePeerStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkAudioMutePeerStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkAudioMutePeerStatus& obj);
};

void swap(VosdkAudioMutePeerStatus &a, VosdkAudioMutePeerStatus &b);

typedef struct _VosdkVideoMutePeerStatus__isset {
  _VosdkVideoMutePeerStatus__isset() : header(false), muted(false) {}
  bool header :1;
  bool muted :1;
} _VosdkVideoMutePeerStatus__isset;

class VosdkVideoMutePeerStatus {
 public:

  static const char* ascii_fingerprint; // = "B3BD93EBB5756141F0719C1251165BAA";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xBD,0x93,0xEB,0xB5,0x75,0x61,0x41,0xF0,0x71,0x9C,0x12,0x51,0x16,0x5B,0xAA};

  VosdkVideoMutePeerStatus(const VosdkVideoMutePeerStatus&);
  VosdkVideoMutePeerStatus& operator=(const VosdkVideoMutePeerStatus&);
  VosdkVideoMutePeerStatus() : muted(0) {
  }

  virtual ~VosdkVideoMutePeerStatus() throw();
  VosdkHeader header;
  bool muted;

  _VosdkVideoMutePeerStatus__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_muted(const bool val);

  bool operator == (const VosdkVideoMutePeerStatus & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.muted != rhs.__isset.muted)
      return false;
    else if (__isset.muted && !(muted == rhs.muted))
      return false;
    return true;
  }
  bool operator != (const VosdkVideoMutePeerStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVideoMutePeerStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVideoMutePeerStatus& obj);
};

void swap(VosdkVideoMutePeerStatus &a, VosdkVideoMutePeerStatus &b);

typedef struct _VosdkAudioMuteAllStatus__isset {
  _VosdkAudioMuteAllStatus__isset() : header(false), muted(false) {}
  bool header :1;
  bool muted :1;
} _VosdkAudioMuteAllStatus__isset;

class VosdkAudioMuteAllStatus {
 public:

  static const char* ascii_fingerprint; // = "B3BD93EBB5756141F0719C1251165BAA";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xBD,0x93,0xEB,0xB5,0x75,0x61,0x41,0xF0,0x71,0x9C,0x12,0x51,0x16,0x5B,0xAA};

  VosdkAudioMuteAllStatus(const VosdkAudioMuteAllStatus&);
  VosdkAudioMuteAllStatus& operator=(const VosdkAudioMuteAllStatus&);
  VosdkAudioMuteAllStatus() : muted(0) {
  }

  virtual ~VosdkAudioMuteAllStatus() throw();
  VosdkHeader header;
  bool muted;

  _VosdkAudioMuteAllStatus__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_muted(const bool val);

  bool operator == (const VosdkAudioMuteAllStatus & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.muted != rhs.__isset.muted)
      return false;
    else if (__isset.muted && !(muted == rhs.muted))
      return false;
    return true;
  }
  bool operator != (const VosdkAudioMuteAllStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkAudioMuteAllStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkAudioMuteAllStatus& obj);
};

void swap(VosdkAudioMuteAllStatus &a, VosdkAudioMuteAllStatus &b);

typedef struct _VosdkVideoMuteAllStatus__isset {
  _VosdkVideoMuteAllStatus__isset() : header(false), muted(false) {}
  bool header :1;
  bool muted :1;
} _VosdkVideoMuteAllStatus__isset;

class VosdkVideoMuteAllStatus {
 public:

  static const char* ascii_fingerprint; // = "B3BD93EBB5756141F0719C1251165BAA";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xBD,0x93,0xEB,0xB5,0x75,0x61,0x41,0xF0,0x71,0x9C,0x12,0x51,0x16,0x5B,0xAA};

  VosdkVideoMuteAllStatus(const VosdkVideoMuteAllStatus&);
  VosdkVideoMuteAllStatus& operator=(const VosdkVideoMuteAllStatus&);
  VosdkVideoMuteAllStatus() : muted(0) {
  }

  virtual ~VosdkVideoMuteAllStatus() throw();
  VosdkHeader header;
  bool muted;

  _VosdkVideoMuteAllStatus__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_muted(const bool val);

  bool operator == (const VosdkVideoMuteAllStatus & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.muted != rhs.__isset.muted)
      return false;
    else if (__isset.muted && !(muted == rhs.muted))
      return false;
    return true;
  }
  bool operator != (const VosdkVideoMuteAllStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVideoMuteAllStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVideoMuteAllStatus& obj);
};

void swap(VosdkVideoMuteAllStatus &a, VosdkVideoMuteAllStatus &b);

typedef struct _VosdkDefaultPeerStatus__isset {
  _VosdkDefaultPeerStatus__isset() : header(false), streamType(false) {}
  bool header :1;
  bool streamType :1;
} _VosdkDefaultPeerStatus__isset;

class VosdkDefaultPeerStatus {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkDefaultPeerStatus(const VosdkDefaultPeerStatus&);
  VosdkDefaultPeerStatus& operator=(const VosdkDefaultPeerStatus&);
  VosdkDefaultPeerStatus() : streamType(0) {
  }

  virtual ~VosdkDefaultPeerStatus() throw();
  VosdkHeader header;
  int32_t streamType;

  _VosdkDefaultPeerStatus__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_streamType(const int32_t val);

  bool operator == (const VosdkDefaultPeerStatus & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.streamType != rhs.__isset.streamType)
      return false;
    else if (__isset.streamType && !(streamType == rhs.streamType))
      return false;
    return true;
  }
  bool operator != (const VosdkDefaultPeerStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkDefaultPeerStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkDefaultPeerStatus& obj);
};

void swap(VosdkDefaultPeerStatus &a, VosdkDefaultPeerStatus &b);

typedef struct _VosdkP2PStunLoginSuccess__isset {
  _VosdkP2PStunLoginSuccess__isset() : header(false), serverIp(false) {}
  bool header :1;
  bool serverIp :1;
} _VosdkP2PStunLoginSuccess__isset;

class VosdkP2PStunLoginSuccess {
 public:

  static const char* ascii_fingerprint; // = "7643AB8C86D47EFC29C9DADBFB748150";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

  VosdkP2PStunLoginSuccess(const VosdkP2PStunLoginSuccess&);
  VosdkP2PStunLoginSuccess& operator=(const VosdkP2PStunLoginSuccess&);
  VosdkP2PStunLoginSuccess() : serverIp() {
  }

  virtual ~VosdkP2PStunLoginSuccess() throw();
  VosdkHeader header;
  std::string serverIp;

  _VosdkP2PStunLoginSuccess__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_serverIp(const std::string& val);

  bool operator == (const VosdkP2PStunLoginSuccess & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.serverIp != rhs.__isset.serverIp)
      return false;
    else if (__isset.serverIp && !(serverIp == rhs.serverIp))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PStunLoginSuccess &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PStunLoginSuccess & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PStunLoginSuccess& obj);
};

void swap(VosdkP2PStunLoginSuccess &a, VosdkP2PStunLoginSuccess &b);

typedef struct _VosdkP2PStunLoginFailed__isset {
  _VosdkP2PStunLoginFailed__isset() : header(false), serverIp(false), code(false) {}
  bool header :1;
  bool serverIp :1;
  bool code :1;
} _VosdkP2PStunLoginFailed__isset;

class VosdkP2PStunLoginFailed {
 public:

  static const char* ascii_fingerprint; // = "D2E311195234CBA8120BB35E28B5AABC";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0xE3,0x11,0x19,0x52,0x34,0xCB,0xA8,0x12,0x0B,0xB3,0x5E,0x28,0xB5,0xAA,0xBC};

  VosdkP2PStunLoginFailed(const VosdkP2PStunLoginFailed&);
  VosdkP2PStunLoginFailed& operator=(const VosdkP2PStunLoginFailed&);
  VosdkP2PStunLoginFailed() : serverIp(), code(0) {
  }

  virtual ~VosdkP2PStunLoginFailed() throw();
  VosdkHeader header;
  std::string serverIp;
  int32_t code;

  _VosdkP2PStunLoginFailed__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_serverIp(const std::string& val);

  void __set_code(const int32_t val);

  bool operator == (const VosdkP2PStunLoginFailed & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.serverIp != rhs.__isset.serverIp)
      return false;
    else if (__isset.serverIp && !(serverIp == rhs.serverIp))
      return false;
    if (__isset.code != rhs.__isset.code)
      return false;
    else if (__isset.code && !(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PStunLoginFailed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PStunLoginFailed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PStunLoginFailed& obj);
};

void swap(VosdkP2PStunLoginFailed &a, VosdkP2PStunLoginFailed &b);

typedef struct _VosdkP2PPeerTryTouch__isset {
  _VosdkP2PPeerTryTouch__isset() : header(false), peerLanIp(false), peerWanIp(false) {}
  bool header :1;
  bool peerLanIp :1;
  bool peerWanIp :1;
} _VosdkP2PPeerTryTouch__isset;

class VosdkP2PPeerTryTouch {
 public:

  static const char* ascii_fingerprint; // = "2BEC68E12A9BF1F7770FFF5035BFBCAC";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xEC,0x68,0xE1,0x2A,0x9B,0xF1,0xF7,0x77,0x0F,0xFF,0x50,0x35,0xBF,0xBC,0xAC};

  VosdkP2PPeerTryTouch(const VosdkP2PPeerTryTouch&);
  VosdkP2PPeerTryTouch& operator=(const VosdkP2PPeerTryTouch&);
  VosdkP2PPeerTryTouch() : peerLanIp(), peerWanIp() {
  }

  virtual ~VosdkP2PPeerTryTouch() throw();
  VosdkHeader header;
  std::string peerLanIp;
  std::string peerWanIp;

  _VosdkP2PPeerTryTouch__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerLanIp(const std::string& val);

  void __set_peerWanIp(const std::string& val);

  bool operator == (const VosdkP2PPeerTryTouch & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerLanIp != rhs.__isset.peerLanIp)
      return false;
    else if (__isset.peerLanIp && !(peerLanIp == rhs.peerLanIp))
      return false;
    if (__isset.peerWanIp != rhs.__isset.peerWanIp)
      return false;
    else if (__isset.peerWanIp && !(peerWanIp == rhs.peerWanIp))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PPeerTryTouch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PPeerTryTouch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PPeerTryTouch& obj);
};

void swap(VosdkP2PPeerTryTouch &a, VosdkP2PPeerTryTouch &b);

typedef struct _VosdkP2PPeerConnected__isset {
  _VosdkP2PPeerConnected__isset() : header(false), peerIp(false) {}
  bool header :1;
  bool peerIp :1;
} _VosdkP2PPeerConnected__isset;

class VosdkP2PPeerConnected {
 public:

  static const char* ascii_fingerprint; // = "7643AB8C86D47EFC29C9DADBFB748150";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

  VosdkP2PPeerConnected(const VosdkP2PPeerConnected&);
  VosdkP2PPeerConnected& operator=(const VosdkP2PPeerConnected&);
  VosdkP2PPeerConnected() : peerIp() {
  }

  virtual ~VosdkP2PPeerConnected() throw();
  VosdkHeader header;
  std::string peerIp;

  _VosdkP2PPeerConnected__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_peerIp(const std::string& val);

  bool operator == (const VosdkP2PPeerConnected & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.peerIp != rhs.__isset.peerIp)
      return false;
    else if (__isset.peerIp && !(peerIp == rhs.peerIp))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PPeerConnected &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PPeerConnected & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PPeerConnected& obj);
};

void swap(VosdkP2PPeerConnected &a, VosdkP2PPeerConnected &b);

typedef struct _VosdkP2PPeerDisconnected__isset {
  _VosdkP2PPeerDisconnected__isset() : header(false), reason(false) {}
  bool header :1;
  bool reason :1;
} _VosdkP2PPeerDisconnected__isset;

class VosdkP2PPeerDisconnected {
 public:

  static const char* ascii_fingerprint; // = "7643AB8C86D47EFC29C9DADBFB748150";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

  VosdkP2PPeerDisconnected(const VosdkP2PPeerDisconnected&);
  VosdkP2PPeerDisconnected& operator=(const VosdkP2PPeerDisconnected&);
  VosdkP2PPeerDisconnected() : reason() {
  }

  virtual ~VosdkP2PPeerDisconnected() throw();
  VosdkHeader header;
  std::string reason;

  _VosdkP2PPeerDisconnected__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_reason(const std::string& val);

  bool operator == (const VosdkP2PPeerDisconnected & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.reason != rhs.__isset.reason)
      return false;
    else if (__isset.reason && !(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PPeerDisconnected &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PPeerDisconnected & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PPeerDisconnected& obj);
};

void swap(VosdkP2PPeerDisconnected &a, VosdkP2PPeerDisconnected &b);

typedef struct _VosdkP2PStart__isset {
  _VosdkP2PStart__isset() : header(false), threshold(false), label(false) {}
  bool header :1;
  bool threshold :1;
  bool label :1;
} _VosdkP2PStart__isset;

class VosdkP2PStart {
 public:

  static const char* ascii_fingerprint; // = "15CE969B3D2A87224C3746EA3116329C";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xCE,0x96,0x9B,0x3D,0x2A,0x87,0x22,0x4C,0x37,0x46,0xEA,0x31,0x16,0x32,0x9C};

  VosdkP2PStart(const VosdkP2PStart&);
  VosdkP2PStart& operator=(const VosdkP2PStart&);
  VosdkP2PStart() : threshold(0), label() {
  }

  virtual ~VosdkP2PStart() throw();
  VosdkHeader header;
  int32_t threshold;
  std::string label;

  _VosdkP2PStart__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_threshold(const int32_t val);

  void __set_label(const std::string& val);

  bool operator == (const VosdkP2PStart & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.threshold != rhs.__isset.threshold)
      return false;
    else if (__isset.threshold && !(threshold == rhs.threshold))
      return false;
    if (__isset.label != rhs.__isset.label)
      return false;
    else if (__isset.label && !(label == rhs.label))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PStart &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PStart & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PStart& obj);
};

void swap(VosdkP2PStart &a, VosdkP2PStart &b);

typedef struct _VosdkP2PStop__isset {
  _VosdkP2PStop__isset() : header(false), reason(false) {}
  bool header :1;
  bool reason :1;
} _VosdkP2PStop__isset;

class VosdkP2PStop {
 public:

  static const char* ascii_fingerprint; // = "7643AB8C86D47EFC29C9DADBFB748150";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

  VosdkP2PStop(const VosdkP2PStop&);
  VosdkP2PStop& operator=(const VosdkP2PStop&);
  VosdkP2PStop() : reason() {
  }

  virtual ~VosdkP2PStop() throw();
  VosdkHeader header;
  std::string reason;

  _VosdkP2PStop__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_reason(const std::string& val);

  bool operator == (const VosdkP2PStop & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.reason != rhs.__isset.reason)
      return false;
    else if (__isset.reason && !(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const VosdkP2PStop &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkP2PStop & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkP2PStop& obj);
};

void swap(VosdkP2PStop &a, VosdkP2PStop &b);

typedef struct _VosdkAPEvent__isset {
  _VosdkAPEvent__isset() : header(false), ec(false), sc(false), serverIp(false), firstSuccess(false), responseTime(false), serverIpList(false), ssid(false), bssid(false), localWanIp(false), ispName(false), minorIsp(false), flag(false), serviceName(false), detail(false) {}
  bool header :1;
  bool ec :1;
  bool sc :1;
  bool serverIp :1;
  bool firstSuccess :1;
  bool responseTime :1;
  bool serverIpList :1;
  bool ssid :1;
  bool bssid :1;
  bool localWanIp :1;
  bool ispName :1;
  bool minorIsp :1;
  bool flag :1;
  bool serviceName :1;
  bool detail :1;
} _VosdkAPEvent__isset;

class VosdkAPEvent {
 public:

  static const char* ascii_fingerprint; // = "B452357AC7CDE8A202B7F59D3834ADB2";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0x52,0x35,0x7A,0xC7,0xCD,0xE8,0xA2,0x02,0xB7,0xF5,0x9D,0x38,0x34,0xAD,0xB2};

  VosdkAPEvent(const VosdkAPEvent&);
  VosdkAPEvent& operator=(const VosdkAPEvent&);
  VosdkAPEvent() : ec(0), sc(0), serverIp(), firstSuccess(0), responseTime(0), ssid(), bssid(), localWanIp(), ispName(), minorIsp(0), flag(0), serviceName(), detail() {
  }

  virtual ~VosdkAPEvent() throw();
  VosdkHeader header;
  int32_t ec;
  int32_t sc;
  std::string serverIp;
  bool firstSuccess;
  int32_t responseTime;
  std::vector<std::string>  serverIpList;
  std::string ssid;
  std::string bssid;
  std::string localWanIp;
  std::string ispName;
  bool minorIsp;
  int32_t flag;
  std::string serviceName;
  std::string detail;

  _VosdkAPEvent__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_ec(const int32_t val);

  void __set_sc(const int32_t val);

  void __set_serverIp(const std::string& val);

  void __set_firstSuccess(const bool val);

  void __set_responseTime(const int32_t val);

  void __set_serverIpList(const std::vector<std::string> & val);

  void __set_ssid(const std::string& val);

  void __set_bssid(const std::string& val);

  void __set_localWanIp(const std::string& val);

  void __set_ispName(const std::string& val);

  void __set_minorIsp(const bool val);

  void __set_flag(const int32_t val);

  void __set_serviceName(const std::string& val);

  void __set_detail(const std::string& val);

  bool operator == (const VosdkAPEvent & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.ec != rhs.__isset.ec)
      return false;
    else if (__isset.ec && !(ec == rhs.ec))
      return false;
    if (__isset.sc != rhs.__isset.sc)
      return false;
    else if (__isset.sc && !(sc == rhs.sc))
      return false;
    if (__isset.serverIp != rhs.__isset.serverIp)
      return false;
    else if (__isset.serverIp && !(serverIp == rhs.serverIp))
      return false;
    if (__isset.firstSuccess != rhs.__isset.firstSuccess)
      return false;
    else if (__isset.firstSuccess && !(firstSuccess == rhs.firstSuccess))
      return false;
    if (__isset.responseTime != rhs.__isset.responseTime)
      return false;
    else if (__isset.responseTime && !(responseTime == rhs.responseTime))
      return false;
    if (__isset.serverIpList != rhs.__isset.serverIpList)
      return false;
    else if (__isset.serverIpList && !(serverIpList == rhs.serverIpList))
      return false;
    if (__isset.ssid != rhs.__isset.ssid)
      return false;
    else if (__isset.ssid && !(ssid == rhs.ssid))
      return false;
    if (__isset.bssid != rhs.__isset.bssid)
      return false;
    else if (__isset.bssid && !(bssid == rhs.bssid))
      return false;
    if (__isset.localWanIp != rhs.__isset.localWanIp)
      return false;
    else if (__isset.localWanIp && !(localWanIp == rhs.localWanIp))
      return false;
    if (__isset.ispName != rhs.__isset.ispName)
      return false;
    else if (__isset.ispName && !(ispName == rhs.ispName))
      return false;
    if (__isset.minorIsp != rhs.__isset.minorIsp)
      return false;
    else if (__isset.minorIsp && !(minorIsp == rhs.minorIsp))
      return false;
    if (__isset.flag != rhs.__isset.flag)
      return false;
    else if (__isset.flag && !(flag == rhs.flag))
      return false;
    if (__isset.serviceName != rhs.__isset.serviceName)
      return false;
    else if (__isset.serviceName && !(serviceName == rhs.serviceName))
      return false;
    if (__isset.detail != rhs.__isset.detail)
      return false;
    else if (__isset.detail && !(detail == rhs.detail))
      return false;
    return true;
  }
  bool operator != (const VosdkAPEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkAPEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkAPEvent& obj);
};

void swap(VosdkAPEvent &a, VosdkAPEvent &b);

typedef struct _VosdkReportStats__isset {
  _VosdkReportStats__isset() : header(false), allTotalTxPackets(false), allTotalAckedPackets(false), allValidTxPackets(false), allValidAckedPackets(false), counterTotalTxPackets(false), counterTotalAckedPackets(false), counterValidTxPackets(false), counterValidAckedPackets(false), eventTotalTxPackets(false), eventTotalAckedPackets(false), eventValidTxPackets(false), eventValidAckedPackets(false) {}
  bool header :1;
  bool allTotalTxPackets :1;
  bool allTotalAckedPackets :1;
  bool allValidTxPackets :1;
  bool allValidAckedPackets :1;
  bool counterTotalTxPackets :1;
  bool counterTotalAckedPackets :1;
  bool counterValidTxPackets :1;
  bool counterValidAckedPackets :1;
  bool eventTotalTxPackets :1;
  bool eventTotalAckedPackets :1;
  bool eventValidTxPackets :1;
  bool eventValidAckedPackets :1;
} _VosdkReportStats__isset;

class VosdkReportStats {
 public:

  static const char* ascii_fingerprint; // = "ABF92FD3B730451771F74CCD70BE0A28";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0xF9,0x2F,0xD3,0xB7,0x30,0x45,0x17,0x71,0xF7,0x4C,0xCD,0x70,0xBE,0x0A,0x28};

  VosdkReportStats(const VosdkReportStats&);
  VosdkReportStats& operator=(const VosdkReportStats&);
  VosdkReportStats() : allTotalTxPackets(0), allTotalAckedPackets(0), allValidTxPackets(0), allValidAckedPackets(0), counterTotalTxPackets(0), counterTotalAckedPackets(0), counterValidTxPackets(0), counterValidAckedPackets(0), eventTotalTxPackets(0), eventTotalAckedPackets(0), eventValidTxPackets(0), eventValidAckedPackets(0) {
  }

  virtual ~VosdkReportStats() throw();
  VosdkHeader header;
  int32_t allTotalTxPackets;
  int32_t allTotalAckedPackets;
  int32_t allValidTxPackets;
  int32_t allValidAckedPackets;
  int32_t counterTotalTxPackets;
  int32_t counterTotalAckedPackets;
  int32_t counterValidTxPackets;
  int32_t counterValidAckedPackets;
  int32_t eventTotalTxPackets;
  int32_t eventTotalAckedPackets;
  int32_t eventValidTxPackets;
  int32_t eventValidAckedPackets;

  _VosdkReportStats__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_allTotalTxPackets(const int32_t val);

  void __set_allTotalAckedPackets(const int32_t val);

  void __set_allValidTxPackets(const int32_t val);

  void __set_allValidAckedPackets(const int32_t val);

  void __set_counterTotalTxPackets(const int32_t val);

  void __set_counterTotalAckedPackets(const int32_t val);

  void __set_counterValidTxPackets(const int32_t val);

  void __set_counterValidAckedPackets(const int32_t val);

  void __set_eventTotalTxPackets(const int32_t val);

  void __set_eventTotalAckedPackets(const int32_t val);

  void __set_eventValidTxPackets(const int32_t val);

  void __set_eventValidAckedPackets(const int32_t val);

  bool operator == (const VosdkReportStats & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.allTotalTxPackets != rhs.__isset.allTotalTxPackets)
      return false;
    else if (__isset.allTotalTxPackets && !(allTotalTxPackets == rhs.allTotalTxPackets))
      return false;
    if (__isset.allTotalAckedPackets != rhs.__isset.allTotalAckedPackets)
      return false;
    else if (__isset.allTotalAckedPackets && !(allTotalAckedPackets == rhs.allTotalAckedPackets))
      return false;
    if (__isset.allValidTxPackets != rhs.__isset.allValidTxPackets)
      return false;
    else if (__isset.allValidTxPackets && !(allValidTxPackets == rhs.allValidTxPackets))
      return false;
    if (__isset.allValidAckedPackets != rhs.__isset.allValidAckedPackets)
      return false;
    else if (__isset.allValidAckedPackets && !(allValidAckedPackets == rhs.allValidAckedPackets))
      return false;
    if (__isset.counterTotalTxPackets != rhs.__isset.counterTotalTxPackets)
      return false;
    else if (__isset.counterTotalTxPackets && !(counterTotalTxPackets == rhs.counterTotalTxPackets))
      return false;
    if (__isset.counterTotalAckedPackets != rhs.__isset.counterTotalAckedPackets)
      return false;
    else if (__isset.counterTotalAckedPackets && !(counterTotalAckedPackets == rhs.counterTotalAckedPackets))
      return false;
    if (__isset.counterValidTxPackets != rhs.__isset.counterValidTxPackets)
      return false;
    else if (__isset.counterValidTxPackets && !(counterValidTxPackets == rhs.counterValidTxPackets))
      return false;
    if (__isset.counterValidAckedPackets != rhs.__isset.counterValidAckedPackets)
      return false;
    else if (__isset.counterValidAckedPackets && !(counterValidAckedPackets == rhs.counterValidAckedPackets))
      return false;
    if (__isset.eventTotalTxPackets != rhs.__isset.eventTotalTxPackets)
      return false;
    else if (__isset.eventTotalTxPackets && !(eventTotalTxPackets == rhs.eventTotalTxPackets))
      return false;
    if (__isset.eventTotalAckedPackets != rhs.__isset.eventTotalAckedPackets)
      return false;
    else if (__isset.eventTotalAckedPackets && !(eventTotalAckedPackets == rhs.eventTotalAckedPackets))
      return false;
    if (__isset.eventValidTxPackets != rhs.__isset.eventValidTxPackets)
      return false;
    else if (__isset.eventValidTxPackets && !(eventValidTxPackets == rhs.eventValidTxPackets))
      return false;
    if (__isset.eventValidAckedPackets != rhs.__isset.eventValidAckedPackets)
      return false;
    else if (__isset.eventValidAckedPackets && !(eventValidAckedPackets == rhs.eventValidAckedPackets))
      return false;
    return true;
  }
  bool operator != (const VosdkReportStats &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkReportStats & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkReportStats& obj);
};

void swap(VosdkReportStats &a, VosdkReportStats &b);

typedef struct _VosdkAPWorkerEvent__isset {
  _VosdkAPWorkerEvent__isset() : header(false), ec(false), sc(false), serverIp(false), firstSuccess(false), responseTime(false), serviceName(false), response_detail(false) {}
  bool header :1;
  bool ec :1;
  bool sc :1;
  bool serverIp :1;
  bool firstSuccess :1;
  bool responseTime :1;
  bool serviceName :1;
  bool response_detail :1;
} _VosdkAPWorkerEvent__isset;

class VosdkAPWorkerEvent {
 public:

  static const char* ascii_fingerprint; // = "99BB1803454B3EDE451655A132F32062";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0xBB,0x18,0x03,0x45,0x4B,0x3E,0xDE,0x45,0x16,0x55,0xA1,0x32,0xF3,0x20,0x62};

  VosdkAPWorkerEvent(const VosdkAPWorkerEvent&);
  VosdkAPWorkerEvent& operator=(const VosdkAPWorkerEvent&);
  VosdkAPWorkerEvent() : ec(0), sc(0), serverIp(), firstSuccess(0), responseTime(0), serviceName(), response_detail() {
  }

  virtual ~VosdkAPWorkerEvent() throw();
  VosdkHeader header;
  int32_t ec;
  int32_t sc;
  std::string serverIp;
  bool firstSuccess;
  int32_t responseTime;
  std::string serviceName;
  std::string response_detail;

  _VosdkAPWorkerEvent__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_ec(const int32_t val);

  void __set_sc(const int32_t val);

  void __set_serverIp(const std::string& val);

  void __set_firstSuccess(const bool val);

  void __set_responseTime(const int32_t val);

  void __set_serviceName(const std::string& val);

  void __set_response_detail(const std::string& val);

  bool operator == (const VosdkAPWorkerEvent & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.ec != rhs.__isset.ec)
      return false;
    else if (__isset.ec && !(ec == rhs.ec))
      return false;
    if (__isset.sc != rhs.__isset.sc)
      return false;
    else if (__isset.sc && !(sc == rhs.sc))
      return false;
    if (__isset.serverIp != rhs.__isset.serverIp)
      return false;
    else if (__isset.serverIp && !(serverIp == rhs.serverIp))
      return false;
    if (__isset.firstSuccess != rhs.__isset.firstSuccess)
      return false;
    else if (__isset.firstSuccess && !(firstSuccess == rhs.firstSuccess))
      return false;
    if (__isset.responseTime != rhs.__isset.responseTime)
      return false;
    else if (__isset.responseTime && !(responseTime == rhs.responseTime))
      return false;
    if (__isset.serviceName != rhs.__isset.serviceName)
      return false;
    else if (__isset.serviceName && !(serviceName == rhs.serviceName))
      return false;
    if (__isset.response_detail != rhs.__isset.response_detail)
      return false;
    else if (__isset.response_detail && !(response_detail == rhs.response_detail))
      return false;
    return true;
  }
  bool operator != (const VosdkAPWorkerEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkAPWorkerEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkAPWorkerEvent& obj);
};

void swap(VosdkAPWorkerEvent &a, VosdkAPWorkerEvent &b);

typedef struct _VosdkWorkerEvent__isset {
  _VosdkWorkerEvent__isset() : header(false), command(false), actionType(false), url(false), payload(false), server_code(false), code(false), traceId(false), workerType(false), responseTime(false) {}
  bool header :1;
  bool command :1;
  bool actionType :1;
  bool url :1;
  bool payload :1;
  bool server_code :1;
  bool code :1;
  bool traceId :1;
  bool workerType :1;
  bool responseTime :1;
} _VosdkWorkerEvent__isset;

class VosdkWorkerEvent {
 public:

  static const char* ascii_fingerprint; // = "FAC1BFCE3B7472B4F8294842198468C2";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0xC1,0xBF,0xCE,0x3B,0x74,0x72,0xB4,0xF8,0x29,0x48,0x42,0x19,0x84,0x68,0xC2};

  VosdkWorkerEvent(const VosdkWorkerEvent&);
  VosdkWorkerEvent& operator=(const VosdkWorkerEvent&);
  VosdkWorkerEvent() : command(), actionType(), url(), payload(), server_code(0), code(0), traceId(), workerType(0), responseTime(0) {
  }

  virtual ~VosdkWorkerEvent() throw();
  VosdkHeader header;
  std::string command;
  std::string actionType;
  std::string url;
  std::string payload;
  int16_t server_code;
  int16_t code;
  std::string traceId;
  int32_t workerType;
  int32_t responseTime;

  _VosdkWorkerEvent__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_command(const std::string& val);

  void __set_actionType(const std::string& val);

  void __set_url(const std::string& val);

  void __set_payload(const std::string& val);

  void __set_server_code(const int16_t val);

  void __set_code(const int16_t val);

  void __set_traceId(const std::string& val);

  void __set_workerType(const int32_t val);

  void __set_responseTime(const int32_t val);

  bool operator == (const VosdkWorkerEvent & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.command != rhs.__isset.command)
      return false;
    else if (__isset.command && !(command == rhs.command))
      return false;
    if (__isset.actionType != rhs.__isset.actionType)
      return false;
    else if (__isset.actionType && !(actionType == rhs.actionType))
      return false;
    if (__isset.url != rhs.__isset.url)
      return false;
    else if (__isset.url && !(url == rhs.url))
      return false;
    if (__isset.payload != rhs.__isset.payload)
      return false;
    else if (__isset.payload && !(payload == rhs.payload))
      return false;
    if (__isset.server_code != rhs.__isset.server_code)
      return false;
    else if (__isset.server_code && !(server_code == rhs.server_code))
      return false;
    if (__isset.code != rhs.__isset.code)
      return false;
    else if (__isset.code && !(code == rhs.code))
      return false;
    if (__isset.traceId != rhs.__isset.traceId)
      return false;
    else if (__isset.traceId && !(traceId == rhs.traceId))
      return false;
    if (__isset.workerType != rhs.__isset.workerType)
      return false;
    else if (__isset.workerType && !(workerType == rhs.workerType))
      return false;
    if (__isset.responseTime != rhs.__isset.responseTime)
      return false;
    else if (__isset.responseTime && !(responseTime == rhs.responseTime))
      return false;
    return true;
  }
  bool operator != (const VosdkWorkerEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkWorkerEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkWorkerEvent& obj);
};

void swap(VosdkWorkerEvent &a, VosdkWorkerEvent &b);

typedef struct _VosdkRecordingMixModeProperty__isset {
  _VosdkRecordingMixModeProperty__isset() : mixMode(false), mixedVidoAudioMode(false), mixHigh(false), mixLow(false), mixFps(false), mixKbps(false) {}
  bool mixMode :1;
  bool mixedVidoAudioMode :1;
  bool mixHigh :1;
  bool mixLow :1;
  bool mixFps :1;
  bool mixKbps :1;
} _VosdkRecordingMixModeProperty__isset;

class VosdkRecordingMixModeProperty {
 public:

  static const char* ascii_fingerprint; // = "0A21D6AC28EEC7BFEF4DDBEDE474C4B2";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x21,0xD6,0xAC,0x28,0xEE,0xC7,0xBF,0xEF,0x4D,0xDB,0xED,0xE4,0x74,0xC4,0xB2};

  VosdkRecordingMixModeProperty(const VosdkRecordingMixModeProperty&);
  VosdkRecordingMixModeProperty& operator=(const VosdkRecordingMixModeProperty&);
  VosdkRecordingMixModeProperty() : mixMode(0), mixedVidoAudioMode(0), mixHigh(0), mixLow(0), mixFps(0), mixKbps(0) {
  }

  virtual ~VosdkRecordingMixModeProperty() throw();
  bool mixMode;
  bool mixedVidoAudioMode;
  int32_t mixHigh;
  int32_t mixLow;
  int32_t mixFps;
  int32_t mixKbps;

  _VosdkRecordingMixModeProperty__isset __isset;

  void __set_mixMode(const bool val);

  void __set_mixedVidoAudioMode(const bool val);

  void __set_mixHigh(const int32_t val);

  void __set_mixLow(const int32_t val);

  void __set_mixFps(const int32_t val);

  void __set_mixKbps(const int32_t val);

  bool operator == (const VosdkRecordingMixModeProperty & rhs) const
  {
    if (!(mixMode == rhs.mixMode))
      return false;
    if (!(mixedVidoAudioMode == rhs.mixedVidoAudioMode))
      return false;
    if (!(mixHigh == rhs.mixHigh))
      return false;
    if (!(mixLow == rhs.mixLow))
      return false;
    if (!(mixFps == rhs.mixFps))
      return false;
    if (!(mixKbps == rhs.mixKbps))
      return false;
    return true;
  }
  bool operator != (const VosdkRecordingMixModeProperty &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkRecordingMixModeProperty & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkRecordingMixModeProperty& obj);
};

void swap(VosdkRecordingMixModeProperty &a, VosdkRecordingMixModeProperty &b);

typedef struct _VosdkRecordingJoin__isset {
  _VosdkRecordingJoin__isset() : header(false), property(false), minUdpPort(false), maxUdpPort(false), decodeAudioType(false), decodeVideoType(false), liveMode(false), idle(false), audioOnly(false), videoOnly(false), syslogFacility(false), streamType(false), triggerMode(false), language(false), res15Fields(false) {}
  bool header :1;
  bool property :1;
  bool minUdpPort :1;
  bool maxUdpPort :1;
  bool decodeAudioType :1;
  bool decodeVideoType :1;
  bool liveMode :1;
  bool idle :1;
  bool audioOnly :1;
  bool videoOnly :1;
  bool syslogFacility :1;
  bool streamType :1;
  bool triggerMode :1;
  bool language :1;
  bool res15Fields :1;
} _VosdkRecordingJoin__isset;

class VosdkRecordingJoin {
 public:

  static const char* ascii_fingerprint; // = "C9BD5F63C738BA6357E8F6DA6F3C7F5A";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0xBD,0x5F,0x63,0xC7,0x38,0xBA,0x63,0x57,0xE8,0xF6,0xDA,0x6F,0x3C,0x7F,0x5A};

  VosdkRecordingJoin(const VosdkRecordingJoin&);
  VosdkRecordingJoin& operator=(const VosdkRecordingJoin&);
  VosdkRecordingJoin() : minUdpPort(0), maxUdpPort(0), decodeAudioType(0), decodeVideoType(0), liveMode(0), idle(0), audioOnly(0), videoOnly(0), syslogFacility(0), streamType(0), triggerMode(0), language(0) {
  }

  virtual ~VosdkRecordingJoin() throw();
  VosdkHeader header;
  VosdkRecordingMixModeProperty property;
  int32_t minUdpPort;
  int32_t maxUdpPort;
  int32_t decodeAudioType;
  int32_t decodeVideoType;
  int32_t liveMode;
  int64_t idle;
  int32_t audioOnly;
  int32_t videoOnly;
  int32_t syslogFacility;
  int32_t streamType;
  int32_t triggerMode;
  int32_t language;
  std::map<std::string, int64_t>  res15Fields;

  _VosdkRecordingJoin__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_property(const VosdkRecordingMixModeProperty& val);

  void __set_minUdpPort(const int32_t val);

  void __set_maxUdpPort(const int32_t val);

  void __set_decodeAudioType(const int32_t val);

  void __set_decodeVideoType(const int32_t val);

  void __set_liveMode(const int32_t val);

  void __set_idle(const int64_t val);

  void __set_audioOnly(const int32_t val);

  void __set_videoOnly(const int32_t val);

  void __set_syslogFacility(const int32_t val);

  void __set_streamType(const int32_t val);

  void __set_triggerMode(const int32_t val);

  void __set_language(const int32_t val);

  void __set_res15Fields(const std::map<std::string, int64_t> & val);

  bool operator == (const VosdkRecordingJoin & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.property != rhs.__isset.property)
      return false;
    else if (__isset.property && !(property == rhs.property))
      return false;
    if (__isset.minUdpPort != rhs.__isset.minUdpPort)
      return false;
    else if (__isset.minUdpPort && !(minUdpPort == rhs.minUdpPort))
      return false;
    if (__isset.maxUdpPort != rhs.__isset.maxUdpPort)
      return false;
    else if (__isset.maxUdpPort && !(maxUdpPort == rhs.maxUdpPort))
      return false;
    if (__isset.decodeAudioType != rhs.__isset.decodeAudioType)
      return false;
    else if (__isset.decodeAudioType && !(decodeAudioType == rhs.decodeAudioType))
      return false;
    if (__isset.decodeVideoType != rhs.__isset.decodeVideoType)
      return false;
    else if (__isset.decodeVideoType && !(decodeVideoType == rhs.decodeVideoType))
      return false;
    if (__isset.liveMode != rhs.__isset.liveMode)
      return false;
    else if (__isset.liveMode && !(liveMode == rhs.liveMode))
      return false;
    if (__isset.idle != rhs.__isset.idle)
      return false;
    else if (__isset.idle && !(idle == rhs.idle))
      return false;
    if (__isset.audioOnly != rhs.__isset.audioOnly)
      return false;
    else if (__isset.audioOnly && !(audioOnly == rhs.audioOnly))
      return false;
    if (__isset.videoOnly != rhs.__isset.videoOnly)
      return false;
    else if (__isset.videoOnly && !(videoOnly == rhs.videoOnly))
      return false;
    if (__isset.syslogFacility != rhs.__isset.syslogFacility)
      return false;
    else if (__isset.syslogFacility && !(syslogFacility == rhs.syslogFacility))
      return false;
    if (__isset.streamType != rhs.__isset.streamType)
      return false;
    else if (__isset.streamType && !(streamType == rhs.streamType))
      return false;
    if (__isset.triggerMode != rhs.__isset.triggerMode)
      return false;
    else if (__isset.triggerMode && !(triggerMode == rhs.triggerMode))
      return false;
    if (__isset.language != rhs.__isset.language)
      return false;
    else if (__isset.language && !(language == rhs.language))
      return false;
    if (__isset.res15Fields != rhs.__isset.res15Fields)
      return false;
    else if (__isset.res15Fields && !(res15Fields == rhs.res15Fields))
      return false;
    return true;
  }
  bool operator != (const VosdkRecordingJoin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkRecordingJoin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkRecordingJoin& obj);
};

void swap(VosdkRecordingJoin &a, VosdkRecordingJoin &b);

typedef struct _VosdkRecordingLeave__isset {
  _VosdkRecordingLeave__isset() : header(false), leavePathCode(false), res5Fields(false) {}
  bool header :1;
  bool leavePathCode :1;
  bool res5Fields :1;
} _VosdkRecordingLeave__isset;

class VosdkRecordingLeave {
 public:

  static const char* ascii_fingerprint; // = "CC47B1526561BE6C1DF664669FF88CFD";
  static const uint8_t binary_fingerprint[16]; // = {0xCC,0x47,0xB1,0x52,0x65,0x61,0xBE,0x6C,0x1D,0xF6,0x64,0x66,0x9F,0xF8,0x8C,0xFD};

  VosdkRecordingLeave(const VosdkRecordingLeave&);
  VosdkRecordingLeave& operator=(const VosdkRecordingLeave&);
  VosdkRecordingLeave() : leavePathCode(0) {
  }

  virtual ~VosdkRecordingLeave() throw();
  VosdkHeader header;
  int32_t leavePathCode;
  std::map<std::string, int64_t>  res5Fields;

  _VosdkRecordingLeave__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_leavePathCode(const int32_t val);

  void __set_res5Fields(const std::map<std::string, int64_t> & val);

  bool operator == (const VosdkRecordingLeave & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.leavePathCode != rhs.__isset.leavePathCode)
      return false;
    else if (__isset.leavePathCode && !(leavePathCode == rhs.leavePathCode))
      return false;
    if (__isset.res5Fields != rhs.__isset.res5Fields)
      return false;
    else if (__isset.res5Fields && !(res5Fields == rhs.res5Fields))
      return false;
    return true;
  }
  bool operator != (const VosdkRecordingLeave &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkRecordingLeave & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkRecordingLeave& obj);
};

void swap(VosdkRecordingLeave &a, VosdkRecordingLeave &b);

typedef struct _VosdkPrivilegeExpireInfo__isset {
  _VosdkPrivilegeExpireInfo__isset() : privilege(false), remainingTime(false), expireTs(false) {}
  bool privilege :1;
  bool remainingTime :1;
  bool expireTs :1;
} _VosdkPrivilegeExpireInfo__isset;

class VosdkPrivilegeExpireInfo {
 public:

  static const char* ascii_fingerprint; // = "08363EEF15F06CD3121D092993D5DC4E";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0x36,0x3E,0xEF,0x15,0xF0,0x6C,0xD3,0x12,0x1D,0x09,0x29,0x93,0xD5,0xDC,0x4E};

  VosdkPrivilegeExpireInfo(const VosdkPrivilegeExpireInfo&);
  VosdkPrivilegeExpireInfo& operator=(const VosdkPrivilegeExpireInfo&);
  VosdkPrivilegeExpireInfo() : privilege(0), remainingTime(0), expireTs(0) {
  }

  virtual ~VosdkPrivilegeExpireInfo() throw();
  int32_t privilege;
  int32_t remainingTime;
  int64_t expireTs;

  _VosdkPrivilegeExpireInfo__isset __isset;

  void __set_privilege(const int32_t val);

  void __set_remainingTime(const int32_t val);

  void __set_expireTs(const int64_t val);

  bool operator == (const VosdkPrivilegeExpireInfo & rhs) const
  {
    if (__isset.privilege != rhs.__isset.privilege)
      return false;
    else if (__isset.privilege && !(privilege == rhs.privilege))
      return false;
    if (__isset.remainingTime != rhs.__isset.remainingTime)
      return false;
    else if (__isset.remainingTime && !(remainingTime == rhs.remainingTime))
      return false;
    if (__isset.expireTs != rhs.__isset.expireTs)
      return false;
    else if (__isset.expireTs && !(expireTs == rhs.expireTs))
      return false;
    return true;
  }
  bool operator != (const VosdkPrivilegeExpireInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkPrivilegeExpireInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkPrivilegeExpireInfo& obj);
};

void swap(VosdkPrivilegeExpireInfo &a, VosdkPrivilegeExpireInfo &b);

typedef struct _VosdkPrivilegeWillExpire__isset {
  _VosdkPrivilegeWillExpire__isset() : header(false), token(false), privilegeExpireInfos(false) {}
  bool header :1;
  bool token :1;
  bool privilegeExpireInfos :1;
} _VosdkPrivilegeWillExpire__isset;

class VosdkPrivilegeWillExpire {
 public:

  static const char* ascii_fingerprint; // = "88376B451FC1606C0DE949956545AA17";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0x37,0x6B,0x45,0x1F,0xC1,0x60,0x6C,0x0D,0xE9,0x49,0x95,0x65,0x45,0xAA,0x17};

  VosdkPrivilegeWillExpire(const VosdkPrivilegeWillExpire&);
  VosdkPrivilegeWillExpire& operator=(const VosdkPrivilegeWillExpire&);
  VosdkPrivilegeWillExpire() : token() {
  }

  virtual ~VosdkPrivilegeWillExpire() throw();
  VosdkHeader header;
  std::string token;
  std::vector<VosdkPrivilegeExpireInfo>  privilegeExpireInfos;

  _VosdkPrivilegeWillExpire__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_token(const std::string& val);

  void __set_privilegeExpireInfos(const std::vector<VosdkPrivilegeExpireInfo> & val);

  bool operator == (const VosdkPrivilegeWillExpire & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    if (__isset.privilegeExpireInfos != rhs.__isset.privilegeExpireInfos)
      return false;
    else if (__isset.privilegeExpireInfos && !(privilegeExpireInfos == rhs.privilegeExpireInfos))
      return false;
    return true;
  }
  bool operator != (const VosdkPrivilegeWillExpire &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkPrivilegeWillExpire & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkPrivilegeWillExpire& obj);
};

void swap(VosdkPrivilegeWillExpire &a, VosdkPrivilegeWillExpire &b);

typedef struct _VosdkRenewToken__isset {
  _VosdkRenewToken__isset() : header(false), token(false) {}
  bool header :1;
  bool token :1;
} _VosdkRenewToken__isset;

class VosdkRenewToken {
 public:

  static const char* ascii_fingerprint; // = "7643AB8C86D47EFC29C9DADBFB748150";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x43,0xAB,0x8C,0x86,0xD4,0x7E,0xFC,0x29,0xC9,0xDA,0xDB,0xFB,0x74,0x81,0x50};

  VosdkRenewToken(const VosdkRenewToken&);
  VosdkRenewToken& operator=(const VosdkRenewToken&);
  VosdkRenewToken() : token() {
  }

  virtual ~VosdkRenewToken() throw();
  VosdkHeader header;
  std::string token;

  _VosdkRenewToken__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_token(const std::string& val);

  bool operator == (const VosdkRenewToken & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const VosdkRenewToken &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkRenewToken & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkRenewToken& obj);
};

void swap(VosdkRenewToken &a, VosdkRenewToken &b);

typedef struct _VosdkRenewTokenRes__isset {
  _VosdkRenewTokenRes__isset() : header(false), res_code(false) {}
  bool header :1;
  bool res_code :1;
} _VosdkRenewTokenRes__isset;

class VosdkRenewTokenRes {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkRenewTokenRes(const VosdkRenewTokenRes&);
  VosdkRenewTokenRes& operator=(const VosdkRenewTokenRes&);
  VosdkRenewTokenRes() : res_code(0) {
  }

  virtual ~VosdkRenewTokenRes() throw();
  VosdkHeader header;
  int32_t res_code;

  _VosdkRenewTokenRes__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_res_code(const int32_t val);

  bool operator == (const VosdkRenewTokenRes & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.res_code != rhs.__isset.res_code)
      return false;
    else if (__isset.res_code && !(res_code == rhs.res_code))
      return false;
    return true;
  }
  bool operator != (const VosdkRenewTokenRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkRenewTokenRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkRenewTokenRes& obj);
};

void swap(VosdkRenewTokenRes &a, VosdkRenewTokenRes &b);

typedef struct _VosdkSignalingMsgStat__isset {
  _VosdkSignalingMsgStat__isset() : header(false), txMsgCount(false), rxClientMsgCount(false), rxSignalingMsgCount(false), rxDualMsgCount(false) {}
  bool header :1;
  bool txMsgCount :1;
  bool rxClientMsgCount :1;
  bool rxSignalingMsgCount :1;
  bool rxDualMsgCount :1;
} _VosdkSignalingMsgStat__isset;

class VosdkSignalingMsgStat {
 public:

  static const char* ascii_fingerprint; // = "F77D5D692FD8224ADA5729D4A3FEE797";
  static const uint8_t binary_fingerprint[16]; // = {0xF7,0x7D,0x5D,0x69,0x2F,0xD8,0x22,0x4A,0xDA,0x57,0x29,0xD4,0xA3,0xFE,0xE7,0x97};

  VosdkSignalingMsgStat(const VosdkSignalingMsgStat&);
  VosdkSignalingMsgStat& operator=(const VosdkSignalingMsgStat&);
  VosdkSignalingMsgStat() : txMsgCount(0), rxClientMsgCount(0), rxSignalingMsgCount(0), rxDualMsgCount(0) {
  }

  virtual ~VosdkSignalingMsgStat() throw();
  VosdkHeader header;
  int32_t txMsgCount;
  int32_t rxClientMsgCount;
  int32_t rxSignalingMsgCount;
  int32_t rxDualMsgCount;

  _VosdkSignalingMsgStat__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_txMsgCount(const int32_t val);

  void __set_rxClientMsgCount(const int32_t val);

  void __set_rxSignalingMsgCount(const int32_t val);

  void __set_rxDualMsgCount(const int32_t val);

  bool operator == (const VosdkSignalingMsgStat & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.txMsgCount != rhs.__isset.txMsgCount)
      return false;
    else if (__isset.txMsgCount && !(txMsgCount == rhs.txMsgCount))
      return false;
    if (__isset.rxClientMsgCount != rhs.__isset.rxClientMsgCount)
      return false;
    else if (__isset.rxClientMsgCount && !(rxClientMsgCount == rhs.rxClientMsgCount))
      return false;
    if (__isset.rxSignalingMsgCount != rhs.__isset.rxSignalingMsgCount)
      return false;
    else if (__isset.rxSignalingMsgCount && !(rxSignalingMsgCount == rhs.rxSignalingMsgCount))
      return false;
    if (__isset.rxDualMsgCount != rhs.__isset.rxDualMsgCount)
      return false;
    else if (__isset.rxDualMsgCount && !(rxDualMsgCount == rhs.rxDualMsgCount))
      return false;
    return true;
  }
  bool operator != (const VosdkSignalingMsgStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkSignalingMsgStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkSignalingMsgStat& obj);
};

void swap(VosdkSignalingMsgStat &a, VosdkSignalingMsgStat &b);

typedef struct _VosdkLocalFallbackStatus__isset {
  _VosdkLocalFallbackStatus__isset() : header(false), status(false) {}
  bool header :1;
  bool status :1;
} _VosdkLocalFallbackStatus__isset;

class VosdkLocalFallbackStatus {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkLocalFallbackStatus(const VosdkLocalFallbackStatus&);
  VosdkLocalFallbackStatus& operator=(const VosdkLocalFallbackStatus&);
  VosdkLocalFallbackStatus() : status(0) {
  }

  virtual ~VosdkLocalFallbackStatus() throw();
  VosdkHeader header;
  int32_t status;

  _VosdkLocalFallbackStatus__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_status(const int32_t val);

  bool operator == (const VosdkLocalFallbackStatus & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const VosdkLocalFallbackStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkLocalFallbackStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkLocalFallbackStatus& obj);
};

void swap(VosdkLocalFallbackStatus &a, VosdkLocalFallbackStatus &b);

typedef struct _VosdkRemoteFallbackStatus__isset {
  _VosdkRemoteFallbackStatus__isset() : header(false), src(false), dst(false) {}
  bool header :1;
  bool src :1;
  bool dst :1;
} _VosdkRemoteFallbackStatus__isset;

class VosdkRemoteFallbackStatus {
 public:

  static const char* ascii_fingerprint; // = "C2AA7695D2D8E54277BD0F7525CE4E28";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xAA,0x76,0x95,0xD2,0xD8,0xE5,0x42,0x77,0xBD,0x0F,0x75,0x25,0xCE,0x4E,0x28};

  VosdkRemoteFallbackStatus(const VosdkRemoteFallbackStatus&);
  VosdkRemoteFallbackStatus& operator=(const VosdkRemoteFallbackStatus&);
  VosdkRemoteFallbackStatus() : src(0), dst(0) {
  }

  virtual ~VosdkRemoteFallbackStatus() throw();
  VosdkHeader header;
  int32_t src;
  int32_t dst;

  _VosdkRemoteFallbackStatus__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_src(const int32_t val);

  void __set_dst(const int32_t val);

  bool operator == (const VosdkRemoteFallbackStatus & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.src != rhs.__isset.src)
      return false;
    else if (__isset.src && !(src == rhs.src))
      return false;
    if (__isset.dst != rhs.__isset.dst)
      return false;
    else if (__isset.dst && !(dst == rhs.dst))
      return false;
    return true;
  }
  bool operator != (const VosdkRemoteFallbackStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkRemoteFallbackStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkRemoteFallbackStatus& obj);
};

void swap(VosdkRemoteFallbackStatus &a, VosdkRemoteFallbackStatus &b);

typedef struct _VosdkVideoBandwidthAggressiveLevel__isset {
  _VosdkVideoBandwidthAggressiveLevel__isset() : header(false), level(false) {}
  bool header :1;
  bool level :1;
} _VosdkVideoBandwidthAggressiveLevel__isset;

class VosdkVideoBandwidthAggressiveLevel {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkVideoBandwidthAggressiveLevel(const VosdkVideoBandwidthAggressiveLevel&);
  VosdkVideoBandwidthAggressiveLevel& operator=(const VosdkVideoBandwidthAggressiveLevel&);
  VosdkVideoBandwidthAggressiveLevel() : level(0) {
  }

  virtual ~VosdkVideoBandwidthAggressiveLevel() throw();
  VosdkHeader header;
  int32_t level;

  _VosdkVideoBandwidthAggressiveLevel__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_level(const int32_t val);

  bool operator == (const VosdkVideoBandwidthAggressiveLevel & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.level != rhs.__isset.level)
      return false;
    else if (__isset.level && !(level == rhs.level))
      return false;
    return true;
  }
  bool operator != (const VosdkVideoBandwidthAggressiveLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVideoBandwidthAggressiveLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVideoBandwidthAggressiveLevel& obj);
};

void swap(VosdkVideoBandwidthAggressiveLevel &a, VosdkVideoBandwidthAggressiveLevel &b);

typedef struct _VosdkAppSetMinPlayoutDelay__isset {
  _VosdkAppSetMinPlayoutDelay__isset() : header(false), playoutDelay(false) {}
  bool header :1;
  bool playoutDelay :1;
} _VosdkAppSetMinPlayoutDelay__isset;

class VosdkAppSetMinPlayoutDelay {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkAppSetMinPlayoutDelay(const VosdkAppSetMinPlayoutDelay&);
  VosdkAppSetMinPlayoutDelay& operator=(const VosdkAppSetMinPlayoutDelay&);
  VosdkAppSetMinPlayoutDelay() : playoutDelay(0) {
  }

  virtual ~VosdkAppSetMinPlayoutDelay() throw();
  VosdkHeader header;
  int32_t playoutDelay;

  _VosdkAppSetMinPlayoutDelay__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_playoutDelay(const int32_t val);

  bool operator == (const VosdkAppSetMinPlayoutDelay & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.playoutDelay != rhs.__isset.playoutDelay)
      return false;
    else if (__isset.playoutDelay && !(playoutDelay == rhs.playoutDelay))
      return false;
    return true;
  }
  bool operator != (const VosdkAppSetMinPlayoutDelay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkAppSetMinPlayoutDelay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkAppSetMinPlayoutDelay& obj);
};

void swap(VosdkAppSetMinPlayoutDelay &a, VosdkAppSetMinPlayoutDelay &b);

typedef struct _VosdkAppSetStartVideoBitRate__isset {
  _VosdkAppSetStartVideoBitRate__isset() : header(false), startVideoBitRate(false) {}
  bool header :1;
  bool startVideoBitRate :1;
} _VosdkAppSetStartVideoBitRate__isset;

class VosdkAppSetStartVideoBitRate {
 public:

  static const char* ascii_fingerprint; // = "EC4A08214886140709A800199CD6CB4D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x4A,0x08,0x21,0x48,0x86,0x14,0x07,0x09,0xA8,0x00,0x19,0x9C,0xD6,0xCB,0x4D};

  VosdkAppSetStartVideoBitRate(const VosdkAppSetStartVideoBitRate&);
  VosdkAppSetStartVideoBitRate& operator=(const VosdkAppSetStartVideoBitRate&);
  VosdkAppSetStartVideoBitRate() : startVideoBitRate(0) {
  }

  virtual ~VosdkAppSetStartVideoBitRate() throw();
  VosdkHeader header;
  int32_t startVideoBitRate;

  _VosdkAppSetStartVideoBitRate__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_startVideoBitRate(const int32_t val);

  bool operator == (const VosdkAppSetStartVideoBitRate & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.startVideoBitRate != rhs.__isset.startVideoBitRate)
      return false;
    else if (__isset.startVideoBitRate && !(startVideoBitRate == rhs.startVideoBitRate))
      return false;
    return true;
  }
  bool operator != (const VosdkAppSetStartVideoBitRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkAppSetStartVideoBitRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkAppSetStartVideoBitRate& obj);
};

void swap(VosdkAppSetStartVideoBitRate &a, VosdkAppSetStartVideoBitRate &b);

typedef struct _VosdkSendVideoPaced__isset {
  _VosdkSendVideoPaced__isset() : header(false), isEnabled(false) {}
  bool header :1;
  bool isEnabled :1;
} _VosdkSendVideoPaced__isset;

class VosdkSendVideoPaced {
 public:

  static const char* ascii_fingerprint; // = "B3BD93EBB5756141F0719C1251165BAA";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xBD,0x93,0xEB,0xB5,0x75,0x61,0x41,0xF0,0x71,0x9C,0x12,0x51,0x16,0x5B,0xAA};

  VosdkSendVideoPaced(const VosdkSendVideoPaced&);
  VosdkSendVideoPaced& operator=(const VosdkSendVideoPaced&);
  VosdkSendVideoPaced() : isEnabled(0) {
  }

  virtual ~VosdkSendVideoPaced() throw();
  VosdkHeader header;
  bool isEnabled;

  _VosdkSendVideoPaced__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_isEnabled(const bool val);

  bool operator == (const VosdkSendVideoPaced & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.isEnabled != rhs.__isset.isEnabled)
      return false;
    else if (__isset.isEnabled && !(isEnabled == rhs.isEnabled))
      return false;
    return true;
  }
  bool operator != (const VosdkSendVideoPaced &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkSendVideoPaced & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkSendVideoPaced& obj);
};

void swap(VosdkSendVideoPaced &a, VosdkSendVideoPaced &b);

typedef struct _VosdkApiExec__isset {
  _VosdkApiExec__isset() : header(false), apiPayload(false), isCache(false), isNotificationSuppressed(false) {}
  bool header :1;
  bool apiPayload :1;
  bool isCache :1;
  bool isNotificationSuppressed :1;
} _VosdkApiExec__isset;

class VosdkApiExec {
 public:

  static const char* ascii_fingerprint; // = "EB94370E3ABE4A22AD18E03E677D621B";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x94,0x37,0x0E,0x3A,0xBE,0x4A,0x22,0xAD,0x18,0xE0,0x3E,0x67,0x7D,0x62,0x1B};

  VosdkApiExec(const VosdkApiExec&);
  VosdkApiExec& operator=(const VosdkApiExec&);
  VosdkApiExec() : apiPayload(), isCache(0), isNotificationSuppressed(0) {
  }

  virtual ~VosdkApiExec() throw();
  VosdkHeader header;
  std::string apiPayload;
  bool isCache;
  bool isNotificationSuppressed;

  _VosdkApiExec__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_apiPayload(const std::string& val);

  void __set_isCache(const bool val);

  void __set_isNotificationSuppressed(const bool val);

  bool operator == (const VosdkApiExec & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.apiPayload != rhs.__isset.apiPayload)
      return false;
    else if (__isset.apiPayload && !(apiPayload == rhs.apiPayload))
      return false;
    if (__isset.isCache != rhs.__isset.isCache)
      return false;
    else if (__isset.isCache && !(isCache == rhs.isCache))
      return false;
    if (__isset.isNotificationSuppressed != rhs.__isset.isNotificationSuppressed)
      return false;
    else if (__isset.isNotificationSuppressed && !(isNotificationSuppressed == rhs.isNotificationSuppressed))
      return false;
    return true;
  }
  bool operator != (const VosdkApiExec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkApiExec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkApiExec& obj);
};

void swap(VosdkApiExec &a, VosdkApiExec &b);

typedef struct _VosdkABTest__isset {
  _VosdkABTest__isset() : header(false), feature(false), tag(false), params(false) {}
  bool header :1;
  bool feature :1;
  bool tag :1;
  bool params :1;
} _VosdkABTest__isset;

class VosdkABTest {
 public:

  static const char* ascii_fingerprint; // = "27965685487DFD8F9C34C8D2DB0A3140";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x96,0x56,0x85,0x48,0x7D,0xFD,0x8F,0x9C,0x34,0xC8,0xD2,0xDB,0x0A,0x31,0x40};

  VosdkABTest(const VosdkABTest&);
  VosdkABTest& operator=(const VosdkABTest&);
  VosdkABTest() : feature(), tag(), params() {
  }

  virtual ~VosdkABTest() throw();
  VosdkHeader header;
  std::string feature;
  std::string tag;
  std::string params;

  _VosdkABTest__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_feature(const std::string& val);

  void __set_tag(const std::string& val);

  void __set_params(const std::string& val);

  bool operator == (const VosdkABTest & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.feature != rhs.__isset.feature)
      return false;
    else if (__isset.feature && !(feature == rhs.feature))
      return false;
    if (__isset.tag != rhs.__isset.tag)
      return false;
    else if (__isset.tag && !(tag == rhs.tag))
      return false;
    if (__isset.params != rhs.__isset.params)
      return false;
    else if (__isset.params && !(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const VosdkABTest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkABTest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkABTest& obj);
};

void swap(VosdkABTest &a, VosdkABTest &b);

typedef struct _VosdkVideoInitialOptions__isset {
  _VosdkVideoInitialOptions__isset() : header(false), isSendVideoPacedEnabled(false), isVideoFecEnabled(false), videoFecMethod(false), localFallbackOption(false), remoteFallbackOption(false) {}
  bool header :1;
  bool isSendVideoPacedEnabled :1;
  bool isVideoFecEnabled :1;
  bool videoFecMethod :1;
  bool localFallbackOption :1;
  bool remoteFallbackOption :1;
} _VosdkVideoInitialOptions__isset;

class VosdkVideoInitialOptions {
 public:

  static const char* ascii_fingerprint; // = "4AE41D1B0956D9F5384008CBB65A164A";
  static const uint8_t binary_fingerprint[16]; // = {0x4A,0xE4,0x1D,0x1B,0x09,0x56,0xD9,0xF5,0x38,0x40,0x08,0xCB,0xB6,0x5A,0x16,0x4A};

  VosdkVideoInitialOptions(const VosdkVideoInitialOptions&);
  VosdkVideoInitialOptions& operator=(const VosdkVideoInitialOptions&);
  VosdkVideoInitialOptions() : isSendVideoPacedEnabled(0), isVideoFecEnabled(0), videoFecMethod(0), localFallbackOption(0), remoteFallbackOption(0) {
  }

  virtual ~VosdkVideoInitialOptions() throw();
  VosdkHeader header;
  bool isSendVideoPacedEnabled;
  bool isVideoFecEnabled;
  int32_t videoFecMethod;
  int32_t localFallbackOption;
  int32_t remoteFallbackOption;

  _VosdkVideoInitialOptions__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_isSendVideoPacedEnabled(const bool val);

  void __set_isVideoFecEnabled(const bool val);

  void __set_videoFecMethod(const int32_t val);

  void __set_localFallbackOption(const int32_t val);

  void __set_remoteFallbackOption(const int32_t val);

  bool operator == (const VosdkVideoInitialOptions & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.isSendVideoPacedEnabled != rhs.__isset.isSendVideoPacedEnabled)
      return false;
    else if (__isset.isSendVideoPacedEnabled && !(isSendVideoPacedEnabled == rhs.isSendVideoPacedEnabled))
      return false;
    if (__isset.isVideoFecEnabled != rhs.__isset.isVideoFecEnabled)
      return false;
    else if (__isset.isVideoFecEnabled && !(isVideoFecEnabled == rhs.isVideoFecEnabled))
      return false;
    if (__isset.videoFecMethod != rhs.__isset.videoFecMethod)
      return false;
    else if (__isset.videoFecMethod && !(videoFecMethod == rhs.videoFecMethod))
      return false;
    if (__isset.localFallbackOption != rhs.__isset.localFallbackOption)
      return false;
    else if (__isset.localFallbackOption && !(localFallbackOption == rhs.localFallbackOption))
      return false;
    if (__isset.remoteFallbackOption != rhs.__isset.remoteFallbackOption)
      return false;
    else if (__isset.remoteFallbackOption && !(remoteFallbackOption == rhs.remoteFallbackOption))
      return false;
    return true;
  }
  bool operator != (const VosdkVideoInitialOptions &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVideoInitialOptions & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVideoInitialOptions& obj);
};

void swap(VosdkVideoInitialOptions &a, VosdkVideoInitialOptions &b);

typedef struct _VosdkVqcStat__isset {
  _VosdkVqcStat__isset() : header(false), totalFrames(false), averageScore(false), llRatio(false), hhRatio(false) {}
  bool header :1;
  bool totalFrames :1;
  bool averageScore :1;
  bool llRatio :1;
  bool hhRatio :1;
} _VosdkVqcStat__isset;

class VosdkVqcStat {
 public:

  static const char* ascii_fingerprint; // = "F77D5D692FD8224ADA5729D4A3FEE797";
  static const uint8_t binary_fingerprint[16]; // = {0xF7,0x7D,0x5D,0x69,0x2F,0xD8,0x22,0x4A,0xDA,0x57,0x29,0xD4,0xA3,0xFE,0xE7,0x97};

  VosdkVqcStat(const VosdkVqcStat&);
  VosdkVqcStat& operator=(const VosdkVqcStat&);
  VosdkVqcStat() : totalFrames(0), averageScore(0), llRatio(0), hhRatio(0) {
  }

  virtual ~VosdkVqcStat() throw();
  VosdkHeader header;
  int32_t totalFrames;
  int32_t averageScore;
  int32_t llRatio;
  int32_t hhRatio;

  _VosdkVqcStat__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_totalFrames(const int32_t val);

  void __set_averageScore(const int32_t val);

  void __set_llRatio(const int32_t val);

  void __set_hhRatio(const int32_t val);

  bool operator == (const VosdkVqcStat & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.totalFrames != rhs.__isset.totalFrames)
      return false;
    else if (__isset.totalFrames && !(totalFrames == rhs.totalFrames))
      return false;
    if (__isset.averageScore != rhs.__isset.averageScore)
      return false;
    else if (__isset.averageScore && !(averageScore == rhs.averageScore))
      return false;
    if (__isset.llRatio != rhs.__isset.llRatio)
      return false;
    else if (__isset.llRatio && !(llRatio == rhs.llRatio))
      return false;
    if (__isset.hhRatio != rhs.__isset.hhRatio)
      return false;
    else if (__isset.hhRatio && !(hhRatio == rhs.hhRatio))
      return false;
    return true;
  }
  bool operator != (const VosdkVqcStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VosdkVqcStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VosdkVqcStat& obj);
};

void swap(VosdkVqcStat &a, VosdkVqcStat &b);

typedef struct _WhiteBoardJoinCenter__isset {
  _WhiteBoardJoinCenter__isset() : header(false), cname(false), uid(false), vid(false), code(false), server(false), uip(false) {}
  bool header :1;
  bool cname :1;
  bool uid :1;
  bool vid :1;
  bool code :1;
  bool server :1;
  bool uip :1;
} _WhiteBoardJoinCenter__isset;

class WhiteBoardJoinCenter {
 public:

  static const char* ascii_fingerprint; // = "CDBD3113227CF2F37A959CB235D67CF1";
  static const uint8_t binary_fingerprint[16]; // = {0xCD,0xBD,0x31,0x13,0x22,0x7C,0xF2,0xF3,0x7A,0x95,0x9C,0xB2,0x35,0xD6,0x7C,0xF1};

  WhiteBoardJoinCenter(const WhiteBoardJoinCenter&);
  WhiteBoardJoinCenter& operator=(const WhiteBoardJoinCenter&);
  WhiteBoardJoinCenter() : cname(), uid(), vid(0), code(0), server(), uip() {
  }

  virtual ~WhiteBoardJoinCenter() throw();
  VosdkHeader header;
  std::string cname;
  std::string uid;
  int32_t vid;
  int32_t code;
  std::string server;
  std::string uip;

  _WhiteBoardJoinCenter__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_cname(const std::string& val);

  void __set_uid(const std::string& val);

  void __set_vid(const int32_t val);

  void __set_code(const int32_t val);

  void __set_server(const std::string& val);

  void __set_uip(const std::string& val);

  bool operator == (const WhiteBoardJoinCenter & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.cname != rhs.__isset.cname)
      return false;
    else if (__isset.cname && !(cname == rhs.cname))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    if (__isset.code != rhs.__isset.code)
      return false;
    else if (__isset.code && !(code == rhs.code))
      return false;
    if (__isset.server != rhs.__isset.server)
      return false;
    else if (__isset.server && !(server == rhs.server))
      return false;
    if (__isset.uip != rhs.__isset.uip)
      return false;
    else if (__isset.uip && !(uip == rhs.uip))
      return false;
    return true;
  }
  bool operator != (const WhiteBoardJoinCenter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WhiteBoardJoinCenter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WhiteBoardJoinCenter& obj);
};

void swap(WhiteBoardJoinCenter &a, WhiteBoardJoinCenter &b);

typedef struct _WhiteBoardJoinEdge__isset {
  _WhiteBoardJoinEdge__isset() : header(false), cname(false), uid(false), vid(false), code(false), mode(false), role(false), uip(false) {}
  bool header :1;
  bool cname :1;
  bool uid :1;
  bool vid :1;
  bool code :1;
  bool mode :1;
  bool role :1;
  bool uip :1;
} _WhiteBoardJoinEdge__isset;

class WhiteBoardJoinEdge {
 public:

  static const char* ascii_fingerprint; // = "643D02D3005E6615F74A10444212B074";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x3D,0x02,0xD3,0x00,0x5E,0x66,0x15,0xF7,0x4A,0x10,0x44,0x42,0x12,0xB0,0x74};

  WhiteBoardJoinEdge(const WhiteBoardJoinEdge&);
  WhiteBoardJoinEdge& operator=(const WhiteBoardJoinEdge&);
  WhiteBoardJoinEdge() : cname(), uid(), vid(0), code(0), mode(), role(), uip() {
  }

  virtual ~WhiteBoardJoinEdge() throw();
  VosdkHeader header;
  std::string cname;
  std::string uid;
  int32_t vid;
  int32_t code;
  std::string mode;
  std::string role;
  std::string uip;

  _WhiteBoardJoinEdge__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_cname(const std::string& val);

  void __set_uid(const std::string& val);

  void __set_vid(const int32_t val);

  void __set_code(const int32_t val);

  void __set_mode(const std::string& val);

  void __set_role(const std::string& val);

  void __set_uip(const std::string& val);

  bool operator == (const WhiteBoardJoinEdge & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.cname != rhs.__isset.cname)
      return false;
    else if (__isset.cname && !(cname == rhs.cname))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    if (__isset.code != rhs.__isset.code)
      return false;
    else if (__isset.code && !(code == rhs.code))
      return false;
    if (__isset.mode != rhs.__isset.mode)
      return false;
    else if (__isset.mode && !(mode == rhs.mode))
      return false;
    if (__isset.role != rhs.__isset.role)
      return false;
    else if (__isset.role && !(role == rhs.role))
      return false;
    if (__isset.uip != rhs.__isset.uip)
      return false;
    else if (__isset.uip && !(uip == rhs.uip))
      return false;
    return true;
  }
  bool operator != (const WhiteBoardJoinEdge &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WhiteBoardJoinEdge & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WhiteBoardJoinEdge& obj);
};

void swap(WhiteBoardJoinEdge &a, WhiteBoardJoinEdge &b);

typedef struct _WhiteBoardJoinWebSocket__isset {
  _WhiteBoardJoinWebSocket__isset() : header(false), cname(false), uid(false), vid(false), uip(false) {}
  bool header :1;
  bool cname :1;
  bool uid :1;
  bool vid :1;
  bool uip :1;
} _WhiteBoardJoinWebSocket__isset;

class WhiteBoardJoinWebSocket {
 public:

  static const char* ascii_fingerprint; // = "DC932BFB87990BB9EA62BDA0182542EC";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x93,0x2B,0xFB,0x87,0x99,0x0B,0xB9,0xEA,0x62,0xBD,0xA0,0x18,0x25,0x42,0xEC};

  WhiteBoardJoinWebSocket(const WhiteBoardJoinWebSocket&);
  WhiteBoardJoinWebSocket& operator=(const WhiteBoardJoinWebSocket&);
  WhiteBoardJoinWebSocket() : cname(), uid(), vid(0), uip() {
  }

  virtual ~WhiteBoardJoinWebSocket() throw();
  VosdkHeader header;
  std::string cname;
  std::string uid;
  int32_t vid;
  std::string uip;

  _WhiteBoardJoinWebSocket__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_cname(const std::string& val);

  void __set_uid(const std::string& val);

  void __set_vid(const int32_t val);

  void __set_uip(const std::string& val);

  bool operator == (const WhiteBoardJoinWebSocket & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.cname != rhs.__isset.cname)
      return false;
    else if (__isset.cname && !(cname == rhs.cname))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    if (__isset.uip != rhs.__isset.uip)
      return false;
    else if (__isset.uip && !(uip == rhs.uip))
      return false;
    return true;
  }
  bool operator != (const WhiteBoardJoinWebSocket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WhiteBoardJoinWebSocket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WhiteBoardJoinWebSocket& obj);
};

void swap(WhiteBoardJoinWebSocket &a, WhiteBoardJoinWebSocket &b);

typedef struct _WhiteBoardUploadFile__isset {
  _WhiteBoardUploadFile__isset() : header(false), cname(false), uid(false), filename(false), code(false), elapse(false), uip(false) {}
  bool header :1;
  bool cname :1;
  bool uid :1;
  bool filename :1;
  bool code :1;
  bool elapse :1;
  bool uip :1;
} _WhiteBoardUploadFile__isset;

class WhiteBoardUploadFile {
 public:

  static const char* ascii_fingerprint; // = "36C4C7D64C8D9FB745A2A01EC78B7C6C";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0xC4,0xC7,0xD6,0x4C,0x8D,0x9F,0xB7,0x45,0xA2,0xA0,0x1E,0xC7,0x8B,0x7C,0x6C};

  WhiteBoardUploadFile(const WhiteBoardUploadFile&);
  WhiteBoardUploadFile& operator=(const WhiteBoardUploadFile&);
  WhiteBoardUploadFile() : cname(), uid(), filename(), code(0), elapse(0), uip() {
  }

  virtual ~WhiteBoardUploadFile() throw();
  VosdkHeader header;
  std::string cname;
  std::string uid;
  std::string filename;
  int32_t code;
  int32_t elapse;
  std::string uip;

  _WhiteBoardUploadFile__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_cname(const std::string& val);

  void __set_uid(const std::string& val);

  void __set_filename(const std::string& val);

  void __set_code(const int32_t val);

  void __set_elapse(const int32_t val);

  void __set_uip(const std::string& val);

  bool operator == (const WhiteBoardUploadFile & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.cname != rhs.__isset.cname)
      return false;
    else if (__isset.cname && !(cname == rhs.cname))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.filename != rhs.__isset.filename)
      return false;
    else if (__isset.filename && !(filename == rhs.filename))
      return false;
    if (__isset.code != rhs.__isset.code)
      return false;
    else if (__isset.code && !(code == rhs.code))
      return false;
    if (__isset.elapse != rhs.__isset.elapse)
      return false;
    else if (__isset.elapse && !(elapse == rhs.elapse))
      return false;
    if (__isset.uip != rhs.__isset.uip)
      return false;
    else if (__isset.uip && !(uip == rhs.uip))
      return false;
    return true;
  }
  bool operator != (const WhiteBoardUploadFile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WhiteBoardUploadFile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WhiteBoardUploadFile& obj);
};

void swap(WhiteBoardUploadFile &a, WhiteBoardUploadFile &b);

typedef struct _WhiteBoardQuitWebSocket__isset {
  _WhiteBoardQuitWebSocket__isset() : header(false), cname(false), uid(false), vid(false), uip(false) {}
  bool header :1;
  bool cname :1;
  bool uid :1;
  bool vid :1;
  bool uip :1;
} _WhiteBoardQuitWebSocket__isset;

class WhiteBoardQuitWebSocket {
 public:

  static const char* ascii_fingerprint; // = "DC932BFB87990BB9EA62BDA0182542EC";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x93,0x2B,0xFB,0x87,0x99,0x0B,0xB9,0xEA,0x62,0xBD,0xA0,0x18,0x25,0x42,0xEC};

  WhiteBoardQuitWebSocket(const WhiteBoardQuitWebSocket&);
  WhiteBoardQuitWebSocket& operator=(const WhiteBoardQuitWebSocket&);
  WhiteBoardQuitWebSocket() : cname(), uid(), vid(0), uip() {
  }

  virtual ~WhiteBoardQuitWebSocket() throw();
  VosdkHeader header;
  std::string cname;
  std::string uid;
  int32_t vid;
  std::string uip;

  _WhiteBoardQuitWebSocket__isset __isset;

  void __set_header(const VosdkHeader& val);

  void __set_cname(const std::string& val);

  void __set_uid(const std::string& val);

  void __set_vid(const int32_t val);

  void __set_uip(const std::string& val);

  bool operator == (const WhiteBoardQuitWebSocket & rhs) const
  {
    if (__isset.header != rhs.__isset.header)
      return false;
    else if (__isset.header && !(header == rhs.header))
      return false;
    if (__isset.cname != rhs.__isset.cname)
      return false;
    else if (__isset.cname && !(cname == rhs.cname))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    if (__isset.uip != rhs.__isset.uip)
      return false;
    else if (__isset.uip && !(uip == rhs.uip))
      return false;
    return true;
  }
  bool operator != (const WhiteBoardQuitWebSocket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WhiteBoardQuitWebSocket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WhiteBoardQuitWebSocket& obj);
};

void swap(WhiteBoardQuitWebSocket &a, WhiteBoardQuitWebSocket &b);

typedef struct _BCPushEvent__isset {
  _BCPushEvent__isset() : ts(false), vid(false), cdnId(false), channelName(false), dispatcherIp(false), streamId(false), status(false), errorCode(false) {}
  bool ts :1;
  bool vid :1;
  bool cdnId :1;
  bool channelName :1;
  bool dispatcherIp :1;
  bool streamId :1;
  bool status :1;
  bool errorCode :1;
} _BCPushEvent__isset;

class BCPushEvent {
 public:

  static const char* ascii_fingerprint; // = "2D1E0165D7F3B80D0EAC1782AC8832BA";
  static const uint8_t binary_fingerprint[16]; // = {0x2D,0x1E,0x01,0x65,0xD7,0xF3,0xB8,0x0D,0x0E,0xAC,0x17,0x82,0xAC,0x88,0x32,0xBA};

  BCPushEvent(const BCPushEvent&);
  BCPushEvent& operator=(const BCPushEvent&);
  BCPushEvent() : ts(0), vid(0), cdnId(0), channelName(), dispatcherIp(), streamId(), status(0), errorCode(0) {
  }

  virtual ~BCPushEvent() throw();
  int64_t ts;
  int32_t vid;
  int32_t cdnId;
  std::string channelName;
  std::string dispatcherIp;
  std::string streamId;
  int32_t status;
  int32_t errorCode;

  _BCPushEvent__isset __isset;

  void __set_ts(const int64_t val);

  void __set_vid(const int32_t val);

  void __set_cdnId(const int32_t val);

  void __set_channelName(const std::string& val);

  void __set_dispatcherIp(const std::string& val);

  void __set_streamId(const std::string& val);

  void __set_status(const int32_t val);

  void __set_errorCode(const int32_t val);

  bool operator == (const BCPushEvent & rhs) const
  {
    if (__isset.ts != rhs.__isset.ts)
      return false;
    else if (__isset.ts && !(ts == rhs.ts))
      return false;
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    if (__isset.cdnId != rhs.__isset.cdnId)
      return false;
    else if (__isset.cdnId && !(cdnId == rhs.cdnId))
      return false;
    if (__isset.channelName != rhs.__isset.channelName)
      return false;
    else if (__isset.channelName && !(channelName == rhs.channelName))
      return false;
    if (__isset.dispatcherIp != rhs.__isset.dispatcherIp)
      return false;
    else if (__isset.dispatcherIp && !(dispatcherIp == rhs.dispatcherIp))
      return false;
    if (__isset.streamId != rhs.__isset.streamId)
      return false;
    else if (__isset.streamId && !(streamId == rhs.streamId))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.errorCode != rhs.__isset.errorCode)
      return false;
    else if (__isset.errorCode && !(errorCode == rhs.errorCode))
      return false;
    return true;
  }
  bool operator != (const BCPushEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BCPushEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BCPushEvent& obj);
};

void swap(BCPushEvent &a, BCPushEvent &b);

typedef struct _BCPeriodicUsage__isset {
  _BCPeriodicUsage__isset() : ts(false), vid(false), cdnId(false), channelName(false), trafficAgoraKb(false), trafficCDNKb(false) {}
  bool ts :1;
  bool vid :1;
  bool cdnId :1;
  bool channelName :1;
  bool trafficAgoraKb :1;
  bool trafficCDNKb :1;
} _BCPeriodicUsage__isset;

class BCPeriodicUsage {
 public:

  static const char* ascii_fingerprint; // = "1E6780B3075B1C710BE66888FBCB66F8";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x67,0x80,0xB3,0x07,0x5B,0x1C,0x71,0x0B,0xE6,0x68,0x88,0xFB,0xCB,0x66,0xF8};

  BCPeriodicUsage(const BCPeriodicUsage&);
  BCPeriodicUsage& operator=(const BCPeriodicUsage&);
  BCPeriodicUsage() : ts(0), vid(0), cdnId(0), channelName(), trafficAgoraKb(0), trafficCDNKb(0) {
  }

  virtual ~BCPeriodicUsage() throw();
  int64_t ts;
  int32_t vid;
  int32_t cdnId;
  std::string channelName;
  int32_t trafficAgoraKb;
  int32_t trafficCDNKb;

  _BCPeriodicUsage__isset __isset;

  void __set_ts(const int64_t val);

  void __set_vid(const int32_t val);

  void __set_cdnId(const int32_t val);

  void __set_channelName(const std::string& val);

  void __set_trafficAgoraKb(const int32_t val);

  void __set_trafficCDNKb(const int32_t val);

  bool operator == (const BCPeriodicUsage & rhs) const
  {
    if (__isset.ts != rhs.__isset.ts)
      return false;
    else if (__isset.ts && !(ts == rhs.ts))
      return false;
    if (__isset.vid != rhs.__isset.vid)
      return false;
    else if (__isset.vid && !(vid == rhs.vid))
      return false;
    if (__isset.cdnId != rhs.__isset.cdnId)
      return false;
    else if (__isset.cdnId && !(cdnId == rhs.cdnId))
      return false;
    if (__isset.channelName != rhs.__isset.channelName)
      return false;
    else if (__isset.channelName && !(channelName == rhs.channelName))
      return false;
    if (__isset.trafficAgoraKb != rhs.__isset.trafficAgoraKb)
      return false;
    else if (__isset.trafficAgoraKb && !(trafficAgoraKb == rhs.trafficAgoraKb))
      return false;
    if (__isset.trafficCDNKb != rhs.__isset.trafficCDNKb)
      return false;
    else if (__isset.trafficCDNKb && !(trafficCDNKb == rhs.trafficCDNKb))
      return false;
    return true;
  }
  bool operator != (const BCPeriodicUsage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BCPeriodicUsage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BCPeriodicUsage& obj);
};

void swap(BCPeriodicUsage &a, BCPeriodicUsage &b);

typedef struct _TrackSpan__isset {
  _TrackSpan__isset() : traceId(false), id(false), parentId(false), spanName(false), annotations(false), binaryAnnotations(false), debug(true), timestamp(false), duration(false), traceIdHigh(false) {}
  bool traceId :1;
  bool id :1;
  bool parentId :1;
  bool spanName :1;
  bool annotations :1;
  bool binaryAnnotations :1;
  bool debug :1;
  bool timestamp :1;
  bool duration :1;
  bool traceIdHigh :1;
} _TrackSpan__isset;

class TrackSpan {
 public:

  static const char* ascii_fingerprint; // = "9CC69AEEA962714EF0EF5C7E659F2723";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0xC6,0x9A,0xEE,0xA9,0x62,0x71,0x4E,0xF0,0xEF,0x5C,0x7E,0x65,0x9F,0x27,0x23};

  TrackSpan(const TrackSpan&);
  TrackSpan& operator=(const TrackSpan&);
  TrackSpan() : traceId(), id(), parentId(), spanName(), debug(false), timestamp(0), duration(0), traceIdHigh(0) {
  }

  virtual ~TrackSpan() throw();
  std::string traceId;
  std::string id;
  std::string parentId;
  std::string spanName;
  std::vector<Annotation>  annotations;
  std::vector<BinaryAnnotation>  binaryAnnotations;
  bool debug;
  int64_t timestamp;
  int64_t duration;
  int64_t traceIdHigh;

  _TrackSpan__isset __isset;

  void __set_traceId(const std::string& val);

  void __set_id(const std::string& val);

  void __set_parentId(const std::string& val);

  void __set_spanName(const std::string& val);

  void __set_annotations(const std::vector<Annotation> & val);

  void __set_binaryAnnotations(const std::vector<BinaryAnnotation> & val);

  void __set_debug(const bool val);

  void __set_timestamp(const int64_t val);

  void __set_duration(const int64_t val);

  void __set_traceIdHigh(const int64_t val);

  bool operator == (const TrackSpan & rhs) const
  {
    if (!(traceId == rhs.traceId))
      return false;
    if (!(id == rhs.id))
      return false;
    if (__isset.parentId != rhs.__isset.parentId)
      return false;
    else if (__isset.parentId && !(parentId == rhs.parentId))
      return false;
    if (!(spanName == rhs.spanName))
      return false;
    if (!(annotations == rhs.annotations))
      return false;
    if (__isset.binaryAnnotations != rhs.__isset.binaryAnnotations)
      return false;
    else if (__isset.binaryAnnotations && !(binaryAnnotations == rhs.binaryAnnotations))
      return false;
    if (__isset.debug != rhs.__isset.debug)
      return false;
    else if (__isset.debug && !(debug == rhs.debug))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.duration != rhs.__isset.duration)
      return false;
    else if (__isset.duration && !(duration == rhs.duration))
      return false;
    if (__isset.traceIdHigh != rhs.__isset.traceIdHigh)
      return false;
    else if (__isset.traceIdHigh && !(traceIdHigh == rhs.traceIdHigh))
      return false;
    return true;
  }
  bool operator != (const TrackSpan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TrackSpan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TrackSpan& obj);
};

void swap(TrackSpan &a, TrackSpan &b);

typedef struct _Endpoint__isset {
  _Endpoint__isset() : ipv4(false), port(false), serviceName(false) {}
  bool ipv4 :1;
  bool port :1;
  bool serviceName :1;
} _Endpoint__isset;

class Endpoint {
 public:

  static const char* ascii_fingerprint; // = "C7D2D58463AC91C552EE8B325EA2ACCC";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0xD2,0xD5,0x84,0x63,0xAC,0x91,0xC5,0x52,0xEE,0x8B,0x32,0x5E,0xA2,0xAC,0xCC};

  Endpoint(const Endpoint&);
  Endpoint& operator=(const Endpoint&);
  Endpoint() : ipv4(0), port(0), serviceName() {
  }

  virtual ~Endpoint() throw();
  int32_t ipv4;
  int16_t port;
  std::string serviceName;

  _Endpoint__isset __isset;

  void __set_ipv4(const int32_t val);

  void __set_port(const int16_t val);

  void __set_serviceName(const std::string& val);

  bool operator == (const Endpoint & rhs) const
  {
    if (!(ipv4 == rhs.ipv4))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(serviceName == rhs.serviceName))
      return false;
    return true;
  }
  bool operator != (const Endpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Endpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Endpoint& obj);
};

void swap(Endpoint &a, Endpoint &b);

typedef struct _Annotation__isset {
  _Annotation__isset() : timestamp(false), value(false), endpoint(false) {}
  bool timestamp :1;
  bool value :1;
  bool endpoint :1;
} _Annotation__isset;

class Annotation {
 public:

  static const char* ascii_fingerprint; // = "82EEE62ECC9DC6A10ECBF7D79D1E84D9";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0xEE,0xE6,0x2E,0xCC,0x9D,0xC6,0xA1,0x0E,0xCB,0xF7,0xD7,0x9D,0x1E,0x84,0xD9};

  Annotation(const Annotation&);
  Annotation& operator=(const Annotation&);
  Annotation() : timestamp(0), value() {
  }

  virtual ~Annotation() throw();
  int64_t timestamp;
  std::string value;
  Endpoint endpoint;

  _Annotation__isset __isset;

  void __set_timestamp(const int64_t val);

  void __set_value(const std::string& val);

  void __set_endpoint(const Endpoint& val);

  bool operator == (const Annotation & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.endpoint != rhs.__isset.endpoint)
      return false;
    else if (__isset.endpoint && !(endpoint == rhs.endpoint))
      return false;
    return true;
  }
  bool operator != (const Annotation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Annotation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Annotation& obj);
};

void swap(Annotation &a, Annotation &b);

typedef struct _BinaryAnnotation__isset {
  _BinaryAnnotation__isset() : key(false), value(false), endpoint(false) {}
  bool key :1;
  bool value :1;
  bool endpoint :1;
} _BinaryAnnotation__isset;

class BinaryAnnotation {
 public:

  static const char* ascii_fingerprint; // = "ECA146688FA36D23BC41D77226E793AF";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0xA1,0x46,0x68,0x8F,0xA3,0x6D,0x23,0xBC,0x41,0xD7,0x72,0x26,0xE7,0x93,0xAF};

  BinaryAnnotation(const BinaryAnnotation&);
  BinaryAnnotation& operator=(const BinaryAnnotation&);
  BinaryAnnotation() : key(), value() {
  }

  virtual ~BinaryAnnotation() throw();
  std::string key;
  std::string value;
  Endpoint endpoint;

  _BinaryAnnotation__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_endpoint(const Endpoint& val);

  bool operator == (const BinaryAnnotation & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.endpoint != rhs.__isset.endpoint)
      return false;
    else if (__isset.endpoint && !(endpoint == rhs.endpoint))
      return false;
    return true;
  }
  bool operator != (const BinaryAnnotation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BinaryAnnotation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BinaryAnnotation& obj);
};

void swap(BinaryAnnotation &a, BinaryAnnotation &b);

typedef struct _VOSClientPeriodicState__isset {
  _VOSClientPeriodicState__isset() : ts(false), cid(false), uid(false), sid(false), vosId(false), state(false) {}
  bool ts :1;
  bool cid :1;
  bool uid :1;
  bool sid :1;
  bool vosId :1;
  bool state :1;
} _VOSClientPeriodicState__isset;

class VOSClientPeriodicState {
 public:

  static const char* ascii_fingerprint; // = "B91646C516FD026B7B0F56A3B6E4D12F";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0x16,0x46,0xC5,0x16,0xFD,0x02,0x6B,0x7B,0x0F,0x56,0xA3,0xB6,0xE4,0xD1,0x2F};

  VOSClientPeriodicState(const VOSClientPeriodicState&);
  VOSClientPeriodicState& operator=(const VOSClientPeriodicState&);
  VOSClientPeriodicState() : ts(0), cid(0), uid(0), sid(), vosId(0), state(0) {
  }

  virtual ~VOSClientPeriodicState() throw();
  int64_t ts;
  int64_t cid;
  int64_t uid;
  std::string sid;
  int32_t vosId;
  int32_t state;

  _VOSClientPeriodicState__isset __isset;

  void __set_ts(const int64_t val);

  void __set_cid(const int64_t val);

  void __set_uid(const int64_t val);

  void __set_sid(const std::string& val);

  void __set_vosId(const int32_t val);

  void __set_state(const int32_t val);

  bool operator == (const VOSClientPeriodicState & rhs) const
  {
    if (__isset.ts != rhs.__isset.ts)
      return false;
    else if (__isset.ts && !(ts == rhs.ts))
      return false;
    if (__isset.cid != rhs.__isset.cid)
      return false;
    else if (__isset.cid && !(cid == rhs.cid))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.sid != rhs.__isset.sid)
      return false;
    else if (__isset.sid && !(sid == rhs.sid))
      return false;
    if (__isset.vosId != rhs.__isset.vosId)
      return false;
    else if (__isset.vosId && !(vosId == rhs.vosId))
      return false;
    if (__isset.state != rhs.__isset.state)
      return false;
    else if (__isset.state && !(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const VOSClientPeriodicState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VOSClientPeriodicState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VOSClientPeriodicState& obj);
};

void swap(VOSClientPeriodicState &a, VOSClientPeriodicState &b);

typedef struct _ReportItem__isset {
  _ReportItem__isset() : uri(false), encryptedItem(false), vosdkCounter(false), vosdkSession(false), vosdkVocs(false), vosdkVos(false), vosdkChan(false), vosdkQuit(false), vosdkPeer(false), vosdkViLocalFrame(false), vosdkViRemoteFrame(false), vosdkRating(false), vosdkACodec(false), vosdkNetOb(false), vosdkStartStun(false), vosdkSendDataBeginning(false), vosdkJoinIce(false), vosdkSuccStun(false), vosdkP2POpen(false), vosdkErrorCode(false), vosdkP2PSwitch(false), vosdkP2PStunStat(false), vosdkNetworkInformation(false), vosdkNetOb2(false), vosdkNetOb3(false), vosdkNetOb4(false), vosdkViRemoteFrameDecoded(false), vosdkSwitchVideoStream(false), vosdkDeviceStatChange(false), vosdkLbes(false), vosdkCameraInfos(false), vosdkMaxVideoPayloadSet(false), vosdkFirstAudioPacketSent(false), vosdkFirstAudioPacketReceived(false), vosdkAudioSendingStopped(false), vosdkAudioDisabled(false), vosdkAudioEnabled(false), vosdkFirstVideoPacketSent(false), vosdkFirstVideoPacketReceived(false), vosdkFirstVideoFrameDecoded(false), vosdkFirstVideoFrameDrawed(false), vosdkVideoSendingStopped(false), vosdkVideoDisabled(false), vosdkVideoEnabled(false), vosdkVideoStreamSelected(false), vosdkVideoStreamChangeRequest(false), vosdkFirstDataPacketSent(false), vosdkFirstDataPacketReceived(false), vosdkError(false), vosdkPeerOnlineStatus(false), vosdkPeerOfflineStatus(false), vosdkAudioMutePeerStatus(false), vosdkVideoMutePeerStatus(false), vosdkAudioMuteAllStatus(false), vosdkVideoMuteAllStatus(false), vosdkDefaultPeerStatus(false), vosdkP2PStunLoginSuccess(false), vosdkP2PStunLoginFailed(false), vosdkP2PPeerTryTouch(false), vosdkP2PPeerConnected(false), vosdkP2PPeerDisconnected(false), vosdkP2PStart(false), vosdkP2PStop(false), vosdkAPEvent(false), vosdkReportStats(false), vosdkRecordingJoin(false), vosdkRecordingLeave(false), vosdkPrivilegeWillExpire(false), vosdkRenewToken(false), vosdkRenewTokenRes(false), vosdkSignalingMsgStat(false), vosdkLocalFallbackStatus(false), vosdkRemoteFallbackStatus(false), vosdkVideoBandwidthAggressiveLevel(false), vosdkAppSetMinPlayoutDelay(false), vosdkAppSetStartVideoBitRate(false), vosdkSendVideoPaced(false), vosdkApiExec(false), vosdkABTest(false), vosdkAPWorkerEvent(false), vosdkVideoInitialOptions(false), vosdkWorkerEvent(false), vosdkVqcStat(false), vosB2s(false), wrtcBrowser2Gateway(false), wrtcProfile(false), wrtcPubStream(false), wrtcUnpubStream(false), wrtcSubStream(false), wrtcUnsubStream(false), whiteBoardJoinCenter(false), whiteBoardJoinEdge(false), whiteBoardJoinWebSocket(false), whiteBoardUploadFile(false), whiteBoardQuitWebSocket(false), bcPushEvent(false), bcPeriodicUsage(false), vosClientPeriodicState(false), trackSpan(false) {}
  bool uri :1;
  bool encryptedItem :1;
  bool vosdkCounter :1;
  bool vosdkSession :1;
  bool vosdkVocs :1;
  bool vosdkVos :1;
  bool vosdkChan :1;
  bool vosdkQuit :1;
  bool vosdkPeer :1;
  bool vosdkViLocalFrame :1;
  bool vosdkViRemoteFrame :1;
  bool vosdkRating :1;
  bool vosdkACodec :1;
  bool vosdkNetOb :1;
  bool vosdkStartStun :1;
  bool vosdkSendDataBeginning :1;
  bool vosdkJoinIce :1;
  bool vosdkSuccStun :1;
  bool vosdkP2POpen :1;
  bool vosdkErrorCode :1;
  bool vosdkP2PSwitch :1;
  bool vosdkP2PStunStat :1;
  bool vosdkNetworkInformation :1;
  bool vosdkNetOb2 :1;
  bool vosdkNetOb3 :1;
  bool vosdkNetOb4 :1;
  bool vosdkViRemoteFrameDecoded :1;
  bool vosdkSwitchVideoStream :1;
  bool vosdkDeviceStatChange :1;
  bool vosdkLbes :1;
  bool vosdkCameraInfos :1;
  bool vosdkMaxVideoPayloadSet :1;
  bool vosdkFirstAudioPacketSent :1;
  bool vosdkFirstAudioPacketReceived :1;
  bool vosdkAudioSendingStopped :1;
  bool vosdkAudioDisabled :1;
  bool vosdkAudioEnabled :1;
  bool vosdkFirstVideoPacketSent :1;
  bool vosdkFirstVideoPacketReceived :1;
  bool vosdkFirstVideoFrameDecoded :1;
  bool vosdkFirstVideoFrameDrawed :1;
  bool vosdkVideoSendingStopped :1;
  bool vosdkVideoDisabled :1;
  bool vosdkVideoEnabled :1;
  bool vosdkVideoStreamSelected :1;
  bool vosdkVideoStreamChangeRequest :1;
  bool vosdkFirstDataPacketSent :1;
  bool vosdkFirstDataPacketReceived :1;
  bool vosdkError :1;
  bool vosdkPeerOnlineStatus :1;
  bool vosdkPeerOfflineStatus :1;
  bool vosdkAudioMutePeerStatus :1;
  bool vosdkVideoMutePeerStatus :1;
  bool vosdkAudioMuteAllStatus :1;
  bool vosdkVideoMuteAllStatus :1;
  bool vosdkDefaultPeerStatus :1;
  bool vosdkP2PStunLoginSuccess :1;
  bool vosdkP2PStunLoginFailed :1;
  bool vosdkP2PPeerTryTouch :1;
  bool vosdkP2PPeerConnected :1;
  bool vosdkP2PPeerDisconnected :1;
  bool vosdkP2PStart :1;
  bool vosdkP2PStop :1;
  bool vosdkAPEvent :1;
  bool vosdkReportStats :1;
  bool vosdkRecordingJoin :1;
  bool vosdkRecordingLeave :1;
  bool vosdkPrivilegeWillExpire :1;
  bool vosdkRenewToken :1;
  bool vosdkRenewTokenRes :1;
  bool vosdkSignalingMsgStat :1;
  bool vosdkLocalFallbackStatus :1;
  bool vosdkRemoteFallbackStatus :1;
  bool vosdkVideoBandwidthAggressiveLevel :1;
  bool vosdkAppSetMinPlayoutDelay :1;
  bool vosdkAppSetStartVideoBitRate :1;
  bool vosdkSendVideoPaced :1;
  bool vosdkApiExec :1;
  bool vosdkABTest :1;
  bool vosdkAPWorkerEvent :1;
  bool vosdkVideoInitialOptions :1;
  bool vosdkWorkerEvent :1;
  bool vosdkVqcStat :1;
  bool vosB2s :1;
  bool wrtcBrowser2Gateway :1;
  bool wrtcProfile :1;
  bool wrtcPubStream :1;
  bool wrtcUnpubStream :1;
  bool wrtcSubStream :1;
  bool wrtcUnsubStream :1;
  bool whiteBoardJoinCenter :1;
  bool whiteBoardJoinEdge :1;
  bool whiteBoardJoinWebSocket :1;
  bool whiteBoardUploadFile :1;
  bool whiteBoardQuitWebSocket :1;
  bool bcPushEvent :1;
  bool bcPeriodicUsage :1;
  bool vosClientPeriodicState :1;
  bool trackSpan :1;
} _ReportItem__isset;

class ReportItem {
 public:

  static const char* ascii_fingerprint; // = "751C86260F2BB3DB326B9FA287E4C9AD";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x1C,0x86,0x26,0x0F,0x2B,0xB3,0xDB,0x32,0x6B,0x9F,0xA2,0x87,0xE4,0xC9,0xAD};

  ReportItem(const ReportItem&);
  ReportItem& operator=(const ReportItem&);
  ReportItem() : uri(0) {
  }

  virtual ~ReportItem() throw();
  int32_t uri;
  EncryptedItem encryptedItem;
  VosdkCounter vosdkCounter;
  VosdkSession vosdkSession;
  VosdkVocs vosdkVocs;
  VosdkVos vosdkVos;
  VosdkChan vosdkChan;
  VosdkQuit vosdkQuit;
  VosdkPeer vosdkPeer;
  VosdkViLocalFrame vosdkViLocalFrame;
  VosdkViRemoteFrame vosdkViRemoteFrame;
  VosdkRating vosdkRating;
  VosdkACodec vosdkACodec;
  VosdkNetOb vosdkNetOb;
  VosdkP2PStartStun vosdkStartStun;
  VosdkP2PSendDataBeginning vosdkSendDataBeginning;
  VosdkP2PJoinIce vosdkJoinIce;
  VosdkP2PSuccStun vosdkSuccStun;
  VosdkP2POpen vosdkP2POpen;
  VosdkErrorCode vosdkErrorCode;
  VosdkP2PSwitch vosdkP2PSwitch;
  VosdkP2PStunStat vosdkP2PStunStat;
  VosdkNetworkInformation vosdkNetworkInformation;
  VosdkNetOb2 vosdkNetOb2;
  VosdkNetOb3 vosdkNetOb3;
  VosdkNetOb4 vosdkNetOb4;
  VosdkViRemoteFrameDecoded vosdkViRemoteFrameDecoded;
  VosdkSwitchVideoStream vosdkSwitchVideoStream;
  VosdkDeviceStatChange vosdkDeviceStatChange;
  VosdkLbes vosdkLbes;
  VosdkCameraInfos vosdkCameraInfos;
  VosdkMaxVideoPayloadSet vosdkMaxVideoPayloadSet;
  VosdkFirstAudioPacketSent vosdkFirstAudioPacketSent;
  VosdkFirstAudioPacketReceived vosdkFirstAudioPacketReceived;
  VosdkAudioSendingStopped vosdkAudioSendingStopped;
  VosdkAudioDisabled vosdkAudioDisabled;
  VosdkAudioEnabled vosdkAudioEnabled;
  VosdkFirstVideoPacketSent vosdkFirstVideoPacketSent;
  VosdkFirstVideoPacketReceived vosdkFirstVideoPacketReceived;
  VosdkFirstVideoFrameDecoded vosdkFirstVideoFrameDecoded;
  VosdkFirstVideoFrameDrawed vosdkFirstVideoFrameDrawed;
  VosdkVideoSendingStopped vosdkVideoSendingStopped;
  VosdkVideoDisabled vosdkVideoDisabled;
  VosdkVideoEnabled vosdkVideoEnabled;
  VosdkVideoStreamSelected vosdkVideoStreamSelected;
  VosdkVideoStreamChangeRequest vosdkVideoStreamChangeRequest;
  VosdkFirstDataPacketSent vosdkFirstDataPacketSent;
  VosdkFirstDataPacketReceived vosdkFirstDataPacketReceived;
  VosdkError vosdkError;
  VosdkPeerOnlineStatus vosdkPeerOnlineStatus;
  VosdkPeerOfflineStatus vosdkPeerOfflineStatus;
  VosdkAudioMutePeerStatus vosdkAudioMutePeerStatus;
  VosdkVideoMutePeerStatus vosdkVideoMutePeerStatus;
  VosdkAudioMuteAllStatus vosdkAudioMuteAllStatus;
  VosdkVideoMuteAllStatus vosdkVideoMuteAllStatus;
  VosdkDefaultPeerStatus vosdkDefaultPeerStatus;
  VosdkP2PStunLoginSuccess vosdkP2PStunLoginSuccess;
  VosdkP2PStunLoginFailed vosdkP2PStunLoginFailed;
  VosdkP2PPeerTryTouch vosdkP2PPeerTryTouch;
  VosdkP2PPeerConnected vosdkP2PPeerConnected;
  VosdkP2PPeerDisconnected vosdkP2PPeerDisconnected;
  VosdkP2PStart vosdkP2PStart;
  VosdkP2PStop vosdkP2PStop;
  VosdkAPEvent vosdkAPEvent;
  VosdkReportStats vosdkReportStats;
  VosdkRecordingJoin vosdkRecordingJoin;
  VosdkRecordingLeave vosdkRecordingLeave;
  VosdkPrivilegeWillExpire vosdkPrivilegeWillExpire;
  VosdkRenewToken vosdkRenewToken;
  VosdkRenewTokenRes vosdkRenewTokenRes;
  VosdkSignalingMsgStat vosdkSignalingMsgStat;
  VosdkLocalFallbackStatus vosdkLocalFallbackStatus;
  VosdkRemoteFallbackStatus vosdkRemoteFallbackStatus;
  VosdkVideoBandwidthAggressiveLevel vosdkVideoBandwidthAggressiveLevel;
  VosdkAppSetMinPlayoutDelay vosdkAppSetMinPlayoutDelay;
  VosdkAppSetStartVideoBitRate vosdkAppSetStartVideoBitRate;
  VosdkSendVideoPaced vosdkSendVideoPaced;
  VosdkApiExec vosdkApiExec;
  VosdkABTest vosdkABTest;
  VosdkAPWorkerEvent vosdkAPWorkerEvent;
  VosdkVideoInitialOptions vosdkVideoInitialOptions;
  VosdkWorkerEvent vosdkWorkerEvent;
  VosdkVqcStat vosdkVqcStat;
  Vosb2s vosB2s;
  WrtcBrowser2Gateway wrtcBrowser2Gateway;
  WrtcProfile wrtcProfile;
  WrtcPubStream wrtcPubStream;
  WrtcUnpubStream wrtcUnpubStream;
  WrtcSubStream wrtcSubStream;
  WrtcUnsubStream wrtcUnsubStream;
  WhiteBoardJoinCenter whiteBoardJoinCenter;
  WhiteBoardJoinEdge whiteBoardJoinEdge;
  WhiteBoardJoinWebSocket whiteBoardJoinWebSocket;
  WhiteBoardUploadFile whiteBoardUploadFile;
  WhiteBoardQuitWebSocket whiteBoardQuitWebSocket;
  BCPushEvent bcPushEvent;
  BCPeriodicUsage bcPeriodicUsage;
  VOSClientPeriodicState vosClientPeriodicState;
  TrackSpan trackSpan;

  _ReportItem__isset __isset;

  void __set_uri(const int32_t val);

  void __set_encryptedItem(const EncryptedItem& val);

  void __set_vosdkCounter(const VosdkCounter& val);

  void __set_vosdkSession(const VosdkSession& val);

  void __set_vosdkVocs(const VosdkVocs& val);

  void __set_vosdkVos(const VosdkVos& val);

  void __set_vosdkChan(const VosdkChan& val);

  void __set_vosdkQuit(const VosdkQuit& val);

  void __set_vosdkPeer(const VosdkPeer& val);

  void __set_vosdkViLocalFrame(const VosdkViLocalFrame& val);

  void __set_vosdkViRemoteFrame(const VosdkViRemoteFrame& val);

  void __set_vosdkRating(const VosdkRating& val);

  void __set_vosdkACodec(const VosdkACodec& val);

  void __set_vosdkNetOb(const VosdkNetOb& val);

  void __set_vosdkStartStun(const VosdkP2PStartStun& val);

  void __set_vosdkSendDataBeginning(const VosdkP2PSendDataBeginning& val);

  void __set_vosdkJoinIce(const VosdkP2PJoinIce& val);

  void __set_vosdkSuccStun(const VosdkP2PSuccStun& val);

  void __set_vosdkP2POpen(const VosdkP2POpen& val);

  void __set_vosdkErrorCode(const VosdkErrorCode& val);

  void __set_vosdkP2PSwitch(const VosdkP2PSwitch& val);

  void __set_vosdkP2PStunStat(const VosdkP2PStunStat& val);

  void __set_vosdkNetworkInformation(const VosdkNetworkInformation& val);

  void __set_vosdkNetOb2(const VosdkNetOb2& val);

  void __set_vosdkNetOb3(const VosdkNetOb3& val);

  void __set_vosdkNetOb4(const VosdkNetOb4& val);

  void __set_vosdkViRemoteFrameDecoded(const VosdkViRemoteFrameDecoded& val);

  void __set_vosdkSwitchVideoStream(const VosdkSwitchVideoStream& val);

  void __set_vosdkDeviceStatChange(const VosdkDeviceStatChange& val);

  void __set_vosdkLbes(const VosdkLbes& val);

  void __set_vosdkCameraInfos(const VosdkCameraInfos& val);

  void __set_vosdkMaxVideoPayloadSet(const VosdkMaxVideoPayloadSet& val);

  void __set_vosdkFirstAudioPacketSent(const VosdkFirstAudioPacketSent& val);

  void __set_vosdkFirstAudioPacketReceived(const VosdkFirstAudioPacketReceived& val);

  void __set_vosdkAudioSendingStopped(const VosdkAudioSendingStopped& val);

  void __set_vosdkAudioDisabled(const VosdkAudioDisabled& val);

  void __set_vosdkAudioEnabled(const VosdkAudioEnabled& val);

  void __set_vosdkFirstVideoPacketSent(const VosdkFirstVideoPacketSent& val);

  void __set_vosdkFirstVideoPacketReceived(const VosdkFirstVideoPacketReceived& val);

  void __set_vosdkFirstVideoFrameDecoded(const VosdkFirstVideoFrameDecoded& val);

  void __set_vosdkFirstVideoFrameDrawed(const VosdkFirstVideoFrameDrawed& val);

  void __set_vosdkVideoSendingStopped(const VosdkVideoSendingStopped& val);

  void __set_vosdkVideoDisabled(const VosdkVideoDisabled& val);

  void __set_vosdkVideoEnabled(const VosdkVideoEnabled& val);

  void __set_vosdkVideoStreamSelected(const VosdkVideoStreamSelected& val);

  void __set_vosdkVideoStreamChangeRequest(const VosdkVideoStreamChangeRequest& val);

  void __set_vosdkFirstDataPacketSent(const VosdkFirstDataPacketSent& val);

  void __set_vosdkFirstDataPacketReceived(const VosdkFirstDataPacketReceived& val);

  void __set_vosdkError(const VosdkError& val);

  void __set_vosdkPeerOnlineStatus(const VosdkPeerOnlineStatus& val);

  void __set_vosdkPeerOfflineStatus(const VosdkPeerOfflineStatus& val);

  void __set_vosdkAudioMutePeerStatus(const VosdkAudioMutePeerStatus& val);

  void __set_vosdkVideoMutePeerStatus(const VosdkVideoMutePeerStatus& val);

  void __set_vosdkAudioMuteAllStatus(const VosdkAudioMuteAllStatus& val);

  void __set_vosdkVideoMuteAllStatus(const VosdkVideoMuteAllStatus& val);

  void __set_vosdkDefaultPeerStatus(const VosdkDefaultPeerStatus& val);

  void __set_vosdkP2PStunLoginSuccess(const VosdkP2PStunLoginSuccess& val);

  void __set_vosdkP2PStunLoginFailed(const VosdkP2PStunLoginFailed& val);

  void __set_vosdkP2PPeerTryTouch(const VosdkP2PPeerTryTouch& val);

  void __set_vosdkP2PPeerConnected(const VosdkP2PPeerConnected& val);

  void __set_vosdkP2PPeerDisconnected(const VosdkP2PPeerDisconnected& val);

  void __set_vosdkP2PStart(const VosdkP2PStart& val);

  void __set_vosdkP2PStop(const VosdkP2PStop& val);

  void __set_vosdkAPEvent(const VosdkAPEvent& val);

  void __set_vosdkReportStats(const VosdkReportStats& val);

  void __set_vosdkRecordingJoin(const VosdkRecordingJoin& val);

  void __set_vosdkRecordingLeave(const VosdkRecordingLeave& val);

  void __set_vosdkPrivilegeWillExpire(const VosdkPrivilegeWillExpire& val);

  void __set_vosdkRenewToken(const VosdkRenewToken& val);

  void __set_vosdkRenewTokenRes(const VosdkRenewTokenRes& val);

  void __set_vosdkSignalingMsgStat(const VosdkSignalingMsgStat& val);

  void __set_vosdkLocalFallbackStatus(const VosdkLocalFallbackStatus& val);

  void __set_vosdkRemoteFallbackStatus(const VosdkRemoteFallbackStatus& val);

  void __set_vosdkVideoBandwidthAggressiveLevel(const VosdkVideoBandwidthAggressiveLevel& val);

  void __set_vosdkAppSetMinPlayoutDelay(const VosdkAppSetMinPlayoutDelay& val);

  void __set_vosdkAppSetStartVideoBitRate(const VosdkAppSetStartVideoBitRate& val);

  void __set_vosdkSendVideoPaced(const VosdkSendVideoPaced& val);

  void __set_vosdkApiExec(const VosdkApiExec& val);

  void __set_vosdkABTest(const VosdkABTest& val);

  void __set_vosdkAPWorkerEvent(const VosdkAPWorkerEvent& val);

  void __set_vosdkVideoInitialOptions(const VosdkVideoInitialOptions& val);

  void __set_vosdkWorkerEvent(const VosdkWorkerEvent& val);

  void __set_vosdkVqcStat(const VosdkVqcStat& val);

  void __set_vosB2s(const Vosb2s& val);

  void __set_wrtcBrowser2Gateway(const WrtcBrowser2Gateway& val);

  void __set_wrtcProfile(const WrtcProfile& val);

  void __set_wrtcPubStream(const WrtcPubStream& val);

  void __set_wrtcUnpubStream(const WrtcUnpubStream& val);

  void __set_wrtcSubStream(const WrtcSubStream& val);

  void __set_wrtcUnsubStream(const WrtcUnsubStream& val);

  void __set_whiteBoardJoinCenter(const WhiteBoardJoinCenter& val);

  void __set_whiteBoardJoinEdge(const WhiteBoardJoinEdge& val);

  void __set_whiteBoardJoinWebSocket(const WhiteBoardJoinWebSocket& val);

  void __set_whiteBoardUploadFile(const WhiteBoardUploadFile& val);

  void __set_whiteBoardQuitWebSocket(const WhiteBoardQuitWebSocket& val);

  void __set_bcPushEvent(const BCPushEvent& val);

  void __set_bcPeriodicUsage(const BCPeriodicUsage& val);

  void __set_vosClientPeriodicState(const VOSClientPeriodicState& val);

  void __set_trackSpan(const TrackSpan& val);

  bool operator == (const ReportItem & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (__isset.encryptedItem != rhs.__isset.encryptedItem)
      return false;
    else if (__isset.encryptedItem && !(encryptedItem == rhs.encryptedItem))
      return false;
    if (__isset.vosdkCounter != rhs.__isset.vosdkCounter)
      return false;
    else if (__isset.vosdkCounter && !(vosdkCounter == rhs.vosdkCounter))
      return false;
    if (__isset.vosdkSession != rhs.__isset.vosdkSession)
      return false;
    else if (__isset.vosdkSession && !(vosdkSession == rhs.vosdkSession))
      return false;
    if (__isset.vosdkVocs != rhs.__isset.vosdkVocs)
      return false;
    else if (__isset.vosdkVocs && !(vosdkVocs == rhs.vosdkVocs))
      return false;
    if (__isset.vosdkVos != rhs.__isset.vosdkVos)
      return false;
    else if (__isset.vosdkVos && !(vosdkVos == rhs.vosdkVos))
      return false;
    if (__isset.vosdkChan != rhs.__isset.vosdkChan)
      return false;
    else if (__isset.vosdkChan && !(vosdkChan == rhs.vosdkChan))
      return false;
    if (__isset.vosdkQuit != rhs.__isset.vosdkQuit)
      return false;
    else if (__isset.vosdkQuit && !(vosdkQuit == rhs.vosdkQuit))
      return false;
    if (__isset.vosdkPeer != rhs.__isset.vosdkPeer)
      return false;
    else if (__isset.vosdkPeer && !(vosdkPeer == rhs.vosdkPeer))
      return false;
    if (__isset.vosdkViLocalFrame != rhs.__isset.vosdkViLocalFrame)
      return false;
    else if (__isset.vosdkViLocalFrame && !(vosdkViLocalFrame == rhs.vosdkViLocalFrame))
      return false;
    if (__isset.vosdkViRemoteFrame != rhs.__isset.vosdkViRemoteFrame)
      return false;
    else if (__isset.vosdkViRemoteFrame && !(vosdkViRemoteFrame == rhs.vosdkViRemoteFrame))
      return false;
    if (__isset.vosdkRating != rhs.__isset.vosdkRating)
      return false;
    else if (__isset.vosdkRating && !(vosdkRating == rhs.vosdkRating))
      return false;
    if (__isset.vosdkACodec != rhs.__isset.vosdkACodec)
      return false;
    else if (__isset.vosdkACodec && !(vosdkACodec == rhs.vosdkACodec))
      return false;
    if (__isset.vosdkNetOb != rhs.__isset.vosdkNetOb)
      return false;
    else if (__isset.vosdkNetOb && !(vosdkNetOb == rhs.vosdkNetOb))
      return false;
    if (__isset.vosdkStartStun != rhs.__isset.vosdkStartStun)
      return false;
    else if (__isset.vosdkStartStun && !(vosdkStartStun == rhs.vosdkStartStun))
      return false;
    if (__isset.vosdkSendDataBeginning != rhs.__isset.vosdkSendDataBeginning)
      return false;
    else if (__isset.vosdkSendDataBeginning && !(vosdkSendDataBeginning == rhs.vosdkSendDataBeginning))
      return false;
    if (__isset.vosdkJoinIce != rhs.__isset.vosdkJoinIce)
      return false;
    else if (__isset.vosdkJoinIce && !(vosdkJoinIce == rhs.vosdkJoinIce))
      return false;
    if (__isset.vosdkSuccStun != rhs.__isset.vosdkSuccStun)
      return false;
    else if (__isset.vosdkSuccStun && !(vosdkSuccStun == rhs.vosdkSuccStun))
      return false;
    if (__isset.vosdkP2POpen != rhs.__isset.vosdkP2POpen)
      return false;
    else if (__isset.vosdkP2POpen && !(vosdkP2POpen == rhs.vosdkP2POpen))
      return false;
    if (__isset.vosdkErrorCode != rhs.__isset.vosdkErrorCode)
      return false;
    else if (__isset.vosdkErrorCode && !(vosdkErrorCode == rhs.vosdkErrorCode))
      return false;
    if (__isset.vosdkP2PSwitch != rhs.__isset.vosdkP2PSwitch)
      return false;
    else if (__isset.vosdkP2PSwitch && !(vosdkP2PSwitch == rhs.vosdkP2PSwitch))
      return false;
    if (__isset.vosdkP2PStunStat != rhs.__isset.vosdkP2PStunStat)
      return false;
    else if (__isset.vosdkP2PStunStat && !(vosdkP2PStunStat == rhs.vosdkP2PStunStat))
      return false;
    if (__isset.vosdkNetworkInformation != rhs.__isset.vosdkNetworkInformation)
      return false;
    else if (__isset.vosdkNetworkInformation && !(vosdkNetworkInformation == rhs.vosdkNetworkInformation))
      return false;
    if (__isset.vosdkNetOb2 != rhs.__isset.vosdkNetOb2)
      return false;
    else if (__isset.vosdkNetOb2 && !(vosdkNetOb2 == rhs.vosdkNetOb2))
      return false;
    if (__isset.vosdkNetOb3 != rhs.__isset.vosdkNetOb3)
      return false;
    else if (__isset.vosdkNetOb3 && !(vosdkNetOb3 == rhs.vosdkNetOb3))
      return false;
    if (__isset.vosdkNetOb4 != rhs.__isset.vosdkNetOb4)
      return false;
    else if (__isset.vosdkNetOb4 && !(vosdkNetOb4 == rhs.vosdkNetOb4))
      return false;
    if (__isset.vosdkViRemoteFrameDecoded != rhs.__isset.vosdkViRemoteFrameDecoded)
      return false;
    else if (__isset.vosdkViRemoteFrameDecoded && !(vosdkViRemoteFrameDecoded == rhs.vosdkViRemoteFrameDecoded))
      return false;
    if (__isset.vosdkSwitchVideoStream != rhs.__isset.vosdkSwitchVideoStream)
      return false;
    else if (__isset.vosdkSwitchVideoStream && !(vosdkSwitchVideoStream == rhs.vosdkSwitchVideoStream))
      return false;
    if (__isset.vosdkDeviceStatChange != rhs.__isset.vosdkDeviceStatChange)
      return false;
    else if (__isset.vosdkDeviceStatChange && !(vosdkDeviceStatChange == rhs.vosdkDeviceStatChange))
      return false;
    if (__isset.vosdkLbes != rhs.__isset.vosdkLbes)
      return false;
    else if (__isset.vosdkLbes && !(vosdkLbes == rhs.vosdkLbes))
      return false;
    if (__isset.vosdkCameraInfos != rhs.__isset.vosdkCameraInfos)
      return false;
    else if (__isset.vosdkCameraInfos && !(vosdkCameraInfos == rhs.vosdkCameraInfos))
      return false;
    if (__isset.vosdkMaxVideoPayloadSet != rhs.__isset.vosdkMaxVideoPayloadSet)
      return false;
    else if (__isset.vosdkMaxVideoPayloadSet && !(vosdkMaxVideoPayloadSet == rhs.vosdkMaxVideoPayloadSet))
      return false;
    if (__isset.vosdkFirstAudioPacketSent != rhs.__isset.vosdkFirstAudioPacketSent)
      return false;
    else if (__isset.vosdkFirstAudioPacketSent && !(vosdkFirstAudioPacketSent == rhs.vosdkFirstAudioPacketSent))
      return false;
    if (__isset.vosdkFirstAudioPacketReceived != rhs.__isset.vosdkFirstAudioPacketReceived)
      return false;
    else if (__isset.vosdkFirstAudioPacketReceived && !(vosdkFirstAudioPacketReceived == rhs.vosdkFirstAudioPacketReceived))
      return false;
    if (__isset.vosdkAudioSendingStopped != rhs.__isset.vosdkAudioSendingStopped)
      return false;
    else if (__isset.vosdkAudioSendingStopped && !(vosdkAudioSendingStopped == rhs.vosdkAudioSendingStopped))
      return false;
    if (__isset.vosdkAudioDisabled != rhs.__isset.vosdkAudioDisabled)
      return false;
    else if (__isset.vosdkAudioDisabled && !(vosdkAudioDisabled == rhs.vosdkAudioDisabled))
      return false;
    if (__isset.vosdkAudioEnabled != rhs.__isset.vosdkAudioEnabled)
      return false;
    else if (__isset.vosdkAudioEnabled && !(vosdkAudioEnabled == rhs.vosdkAudioEnabled))
      return false;
    if (__isset.vosdkFirstVideoPacketSent != rhs.__isset.vosdkFirstVideoPacketSent)
      return false;
    else if (__isset.vosdkFirstVideoPacketSent && !(vosdkFirstVideoPacketSent == rhs.vosdkFirstVideoPacketSent))
      return false;
    if (__isset.vosdkFirstVideoPacketReceived != rhs.__isset.vosdkFirstVideoPacketReceived)
      return false;
    else if (__isset.vosdkFirstVideoPacketReceived && !(vosdkFirstVideoPacketReceived == rhs.vosdkFirstVideoPacketReceived))
      return false;
    if (__isset.vosdkFirstVideoFrameDecoded != rhs.__isset.vosdkFirstVideoFrameDecoded)
      return false;
    else if (__isset.vosdkFirstVideoFrameDecoded && !(vosdkFirstVideoFrameDecoded == rhs.vosdkFirstVideoFrameDecoded))
      return false;
    if (__isset.vosdkFirstVideoFrameDrawed != rhs.__isset.vosdkFirstVideoFrameDrawed)
      return false;
    else if (__isset.vosdkFirstVideoFrameDrawed && !(vosdkFirstVideoFrameDrawed == rhs.vosdkFirstVideoFrameDrawed))
      return false;
    if (__isset.vosdkVideoSendingStopped != rhs.__isset.vosdkVideoSendingStopped)
      return false;
    else if (__isset.vosdkVideoSendingStopped && !(vosdkVideoSendingStopped == rhs.vosdkVideoSendingStopped))
      return false;
    if (__isset.vosdkVideoDisabled != rhs.__isset.vosdkVideoDisabled)
      return false;
    else if (__isset.vosdkVideoDisabled && !(vosdkVideoDisabled == rhs.vosdkVideoDisabled))
      return false;
    if (__isset.vosdkVideoEnabled != rhs.__isset.vosdkVideoEnabled)
      return false;
    else if (__isset.vosdkVideoEnabled && !(vosdkVideoEnabled == rhs.vosdkVideoEnabled))
      return false;
    if (__isset.vosdkVideoStreamSelected != rhs.__isset.vosdkVideoStreamSelected)
      return false;
    else if (__isset.vosdkVideoStreamSelected && !(vosdkVideoStreamSelected == rhs.vosdkVideoStreamSelected))
      return false;
    if (__isset.vosdkVideoStreamChangeRequest != rhs.__isset.vosdkVideoStreamChangeRequest)
      return false;
    else if (__isset.vosdkVideoStreamChangeRequest && !(vosdkVideoStreamChangeRequest == rhs.vosdkVideoStreamChangeRequest))
      return false;
    if (__isset.vosdkFirstDataPacketSent != rhs.__isset.vosdkFirstDataPacketSent)
      return false;
    else if (__isset.vosdkFirstDataPacketSent && !(vosdkFirstDataPacketSent == rhs.vosdkFirstDataPacketSent))
      return false;
    if (__isset.vosdkFirstDataPacketReceived != rhs.__isset.vosdkFirstDataPacketReceived)
      return false;
    else if (__isset.vosdkFirstDataPacketReceived && !(vosdkFirstDataPacketReceived == rhs.vosdkFirstDataPacketReceived))
      return false;
    if (__isset.vosdkError != rhs.__isset.vosdkError)
      return false;
    else if (__isset.vosdkError && !(vosdkError == rhs.vosdkError))
      return false;
    if (__isset.vosdkPeerOnlineStatus != rhs.__isset.vosdkPeerOnlineStatus)
      return false;
    else if (__isset.vosdkPeerOnlineStatus && !(vosdkPeerOnlineStatus == rhs.vosdkPeerOnlineStatus))
      return false;
    if (__isset.vosdkPeerOfflineStatus != rhs.__isset.vosdkPeerOfflineStatus)
      return false;
    else if (__isset.vosdkPeerOfflineStatus && !(vosdkPeerOfflineStatus == rhs.vosdkPeerOfflineStatus))
      return false;
    if (__isset.vosdkAudioMutePeerStatus != rhs.__isset.vosdkAudioMutePeerStatus)
      return false;
    else if (__isset.vosdkAudioMutePeerStatus && !(vosdkAudioMutePeerStatus == rhs.vosdkAudioMutePeerStatus))
      return false;
    if (__isset.vosdkVideoMutePeerStatus != rhs.__isset.vosdkVideoMutePeerStatus)
      return false;
    else if (__isset.vosdkVideoMutePeerStatus && !(vosdkVideoMutePeerStatus == rhs.vosdkVideoMutePeerStatus))
      return false;
    if (__isset.vosdkAudioMuteAllStatus != rhs.__isset.vosdkAudioMuteAllStatus)
      return false;
    else if (__isset.vosdkAudioMuteAllStatus && !(vosdkAudioMuteAllStatus == rhs.vosdkAudioMuteAllStatus))
      return false;
    if (__isset.vosdkVideoMuteAllStatus != rhs.__isset.vosdkVideoMuteAllStatus)
      return false;
    else if (__isset.vosdkVideoMuteAllStatus && !(vosdkVideoMuteAllStatus == rhs.vosdkVideoMuteAllStatus))
      return false;
    if (__isset.vosdkDefaultPeerStatus != rhs.__isset.vosdkDefaultPeerStatus)
      return false;
    else if (__isset.vosdkDefaultPeerStatus && !(vosdkDefaultPeerStatus == rhs.vosdkDefaultPeerStatus))
      return false;
    if (__isset.vosdkP2PStunLoginSuccess != rhs.__isset.vosdkP2PStunLoginSuccess)
      return false;
    else if (__isset.vosdkP2PStunLoginSuccess && !(vosdkP2PStunLoginSuccess == rhs.vosdkP2PStunLoginSuccess))
      return false;
    if (__isset.vosdkP2PStunLoginFailed != rhs.__isset.vosdkP2PStunLoginFailed)
      return false;
    else if (__isset.vosdkP2PStunLoginFailed && !(vosdkP2PStunLoginFailed == rhs.vosdkP2PStunLoginFailed))
      return false;
    if (__isset.vosdkP2PPeerTryTouch != rhs.__isset.vosdkP2PPeerTryTouch)
      return false;
    else if (__isset.vosdkP2PPeerTryTouch && !(vosdkP2PPeerTryTouch == rhs.vosdkP2PPeerTryTouch))
      return false;
    if (__isset.vosdkP2PPeerConnected != rhs.__isset.vosdkP2PPeerConnected)
      return false;
    else if (__isset.vosdkP2PPeerConnected && !(vosdkP2PPeerConnected == rhs.vosdkP2PPeerConnected))
      return false;
    if (__isset.vosdkP2PPeerDisconnected != rhs.__isset.vosdkP2PPeerDisconnected)
      return false;
    else if (__isset.vosdkP2PPeerDisconnected && !(vosdkP2PPeerDisconnected == rhs.vosdkP2PPeerDisconnected))
      return false;
    if (__isset.vosdkP2PStart != rhs.__isset.vosdkP2PStart)
      return false;
    else if (__isset.vosdkP2PStart && !(vosdkP2PStart == rhs.vosdkP2PStart))
      return false;
    if (__isset.vosdkP2PStop != rhs.__isset.vosdkP2PStop)
      return false;
    else if (__isset.vosdkP2PStop && !(vosdkP2PStop == rhs.vosdkP2PStop))
      return false;
    if (__isset.vosdkAPEvent != rhs.__isset.vosdkAPEvent)
      return false;
    else if (__isset.vosdkAPEvent && !(vosdkAPEvent == rhs.vosdkAPEvent))
      return false;
    if (__isset.vosdkReportStats != rhs.__isset.vosdkReportStats)
      return false;
    else if (__isset.vosdkReportStats && !(vosdkReportStats == rhs.vosdkReportStats))
      return false;
    if (__isset.vosdkRecordingJoin != rhs.__isset.vosdkRecordingJoin)
      return false;
    else if (__isset.vosdkRecordingJoin && !(vosdkRecordingJoin == rhs.vosdkRecordingJoin))
      return false;
    if (__isset.vosdkRecordingLeave != rhs.__isset.vosdkRecordingLeave)
      return false;
    else if (__isset.vosdkRecordingLeave && !(vosdkRecordingLeave == rhs.vosdkRecordingLeave))
      return false;
    if (__isset.vosdkPrivilegeWillExpire != rhs.__isset.vosdkPrivilegeWillExpire)
      return false;
    else if (__isset.vosdkPrivilegeWillExpire && !(vosdkPrivilegeWillExpire == rhs.vosdkPrivilegeWillExpire))
      return false;
    if (__isset.vosdkRenewToken != rhs.__isset.vosdkRenewToken)
      return false;
    else if (__isset.vosdkRenewToken && !(vosdkRenewToken == rhs.vosdkRenewToken))
      return false;
    if (__isset.vosdkRenewTokenRes != rhs.__isset.vosdkRenewTokenRes)
      return false;
    else if (__isset.vosdkRenewTokenRes && !(vosdkRenewTokenRes == rhs.vosdkRenewTokenRes))
      return false;
    if (__isset.vosdkSignalingMsgStat != rhs.__isset.vosdkSignalingMsgStat)
      return false;
    else if (__isset.vosdkSignalingMsgStat && !(vosdkSignalingMsgStat == rhs.vosdkSignalingMsgStat))
      return false;
    if (__isset.vosdkLocalFallbackStatus != rhs.__isset.vosdkLocalFallbackStatus)
      return false;
    else if (__isset.vosdkLocalFallbackStatus && !(vosdkLocalFallbackStatus == rhs.vosdkLocalFallbackStatus))
      return false;
    if (__isset.vosdkRemoteFallbackStatus != rhs.__isset.vosdkRemoteFallbackStatus)
      return false;
    else if (__isset.vosdkRemoteFallbackStatus && !(vosdkRemoteFallbackStatus == rhs.vosdkRemoteFallbackStatus))
      return false;
    if (__isset.vosdkVideoBandwidthAggressiveLevel != rhs.__isset.vosdkVideoBandwidthAggressiveLevel)
      return false;
    else if (__isset.vosdkVideoBandwidthAggressiveLevel && !(vosdkVideoBandwidthAggressiveLevel == rhs.vosdkVideoBandwidthAggressiveLevel))
      return false;
    if (__isset.vosdkAppSetMinPlayoutDelay != rhs.__isset.vosdkAppSetMinPlayoutDelay)
      return false;
    else if (__isset.vosdkAppSetMinPlayoutDelay && !(vosdkAppSetMinPlayoutDelay == rhs.vosdkAppSetMinPlayoutDelay))
      return false;
    if (__isset.vosdkAppSetStartVideoBitRate != rhs.__isset.vosdkAppSetStartVideoBitRate)
      return false;
    else if (__isset.vosdkAppSetStartVideoBitRate && !(vosdkAppSetStartVideoBitRate == rhs.vosdkAppSetStartVideoBitRate))
      return false;
    if (__isset.vosdkSendVideoPaced != rhs.__isset.vosdkSendVideoPaced)
      return false;
    else if (__isset.vosdkSendVideoPaced && !(vosdkSendVideoPaced == rhs.vosdkSendVideoPaced))
      return false;
    if (__isset.vosdkApiExec != rhs.__isset.vosdkApiExec)
      return false;
    else if (__isset.vosdkApiExec && !(vosdkApiExec == rhs.vosdkApiExec))
      return false;
    if (__isset.vosdkABTest != rhs.__isset.vosdkABTest)
      return false;
    else if (__isset.vosdkABTest && !(vosdkABTest == rhs.vosdkABTest))
      return false;
    if (__isset.vosdkAPWorkerEvent != rhs.__isset.vosdkAPWorkerEvent)
      return false;
    else if (__isset.vosdkAPWorkerEvent && !(vosdkAPWorkerEvent == rhs.vosdkAPWorkerEvent))
      return false;
    if (__isset.vosdkVideoInitialOptions != rhs.__isset.vosdkVideoInitialOptions)
      return false;
    else if (__isset.vosdkVideoInitialOptions && !(vosdkVideoInitialOptions == rhs.vosdkVideoInitialOptions))
      return false;
    if (__isset.vosdkWorkerEvent != rhs.__isset.vosdkWorkerEvent)
      return false;
    else if (__isset.vosdkWorkerEvent && !(vosdkWorkerEvent == rhs.vosdkWorkerEvent))
      return false;
    if (__isset.vosdkVqcStat != rhs.__isset.vosdkVqcStat)
      return false;
    else if (__isset.vosdkVqcStat && !(vosdkVqcStat == rhs.vosdkVqcStat))
      return false;
    if (__isset.vosB2s != rhs.__isset.vosB2s)
      return false;
    else if (__isset.vosB2s && !(vosB2s == rhs.vosB2s))
      return false;
    if (__isset.wrtcBrowser2Gateway != rhs.__isset.wrtcBrowser2Gateway)
      return false;
    else if (__isset.wrtcBrowser2Gateway && !(wrtcBrowser2Gateway == rhs.wrtcBrowser2Gateway))
      return false;
    if (__isset.wrtcProfile != rhs.__isset.wrtcProfile)
      return false;
    else if (__isset.wrtcProfile && !(wrtcProfile == rhs.wrtcProfile))
      return false;
    if (__isset.wrtcPubStream != rhs.__isset.wrtcPubStream)
      return false;
    else if (__isset.wrtcPubStream && !(wrtcPubStream == rhs.wrtcPubStream))
      return false;
    if (__isset.wrtcUnpubStream != rhs.__isset.wrtcUnpubStream)
      return false;
    else if (__isset.wrtcUnpubStream && !(wrtcUnpubStream == rhs.wrtcUnpubStream))
      return false;
    if (__isset.wrtcSubStream != rhs.__isset.wrtcSubStream)
      return false;
    else if (__isset.wrtcSubStream && !(wrtcSubStream == rhs.wrtcSubStream))
      return false;
    if (__isset.wrtcUnsubStream != rhs.__isset.wrtcUnsubStream)
      return false;
    else if (__isset.wrtcUnsubStream && !(wrtcUnsubStream == rhs.wrtcUnsubStream))
      return false;
    if (__isset.whiteBoardJoinCenter != rhs.__isset.whiteBoardJoinCenter)
      return false;
    else if (__isset.whiteBoardJoinCenter && !(whiteBoardJoinCenter == rhs.whiteBoardJoinCenter))
      return false;
    if (__isset.whiteBoardJoinEdge != rhs.__isset.whiteBoardJoinEdge)
      return false;
    else if (__isset.whiteBoardJoinEdge && !(whiteBoardJoinEdge == rhs.whiteBoardJoinEdge))
      return false;
    if (__isset.whiteBoardJoinWebSocket != rhs.__isset.whiteBoardJoinWebSocket)
      return false;
    else if (__isset.whiteBoardJoinWebSocket && !(whiteBoardJoinWebSocket == rhs.whiteBoardJoinWebSocket))
      return false;
    if (__isset.whiteBoardUploadFile != rhs.__isset.whiteBoardUploadFile)
      return false;
    else if (__isset.whiteBoardUploadFile && !(whiteBoardUploadFile == rhs.whiteBoardUploadFile))
      return false;
    if (__isset.whiteBoardQuitWebSocket != rhs.__isset.whiteBoardQuitWebSocket)
      return false;
    else if (__isset.whiteBoardQuitWebSocket && !(whiteBoardQuitWebSocket == rhs.whiteBoardQuitWebSocket))
      return false;
    if (__isset.bcPushEvent != rhs.__isset.bcPushEvent)
      return false;
    else if (__isset.bcPushEvent && !(bcPushEvent == rhs.bcPushEvent))
      return false;
    if (__isset.bcPeriodicUsage != rhs.__isset.bcPeriodicUsage)
      return false;
    else if (__isset.bcPeriodicUsage && !(bcPeriodicUsage == rhs.bcPeriodicUsage))
      return false;
    if (__isset.vosClientPeriodicState != rhs.__isset.vosClientPeriodicState)
      return false;
    else if (__isset.vosClientPeriodicState && !(vosClientPeriodicState == rhs.vosClientPeriodicState))
      return false;
    if (__isset.trackSpan != rhs.__isset.trackSpan)
      return false;
    else if (__isset.trackSpan && !(trackSpan == rhs.trackSpan))
      return false;
    return true;
  }
  bool operator != (const ReportItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReportItem& obj);
};

void swap(ReportItem &a, ReportItem &b);

}}} // namespace

#endif
