/*
* Copyright (c) 2017 Agora.io
* All rights reserved.
* Proprietary and Confidential - Agora.io
*/
/*
* Yongli Wang, 2017-10
*/

#include "rtc_code_mapper.h"

namespace agora{
    namespace rtc{

const AgoraCodeMapper::error_map_type AgoraCodeMapper::s_errMap{
    { ERR_START_CALL, ERR_START_CALL },
    { ERR_ADM_INIT_PLAYOUT, ERR_ADM_INIT_PLAYOUT },
    { ERR_ADM_INIT_RECORDING, ERR_ADM_INIT_RECORDING },
    { ERR_ADM_WIN_CORE_INIT, ERR_ADM_GENERAL_ERROR },
    { ERR_ADM_IOS_VPIO_INIT_FAIL, ERR_ADM_GENERAL_ERROR },
    { ERR_ADM_ANDROID_JNI_JAVA_RESOURCE, ERR_ADM_GENERAL_ERROR },
    { ERR_ADM_WIN_CORE_INIT_RECORDING, ERR_ADM_INIT_RECORDING },
    { ERR_ADM_WIN_CORE_INIT_PLAYOUT, ERR_ADM_INIT_PLAYOUT },
    { ERR_ADM_WIN_CORE_INIT_PLAYOUT_NULL, ERR_ADM_INIT_PLAYOUT },
    { ERR_ADM_WIN_WAVE_INIT, ERR_ADM_GENERAL_ERROR },
    { ERR_ADM_WIN_WAVE_INIT_RECORDING, ERR_ADM_INIT_RECORDING },
    { ERR_ADM_WIN_WAVE_INIT_MICROPHONE, ERR_ADM_INIT_RECORDING },
    { ERR_ADM_WIN_WAVE_INIT_PLAYOUT, ERR_ADM_INIT_PLAYOUT },
    { ERR_ADM_WIN_WAVE_INIT_SPEAKER, ERR_ADM_INIT_PLAYOUT },
    { ERR_ADM_ANDROID_JNI_NO_RECORD_FREQUENCY, ERR_ADM_GENERAL_ERROR },
    { ERR_ADM_ANDROID_JNI_NO_PLAYBACK_FREQUENCY, ERR_ADM_GENERAL_ERROR },
    { ERR_ADM_ANDROID_OPENSL_CREATE_ENGINE, ERR_ADM_GENERAL_ERROR },
    { ERR_ADM_ANDROID_OPENSL_CREATE_AUDIO_RECORDER, ERR_ADM_GENERAL_ERROR },
    { ERR_ADM_ANDROID_OPENSL_CREATE_AUDIO_PLAYER, ERR_ADM_GENERAL_ERROR },
    { ERR_ADM_IOS_VPIO_REINIT_FAIL, ERR_ADM_GENERAL_ERROR },
    { ERR_ADM_IOS_VPIO_RESTART_FAIL, ERR_ADM_GENERAL_ERROR },
    { ERR_ADM_IOS_SESSION_SAMPLERATR_ZERO, ERR_ADM_GENERAL_ERROR },

    /*
    * This secion errors mean audio recording or playout feature not work
    */
    { ERR_ADM_START_RECORDING, ERR_ADM_START_RECORDING },
    { ERR_ADM_RUNTIME_RECORDING_ERROR, ERR_ADM_RUNTIME_RECORDING_ERROR },
    { ERR_ADM_RECORD_AUDIO_FAILED, ERR_ADM_RUNTIME_RECORDING_ERROR },
    { ERR_ADM_WIN_CORE_START_RECORDING, ERR_ADM_START_RECORDING },
    { ERR_ADM_WIN_CORE_CREATE_REC_THREAD, ERR_ADM_START_RECORDING },
    { ERR_ADM_WIN_CORE_CAPTURE_NOT_STARTUP, ERR_ADM_START_RECORDING },
    { ERR_ADM_WIN_WAVE_START_RECORDING, ERR_ADM_START_RECORDING },
    { ERR_ADM_IOS_ACTIVATE_SESSION_FAIL, ERR_ADM_START_RECORDING },
    { ERR_ADM_ANDROID_JNI_JAVA_START_RECORD, ERR_ADM_START_RECORDING },
    { ERR_ADM_ANDROID_JNI_JAVA_RECORD_ERROR, ERR_ADM_RUNTIME_RECORDING_ERROR },
    { ERR_ADM_ANDROID_OPENSL_START_RECORDER_THREAD, ERR_ADM_START_RECORDING },
    { ERR_ADM_START_PLAYOUT, ERR_ADM_START_PLAYOUT },
    { ERR_ADM_RUNTIME_PLAYOUT_ERROR, ERR_ADM_RUNTIME_PLAYOUT_ERROR },
    { ERR_ADM_WIN_CORE_CREATE_RENDER_THREAD, ERR_ADM_START_PLAYOUT },
    { ERR_ADM_WIN_CORE_RENDER_NOT_STARTUP, ERR_ADM_RUNTIME_PLAYOUT_ERROR },
    { ERR_ADM_WIN_WAVE_START_PLAYOUT, ERR_ADM_START_PLAYOUT },
    { ERR_ADM_ANDROID_JNI_JAVA_START_PLAYBACK, ERR_ADM_START_PLAYOUT },
    { ERR_ADM_ANDROID_OPENSL_START_PLAYER_THREAD, ERR_ADM_START_PLAYOUT },
    { ERR_ADM_IOS_SET_RENDER_CALLBACK_FAIL, ERR_ADM_RUNTIME_PLAYOUT_ERROR },
    { ERR_ADM_NO_PERMISSION, ERR_ADM_NO_PERMISSION },
    { ERR_ADM_WIN_CORE_NO_RECORDING_DEVICE, ERR_ADM_NO_RECORDING_DEVICE },
    { ERR_ADM_WIN_CORE_NO_PLAYOUT_DEVICE, ERR_ADM_NO_PLAYOUT_DEVICE },
    { ERR_ADM_IOS_INPUT_NOT_AVAILABLE, ERR_ADM_NO_RECORDING_DEVICE },
    { ERR_ADM_RECORD_AUDIO_IS_ACTIVE, ERR_ADM_NO_RECORDING_DEVICE },

    /*
    * Rtc and video engine errors.
    *
    */
    { ERR_START_CAMERA, ERR_START_CAMERA },
    { ERR_VDM_CAMERA_NOT_AUTHORIZED, ERR_VDM_CAMERA_NOT_AUTHORIZED },
    { ERR_VCM_UNKNOWN_ERROR, ERR_VCM_ENCODER_ENCODE_ERROR },
    { ERR_VCM_ENCODER_INIT_ERROR, ERR_VCM_ENCODER_INIT_ERROR },
    { ERR_VCM_ENCODER_ENCODE_ERROR, ERR_VCM_ENCODER_ENCODE_ERROR },
    { ERR_VCM_ENCODER_SET_ERROR, ERR_VCM_ENCODER_ENCODE_ERROR },
    { ERR_INVALID_APP_ID, ERR_INVALID_APP_ID },
    { ERR_INVALID_CHANNEL_NAME, ERR_INVALID_CHANNEL_NAME },
    { ERR_JOIN_CHANNEL_REJECTED, ERR_JOIN_CHANNEL_REJECTED },
    { ERR_LEAVE_CHANNEL_REJECTED, ERR_LEAVE_CHANNEL_REJECTED },
    { ERR_REFUSED, ERR_NOT_SUPPORTED },
    { ERR_SET_CLIENT_ROLE_NOT_AUTHORIZED, ERR_SET_CLIENT_ROLE_NOT_AUTHORIZED },
    { ERR_LOAD_MEDIA_ENGINE, ERR_NOT_READY },
    { ERR_TOKEN_EXPIRED, ERR_TOKEN_EXPIRED },
    { ERR_INVALID_TOKEN, ERR_INVALID_TOKEN },
    { ERR_TOKEN_EXPIRED, ERR_TOKEN_EXPIRED },
    { ERR_CLIENT_IS_BANNED_BY_SERVER, ERR_CLIENT_IS_BANNED_BY_SERVER },
    { ERR_DECRYPTION_FAILED, ERR_DECRYPTION_FAILED },
    
    { ERR_WATERMARK_PARAM, ERR_WATERMARK_PARAM },
    { ERR_WATERMARK_PATH, ERR_WATERMARK_PATH },
    { ERR_WATERMARK_PNG, ERR_WATERMARK_PNG },
    { ERR_WATERMARKR_INFO, ERR_WATERMARKR_INFO },
    { ERR_WATERMARK_ARGB, ERR_WATERMARK_ARGB },
    { ERR_WATERMARK_READ, ERR_WATERMARK_READ}

};
/*
* warnings
*/
const AgoraCodeMapper::warn_map_type AgoraCodeMapper::s_warnMap{
    { WARN_INVALID_VIEW, WARN_INVALID_VIEW },
    { WARN_INIT_VIDEO, WARN_INIT_VIDEO },
    { WARN_ADM_RECORD_AUDIO_SILENCE, WARN_ADM_RECORD_AUDIO_SILENCE },
    { WARN_ADM_IOS_CATEGORY_NOT_PLAYANDRECORD, WARN_ADM_IMPROPER_SETTINGS },
    { WARN_ADM_IOS_SAMPLERATE_CHANGE, WARN_ADM_IMPROPER_SETTINGS },
    { WARN_ADM_RECORD_AUDIO_LOWLEVEL, WARN_ADM_RECORD_AUDIO_LOWLEVEL },
    { WARN_ADM_PLAYOUT_AUDIO_LOWLEVEL, WARN_ADM_PLAYOUT_AUDIO_LOWLEVEL },
    { WARN_APM_HOWLING, WARN_APM_HOWLING },
    { WARN_ADM_GLITCH_STATE, WARN_ADM_GLITCH_STATE },
    { WARN_AUDIO_MIXING_OPEN_ERROR, WARN_AUDIO_MIXING_OPEN_ERROR },
    { WARN_INVALID_VIEW, WARN_INVALID_VIEW },
    { WARN_INIT_VIDEO, WARN_INIT_VIDEO },
    { WARN_NO_AVAILABLE_CHANNEL, WARN_NO_AVAILABLE_CHANNEL },
    { WARN_LOOKUP_CHANNEL_TIMEOUT, WARN_LOOKUP_CHANNEL_TIMEOUT },
    { WARN_LOOKUP_CHANNEL_REJECTED, WARN_LOOKUP_CHANNEL_REJECTED },
    { WARN_OPEN_CHANNEL_TIMEOUT, WARN_OPEN_CHANNEL_TIMEOUT },
    { WARN_OPEN_CHANNEL_REJECTED, WARN_OPEN_CHANNEL_REJECTED },
    { WARN_SET_CLIENT_ROLE_TIMEOUT, WARN_SET_CLIENT_ROLE_TIMEOUT },
    { WARN_OPEN_CHANNEL_INVALID_TICKET, WARN_OPEN_CHANNEL_INVALID_TICKET },
    { WARN_OPEN_CHANNEL_TRY_NEXT_VOS, WARN_OPEN_CHANNEL_TRY_NEXT_VOS }
};

bool AgoraCodeMapper::getMappedErrorCode(ERROR_CODE_TYPE err, ERROR_CODE_TYPE& errorCode)
{
    auto it = s_errMap.find(err);
    if (it != s_errMap.end()){
        errorCode = it->second;
        return true;
    }
    return false;
}

bool AgoraCodeMapper::getMappedWarningCode(WARN_CODE_TYPE warn, WARN_CODE_TYPE& warnCode)
{
    auto it = s_warnMap.find(warn);
    if (it != s_warnMap.end()) {
        warnCode = it->second;
        return true;
    }
    return false;
}
    }
}
